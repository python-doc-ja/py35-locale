# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# E. Kawashima <e.kawaschima+transifex@gmail.com>, 2016
# Hiroaki Itoh <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2016-08-26 05:20+0000\n"
"Last-Translator: INADA Naoki <songofacandy@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc-ja/python-35/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/inspect.rst:2
msgid ":mod:`inspect` --- Inspect live objects"
msgstr ":mod:`inspect` --- 活動中のオブジェクトの情報を取得する"

#: ../../library/inspect.rst:10
msgid "**Source code:** :source:`Lib/inspect.py`"
msgstr "**ソースコード:** :source:`Lib/inspect.py`"

#: ../../library/inspect.rst:14
msgid ""
"The :mod:`inspect` module provides several useful functions to help get "
"information about live objects such as modules, classes, methods, functions,"
" tracebacks, frame objects, and code objects.  For example, it can help you "
"examine the contents of a class, retrieve the source code of a method, "
"extract and format the argument list for a function, or get all the "
"information you need to display a detailed traceback."
msgstr ":mod:`inspect` は、活動中のオブジェクト (モジュール、クラス、メソッド、関数、トレースバック、フレームオブジェクト、コードオブジェクトなど) から情報を取得する関数を定義しており、クラスの内容を調べたり、メソッドのソースコードを取得したり、関数の引数リストを取り出して整形したり、詳細なトレースバックを表示するのに必要な情報を取得したりするために利用できます。"

#: ../../library/inspect.rst:21
msgid ""
"There are four main kinds of services provided by this module: type "
"checking, getting source code, inspecting classes and functions, and "
"examining the interpreter stack."
msgstr "このモジュールの機能は4種類に分類することができます。型チェック、ソースコードの情報取得、クラスや関数からの情報取得、インタープリタのスタック情報の調査です。"

#: ../../library/inspect.rst:29
msgid "Types and members"
msgstr "型とメンバー"

#: ../../library/inspect.rst:31
msgid ""
"The :func:`getmembers` function retrieves the members of an object such as a"
" class or module. The functions whose names begin with \"is\" are mainly "
"provided as convenient choices for the second argument to "
":func:`getmembers`. They also help you determine when you can expect to find"
" the following special attributes:"
msgstr ""

#: ../../library/inspect.rst:38
msgid "Type"
msgstr "型"

#: ../../library/inspect.rst:38
msgid "Attribute"
msgstr "属性"

#: ../../library/inspect.rst:38
msgid "Description"
msgstr "説明"

#: ../../library/inspect.rst:40
msgid "module"
msgstr "モジュール"

#: ../../library/inspect.rst:40 ../../library/inspect.rst:45
#: ../../library/inspect.rst:55 ../../library/inspect.rst:70
#: ../../library/inspect.rst:205
msgid "__doc__"
msgstr "__doc__"

#: ../../library/inspect.rst:40 ../../library/inspect.rst:45
#: ../../library/inspect.rst:55 ../../library/inspect.rst:70
#: ../../library/inspect.rst:205
msgid "documentation string"
msgstr "ドキュメント文字列"

#: ../../library/inspect.rst:42
msgid "__file__"
msgstr "__file__"

#: ../../library/inspect.rst:42
msgid "filename (missing for built-in modules)"
msgstr "ファイル名 (組み込みモジュールには存在しません)"

#: ../../library/inspect.rst:45
msgid "class"
msgstr "クラス"

#: ../../library/inspect.rst:47 ../../library/inspect.rst:57
#: ../../library/inspect.rst:72 ../../library/inspect.rst:178
#: ../../library/inspect.rst:192 ../../library/inspect.rst:207
msgid "__name__"
msgstr "__name__"

#: ../../library/inspect.rst:47
msgid "name with which this class was defined"
msgstr "クラスの定義名"

#: ../../library/inspect.rst:50 ../../library/inspect.rst:60
#: ../../library/inspect.rst:75 ../../library/inspect.rst:180
#: ../../library/inspect.rst:194 ../../library/inspect.rst:210
msgid "__qualname__"
msgstr "__qualname__"

#: ../../library/inspect.rst:50 ../../library/inspect.rst:60
#: ../../library/inspect.rst:75 ../../library/inspect.rst:180
#: ../../library/inspect.rst:194 ../../library/inspect.rst:210
msgid "qualified name"
msgstr "修飾名"

#: ../../library/inspect.rst:52
msgid "__module__"
msgstr "__module__"

#: ../../library/inspect.rst:52
msgid "name of module in which this class was defined"
msgstr "クラスを定義しているモジュールの名前"

#: ../../library/inspect.rst:55
msgid "method"
msgstr "メソッド"

#: ../../library/inspect.rst:57
msgid "name with which this method was defined"
msgstr "メソッドの定義名"

#: ../../library/inspect.rst:62
msgid "__func__"
msgstr "__func__"

#: ../../library/inspect.rst:62
msgid "function object containing implementation of method"
msgstr "メソッドを実装している関数オブジェクト"

#: ../../library/inspect.rst:66 ../../library/inspect.rst:212
msgid "__self__"
msgstr "__self__"

#: ../../library/inspect.rst:66
msgid "instance to which this method is bound, or ``None``"
msgstr "メソッドに結合しているインスタンス、または ``None``"

#: ../../library/inspect.rst:70
msgid "function"
msgstr "関数"

#: ../../library/inspect.rst:72
msgid "name with which this function was defined"
msgstr "関数の定義名"

#: ../../library/inspect.rst:77
msgid "__code__"
msgstr "__code__"

#: ../../library/inspect.rst:77
msgid "code object containing compiled function :term:`bytecode`"
msgstr "関数をコンパイルしたバイトコード (:term:`bytecode`) を格納するコードオブジェクト"

#: ../../library/inspect.rst:81
msgid "__defaults__"
msgstr "__defaults__"

#: ../../library/inspect.rst:81
msgid "tuple of any default values for positional or keyword parameters"
msgstr "位置またはキーワード引数の全ての既定値のタプル"

#: ../../library/inspect.rst:85
msgid "__kwdefaults__"
msgstr "__kwdefaults__"

#: ../../library/inspect.rst:85
msgid "mapping of any default values for keyword-only parameters"
msgstr "キーワード専用引数の全ての既定値のマッピング"

#: ../../library/inspect.rst:89
msgid "__globals__"
msgstr "__globals__"

#: ../../library/inspect.rst:89
msgid "global namespace in which this function was defined"
msgstr "関数が定義されたグローバル名前空間"

#: ../../library/inspect.rst:92
msgid "__annotations__"
msgstr "__annotations__"

#: ../../library/inspect.rst:92
msgid ""
"mapping of parameters names to annotations; ``\"return\"`` key is reserved "
"for return annotations."
msgstr "仮引数名からアノテーションへのマッピング; ``\"return\"`` キーは return アノテーションに予約されています"

#: ../../library/inspect.rst:98
msgid "traceback"
msgstr "トレースバック"

#: ../../library/inspect.rst:98
msgid "tb_frame"
msgstr "tb_frame"

#: ../../library/inspect.rst:98
msgid "frame object at this level"
msgstr "このレベルのフレームオブジェクト"

#: ../../library/inspect.rst:101
msgid "tb_lasti"
msgstr "tb_lasti"

#: ../../library/inspect.rst:101 ../../library/inspect.rst:123
msgid "index of last attempted instruction in bytecode"
msgstr "最後に実行しようとしたバイトコード中のインストラクションを示すインデックス"

#: ../../library/inspect.rst:104
msgid "tb_lineno"
msgstr "tb_lineno"

#: ../../library/inspect.rst:104 ../../library/inspect.rst:126
msgid "current line number in Python source code"
msgstr "現在の Python ソースコードの行番号"

#: ../../library/inspect.rst:107
msgid "tb_next"
msgstr "tb_next"

#: ../../library/inspect.rst:107
msgid "next inner traceback object (called by this level)"
msgstr "このオブジェクトの内側 (このレベルから呼び出された) のトレースバックオブジェクト"

#: ../../library/inspect.rst:111 ../../library/inspect.rst:182
#: ../../library/inspect.rst:199
msgid "frame"
msgstr "フレーム"

#: ../../library/inspect.rst:111
msgid "f_back"
msgstr "f_back"

#: ../../library/inspect.rst:111
msgid "next outer frame object (this frame's caller)"
msgstr "外側 (このフレームを呼び出した) のフレームオブジェクト"

#: ../../library/inspect.rst:114
msgid "f_builtins"
msgstr "f_builtins"

#: ../../library/inspect.rst:114
msgid "builtins namespace seen by this frame"
msgstr "このフレームで参照している組み込み名前空間"

#: ../../library/inspect.rst:117
msgid "f_code"
msgstr "f_code"

#: ../../library/inspect.rst:117
msgid "code object being executed in this frame"
msgstr "このフレームで実行しているコードオブジェクト"

#: ../../library/inspect.rst:120
msgid "f_globals"
msgstr "f_globals"

#: ../../library/inspect.rst:120
msgid "global namespace seen by this frame"
msgstr "このフレームで参照しているグローバル名前空間"

#: ../../library/inspect.rst:123
msgid "f_lasti"
msgstr "f_lasti"

#: ../../library/inspect.rst:126
msgid "f_lineno"
msgstr "f_lineno"

#: ../../library/inspect.rst:129
msgid "f_locals"
msgstr "f_locals"

#: ../../library/inspect.rst:129
msgid "local namespace seen by this frame"
msgstr "このフレームで参照しているローカル名前空間"

#: ../../library/inspect.rst:132
msgid "f_restricted"
msgstr "f_restricted"

#: ../../library/inspect.rst:132
msgid "0 or 1 if frame is in restricted execution mode"
msgstr "制限実行モードなら1、それ以外なら0"

#: ../../library/inspect.rst:135
msgid "f_trace"
msgstr "f_trace"

#: ../../library/inspect.rst:135
msgid "tracing function for this frame, or ``None``"
msgstr "このフレームのトレース関数、または ``None``"

#: ../../library/inspect.rst:138 ../../library/inspect.rst:186
#: ../../library/inspect.rst:203
msgid "code"
msgstr "コード"

#: ../../library/inspect.rst:138
msgid "co_argcount"
msgstr "co_argcount"

#: ../../library/inspect.rst:138
msgid "number of arguments (not including \\* or \\*\\* args)"
msgstr "引数の数 (\\* や \\*\\* 引数は含まない)"

#: ../../library/inspect.rst:142
msgid "co_code"
msgstr "co_code"

#: ../../library/inspect.rst:142
msgid "string of raw compiled bytecode"
msgstr "コンパイルされたバイトコードそのままの文字列"

#: ../../library/inspect.rst:145
msgid "co_consts"
msgstr "co_consts"

#: ../../library/inspect.rst:145
msgid "tuple of constants used in the bytecode"
msgstr "バイトコード中で使用している定数のタプル"

#: ../../library/inspect.rst:148
msgid "co_filename"
msgstr "co_filename"

#: ../../library/inspect.rst:148
msgid "name of file in which this code object was created"
msgstr "コードオブジェクトを生成したファイルのファイル名"

#: ../../library/inspect.rst:152
msgid "co_firstlineno"
msgstr "co_firstlineno"

#: ../../library/inspect.rst:152
msgid "number of first line in Python source code"
msgstr "Python ソースコードの先頭行"

#: ../../library/inspect.rst:155
msgid "co_flags"
msgstr "co_flags"

#: ../../library/inspect.rst:155
msgid "bitmap: 1=optimized ``|`` 2=newlocals ``|`` 4=\\*arg ``|`` 8=\\*\\*arg"
msgstr "以下の値の組み合わせ: 1=optimized ``|`` 2=newlocals ``|`` 4=\\*arg ``|`` 8=\\*\\*arg"

#: ../../library/inspect.rst:159
msgid "co_lnotab"
msgstr "co_lnotab"

#: ../../library/inspect.rst:159
msgid "encoded mapping of line numbers to bytecode indices"
msgstr "行番号からバイトコードインデックスへの変換表を文字列にエンコードしたもの"

#: ../../library/inspect.rst:163
msgid "co_name"
msgstr "co_name"

#: ../../library/inspect.rst:163
msgid "name with which this code object was defined"
msgstr "コードオブジェクトが定義されたときの名前"

#: ../../library/inspect.rst:166
msgid "co_names"
msgstr "co_names"

#: ../../library/inspect.rst:166
msgid "tuple of names of local variables"
msgstr "ローカル変数名のタプル"

#: ../../library/inspect.rst:169
msgid "co_nlocals"
msgstr "co_nlocals"

#: ../../library/inspect.rst:169
msgid "number of local variables"
msgstr "ローカル変数の数"

#: ../../library/inspect.rst:171
msgid "co_stacksize"
msgstr "co_stacksize"

#: ../../library/inspect.rst:171
msgid "virtual machine stack space required"
msgstr "必要とされる仮想マシンのスタックスペース"

#: ../../library/inspect.rst:174
msgid "co_varnames"
msgstr "co_varnames"

#: ../../library/inspect.rst:174
msgid "tuple of names of arguments and local variables"
msgstr "引数名とローカル変数名のタプル"

#: ../../library/inspect.rst:178
msgid "generator"
msgstr "ジェネレータ"

#: ../../library/inspect.rst:178 ../../library/inspect.rst:192
msgid "name"
msgstr "名前"

#: ../../library/inspect.rst:182
msgid "gi_frame"
msgstr "gi_frame"

#: ../../library/inspect.rst:184
msgid "gi_running"
msgstr "gi_running"

#: ../../library/inspect.rst:184
msgid "is the generator running?"
msgstr "ジェネレータが実行中かどうか"

#: ../../library/inspect.rst:186
msgid "gi_code"
msgstr "gi_code"

#: ../../library/inspect.rst:188
msgid "gi_yieldfrom"
msgstr "gi_yieldfrom"

#: ../../library/inspect.rst:188
msgid "object being iterated by ``yield from``, or ``None``"
msgstr "``yield from`` でイテレートされているオブジェクト、または ``None``"

#: ../../library/inspect.rst:192
msgid "coroutine"
msgstr "コルーチン"

#: ../../library/inspect.rst:196
msgid "cr_await"
msgstr "cr_await"

#: ../../library/inspect.rst:196
msgid "object being awaited on, or ``None``"
msgstr "待機されているオブジェクト、または ``None``"

#: ../../library/inspect.rst:199
msgid "cr_frame"
msgstr "cr_frame"

#: ../../library/inspect.rst:201
msgid "cr_running"
msgstr "cr_running"

#: ../../library/inspect.rst:201
msgid "is the coroutine running?"
msgstr "コルーチンが実行中かどうか"

#: ../../library/inspect.rst:203
msgid "cr_code"
msgstr "cr_code"

#: ../../library/inspect.rst:205
msgid "builtin"
msgstr "組み込み"

#: ../../library/inspect.rst:207
msgid "original name of this function or method"
msgstr "関数、メソッドの元々の名前"

#: ../../library/inspect.rst:212
msgid "instance to which a method is bound, or ``None``"
msgstr "メソッドが結合しているインスタンス、または ``None``"

#: ../../library/inspect.rst:219
msgid "Add ``__qualname__`` and ``gi_yieldfrom`` attributes to generators."
msgstr "ジェネレータに ``__qualname__`` と ``gi_yieldfrom`` 属性が追加されました。"

#: ../../library/inspect.rst:221
msgid ""
"The ``__name__`` attribute of generators is now set from the function name, "
"instead of the code name, and it can now be modified."
msgstr "ジェネレータの ``__name__`` 属性がコード名ではなく関数名から設定されるようになり、変更できるようになりました。"

#: ../../library/inspect.rst:227
msgid ""
"Return all the members of an object in a list of (name, value) pairs sorted "
"by name.  If the optional *predicate* argument is supplied, only members for"
" which the predicate returns a true value are included."
msgstr "オブジェクトの全メンバーを、(名前, 値) の組み合わせのリストで返します。リストはメンバー名でソートされています。*predicate* が指定されている場合、predicate の戻り値が真となる値のみを返します。"

#: ../../library/inspect.rst:233
msgid ""
":func:`getmembers` will only return class attributes defined in the "
"metaclass when the argument is a class and those attributes have been listed"
" in the metaclass' custom :meth:`__dir__`."
msgstr "引数がクラスで属性がメタクラスのカスタム :meth:`__dir__` に列挙されている場合、:func:`getmembers` はメタクラスで定義されたクラス属性のみを返します。"

#: ../../library/inspect.rst:240
msgid ""
"Returns a :term:`named tuple` ``ModuleInfo(name, suffix, mode, "
"module_type)`` of values that describe how Python will interpret the file "
"identified by *path* if it is a module, or ``None`` if it would not be "
"identified as a module.  In that tuple, *name* is the name of the module "
"without the name of any enclosing package, *suffix* is the trailing part of "
"the file name (which may not be a dot-delimited extension), *mode* is the "
":func:`open` mode that would be used (``'r'`` or ``'rb'``), and "
"*module_type* is an integer giving the type of the module.  *module_type* "
"will have a value which can be compared to the constants defined in the "
":mod:`imp` module; see the documentation for that module for more "
"information on module types."
msgstr ""

#: ../../library/inspect.rst:251
msgid ""
"You may check the file path's suffix against the supported suffixes listed "
"in :mod:`importlib.machinery` to infer the same information."
msgstr ""

#: ../../library/inspect.rst:258
msgid ""
"Return the name of the module named by the file *path*, without including "
"the names of enclosing packages. The file extension is checked against all "
"of the entries in :func:`importlib.machinery.all_suffixes`. If it matches, "
"the final path component is returned with the extension removed. Otherwise, "
"``None`` is returned."
msgstr ""

#: ../../library/inspect.rst:264
msgid ""
"Note that this function *only* returns a meaningful name for actual Python "
"modules - paths that potentially refer to Python packages will still return "
"``None``."
msgstr ""

#: ../../library/inspect.rst:268
msgid ""
"This function is now based directly on :mod:`importlib` rather than the "
"deprecated :func:`getmoduleinfo`."
msgstr ""

#: ../../library/inspect.rst:275
msgid "Return true if the object is a module."
msgstr "オブジェクトがモジュールの場合真を返します。"

#: ../../library/inspect.rst:280
msgid ""
"Return true if the object is a class, whether built-in or created in Python "
"code."
msgstr "オブジェクトが組み込みか Python が生成したクラスの場合に真を返します。"

#: ../../library/inspect.rst:286
msgid "Return true if the object is a bound method written in Python."
msgstr "オブジェクトがメソッドの場合真を返します。"

#: ../../library/inspect.rst:291
msgid ""
"Return true if the object is a Python function, which includes functions "
"created by a :term:`lambda` expression."
msgstr "オブジェクトが Python 関数(:term:`lambda` 式で生成されたものを含む) の場合に真を返します。"

#: ../../library/inspect.rst:297
msgid "Return true if the object is a Python generator function."
msgstr "*object* が Python のジェネレータ関数の場合真を返します。"

#: ../../library/inspect.rst:302
msgid "Return true if the object is a generator."
msgstr "*object* がジェネレータの場合真を返します。"

#: ../../library/inspect.rst:307
msgid ""
"Return true if the object is a :term:`coroutine function` (a function "
"defined with an :keyword:`async def` syntax)."
msgstr "オブジェクトが :term:`コルーチン関数 <coroutine function>` (:keyword:`async def` シンタックスで定義された関数) の場合真を返します。"

#: ../../library/inspect.rst:315
msgid ""
"Return true if the object is a :term:`coroutine` created by an "
":keyword:`async def` function."
msgstr "オブジェクトが :keyword:`async def` で生成された :term:`コルーチン <coroutine>` の場合真を返します。"

#: ../../library/inspect.rst:323
msgid "Return true if the object can be used in :keyword:`await` expression."
msgstr "オブジェクトを :keyword:`await` 式内で使用できる場合真を返します。"

#: ../../library/inspect.rst:325
msgid ""
"Can also be used to distinguish generator-based coroutines from regular "
"generators::"
msgstr "ジェネレータベースのコルーチンと通常のジェネレータを区別するのに使うこともできます。"

#: ../../library/inspect.rst:342
msgid "Return true if the object is a traceback."
msgstr "オブジェクトがトレースバックの場合は真を返します。"

#: ../../library/inspect.rst:347
msgid "Return true if the object is a frame."
msgstr "オブジェクトがフレームの場合は真を返します。"

#: ../../library/inspect.rst:352
msgid "Return true if the object is a code."
msgstr "オブジェクトがコードの場合は真を返します。"

#: ../../library/inspect.rst:357
msgid ""
"Return true if the object is a built-in function or a bound built-in method."
msgstr "オブジェクトが組み込み関数か束縛済みの組み込みメソッドの場合に真を返します。"

#: ../../library/inspect.rst:362
msgid ""
"Return true if the object is a user-defined or built-in function or method."
msgstr "オブジェクトがユーザ定義か組み込みの関数またはメソッドの場合は真を返します。"

#: ../../library/inspect.rst:367
msgid "Return true if the object is an abstract base class."
msgstr "*object* が抽象規定型 (ABC) であるときに真を返します。"

#: ../../library/inspect.rst:372
msgid ""
"Return true if the object is a method descriptor, but not if "
":func:`ismethod`, :func:`isclass`, :func:`isfunction` or :func:`isbuiltin` "
"are true."
msgstr "オブジェクトがメソッドデスクリプタであり、 :func:`ismethod`, :func:`isclass`, :func:`isfunction`, :func:`isbuiltin` でない場合に真を返します。"

#: ../../library/inspect.rst:376
msgid ""
"This, for example, is true of ``int.__add__``.  An object passing this test "
"has a :meth:`~object.__get__` method but not a :meth:`~object.__set__` "
"method, but beyond that the set of attributes varies.  A "
":attr:`~definition.__name__` attribute is usually sensible, and "
":attr:`__doc__` often is."
msgstr ""

#: ../../library/inspect.rst:382
msgid ""
"Methods implemented via descriptors that also pass one of the other tests "
"return false from the :func:`ismethoddescriptor` test, simply because the "
"other tests promise more -- you can, e.g., count on having the "
":attr:`__func__` attribute (etc) when an object passes :func:`ismethod`."
msgstr "デスクリプタを使って実装されたメソッドで、上記のいずれかのテストもパスしているものは、 :func:`ismethoddescriptor` では偽を返します。これは単に他のテストの方がもっと確実だからです -- 例えば、 :func:`ismethod` をパスしたオブジェクトは :attr:`__func__` 属性などを持っていると期待できます。"

#: ../../library/inspect.rst:390
msgid "Return true if the object is a data descriptor."
msgstr "オブジェクトがデータデスクリプタの場合に真を返します。"

#: ../../library/inspect.rst:392
msgid ""
"Data descriptors have both a :attr:`~object.__get__` and a "
":attr:`~object.__set__` method. Examples are properties (defined in Python),"
" getsets, and members.  The latter two are defined in C and there are more "
"specific tests available for those types, which is robust across Python "
"implementations.  Typically, data descriptors will also have "
":attr:`~definition.__name__` and :attr:`__doc__` attributes (properties, "
"getsets, and members have both of these attributes), but this is not "
"guaranteed."
msgstr ""

#: ../../library/inspect.rst:403
msgid "Return true if the object is a getset descriptor."
msgstr "オブジェクトが getset デスクリプタの場合に真を返します。"

#: ../../library/inspect.rst:407
msgid ""
"getsets are attributes defined in extension modules via "
":c:type:`PyGetSetDef` structures.  For Python implementations without such "
"types, this method will always return ``False``."
msgstr "getset とは、拡張モジュールで :c:type:`PyGetSetDef` 構造体を用いて定義された属性のことです。そのような型を持たない Python 実装の場合は、このメソッドは常に ``False`` を返します。"

#: ../../library/inspect.rst:414
msgid "Return true if the object is a member descriptor."
msgstr "オブジェクトがメンバーデスクリプタの場合に真を返します。"

#: ../../library/inspect.rst:418
msgid ""
"Member descriptors are attributes defined in extension modules via "
":c:type:`PyMemberDef` structures.  For Python implementations without such "
"types, this method will always return ``False``."
msgstr "メンバーデスクリプタとは、拡張モジュールで :c:type:`PyMemberDef` 構造体を用いて定義された属性のことです。そのような型を持たない Python 実装の場合は、このメソッドは常に ``False`` を返します。"

#: ../../library/inspect.rst:426
msgid "Retrieving source code"
msgstr "ソースコードの情報取得"

#: ../../library/inspect.rst:430
msgid ""
"Get the documentation string for an object, cleaned up with "
":func:`cleandoc`. If the documentation string for an object is not provided "
"and the object is a class, a method, a property or a descriptor, retrieve "
"the documentation string from the inheritance hierarchy."
msgstr ""

#: ../../library/inspect.rst:435
msgid "Documentation strings are now inherited if not overridden."
msgstr "ドキュメンテーション文字列がオーバーライドされていない場合は継承されるようになりました。"

#: ../../library/inspect.rst:441
msgid ""
"Return in a single string any lines of comments immediately preceding the "
"object's source code (for a class, function, or method), or at the top of "
"the Python source file (if the object is a module)."
msgstr "オブジェクトがクラス、関数、メソッドのいずれかの場合は、オブジェクトのソースコードの直後にあるコメント行 (複数行) を、単一の文字列として返します。オブジェクトがモジュールの場合、ソースファイルの先頭にあるコメントを返します。"

#: ../../library/inspect.rst:448
msgid ""
"Return the name of the (text or binary) file in which an object was defined."
" This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr "オブジェクトを定義している (テキストまたはバイナリの) ファイルの名前を返します。オブジェクトが組み込みモジュール、クラス、関数の場合は :exc:`TypeError` 例外が発生します。"

#: ../../library/inspect.rst:455
msgid "Try to guess which module an object was defined in."
msgstr "オブジェクトを定義しているモジュールを推測します。"

#: ../../library/inspect.rst:460
msgid ""
"Return the name of the Python source file in which an object was defined.  "
"This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr "オブジェクトを定義している Python ソースファイルの名前を返します。オブジェクトが組み込みのモジュール、クラス、関数の場合には、 :exc:`TypeError` 例外が発生します。"

#: ../../library/inspect.rst:467
msgid ""
"Return a list of source lines and starting line number for an object. The "
"argument may be a module, class, method, function, traceback, frame, or code"
" object.  The source code is returned as a list of the lines corresponding "
"to the object and the line number indicates where in the original source "
"file the first line of code was found.  An :exc:`OSError` is raised if the "
"source code cannot be retrieved."
msgstr "オブジェクトのソース行のリストと開始行番号を返します。引数にはモジュール、クラス、メソッド、関数、トレースバック、フレーム、コードオブジェクトを指定することができます。戻り値は指定したオブジェクトに対応するソースコードのソース行リストと元のソースファイル上での開始行となります。ソースコードを取得できない場合は :exc:`OSError` が発生します。"

#: ../../library/inspect.rst:474 ../../library/inspect.rst:486
msgid ""
":exc:`OSError` is raised instead of :exc:`IOError`, now an alias of the "
"former."
msgstr ":exc:`IOError` の代わりに :exc:`OSError` を送出します。前者は後者のエイリアスです。"

#: ../../library/inspect.rst:481
msgid ""
"Return the text of the source code for an object. The argument may be a "
"module, class, method, function, traceback, frame, or code object.  The "
"source code is returned as a single string.  An :exc:`OSError` is raised if "
"the source code cannot be retrieved."
msgstr "オブジェクトのソースコードを返します。引数にはモジュール、クラス、メソッド、関数、トレースバック、フレーム、コードオブジェクトを指定することができます。ソースコードは単一の文字列で返します。ソースコードを取得できない場合は :exc:`OSError` が発生します。"

#: ../../library/inspect.rst:493
msgid ""
"Clean up indentation from docstrings that are indented to line up with "
"blocks of code."
msgstr ""

#: ../../library/inspect.rst:496
msgid ""
"All leading whitespace is removed from the first line.  Any leading "
"whitespace that can be uniformly removed from the second line onwards is "
"removed.  Empty lines at the beginning and end are subsequently removed.  "
"Also, all tabs are expanded to spaces."
msgstr ""

#: ../../library/inspect.rst:505
msgid "Introspecting callables with the Signature object"
msgstr "Signature オブジェクトで呼び出し可能オブジェクトを内省する"

#: ../../library/inspect.rst:509
msgid ""
"The Signature object represents the call signature of a callable object and "
"its return annotation.  To retrieve a Signature object, use the "
":func:`signature` function."
msgstr ""

#: ../../library/inspect.rst:515
msgid "Return a :class:`Signature` object for the given ``callable``::"
msgstr "与えられた ``callable`` の :class:`Signature` オブジェクトを返します::"

#: ../../library/inspect.rst:532
msgid ""
"Accepts a wide range of python callables, from plain functions and classes "
"to :func:`functools.partial` objects."
msgstr ""

#: ../../library/inspect.rst:535
msgid ""
"Raises :exc:`ValueError` if no signature can be provided, and "
":exc:`TypeError` if that type of object is not supported."
msgstr ""

#: ../../library/inspect.rst:538
msgid ""
"``follow_wrapped`` parameter. Pass ``False`` to get a signature of "
"``callable`` specifically (``callable.__wrapped__`` will not be used to "
"unwrap decorated callables.)"
msgstr ""

#: ../../library/inspect.rst:545
msgid ""
"Some callables may not be introspectable in certain implementations of "
"Python.  For example, in CPython, some built-in functions defined in C "
"provide no metadata about their arguments."
msgstr ""

#: ../../library/inspect.rst:552
msgid ""
"A Signature object represents the call signature of a function and its "
"return annotation.  For each parameter accepted by the function it stores a "
":class:`Parameter` object in its :attr:`parameters` collection."
msgstr ""

#: ../../library/inspect.rst:556
msgid ""
"The optional *parameters* argument is a sequence of :class:`Parameter` "
"objects, which is validated to check that there are no parameters with "
"duplicate names, and that the parameters are in the right order, i.e. "
"positional-only first, then positional-or-keyword, and that parameters with "
"defaults follow parameters without defaults."
msgstr ""

#: ../../library/inspect.rst:562
msgid ""
"The optional *return_annotation* argument, can be an arbitrary Python "
"object, is the \"return\" annotation of the callable."
msgstr ""

#: ../../library/inspect.rst:565
msgid ""
"Signature objects are *immutable*.  Use :meth:`Signature.replace` to make a "
"modified copy."
msgstr "Signature オブジェクトは *イミュータブル* です。変更されたコピーを作成するには :meth:`Signature.replace` を使用してください。"

#: ../../library/inspect.rst:568
msgid "Signature objects are picklable and hashable."
msgstr "Signature オブジェクトがピックル並びにハッシュ可能になりました。"

#: ../../library/inspect.rst:573
msgid ""
"A special class-level marker to specify absence of a return annotation."
msgstr "return アノテーションがないことを指すクラスレベルの特殊マーカです。"

#: ../../library/inspect.rst:577
msgid ""
"An ordered mapping of parameters' names to the corresponding "
":class:`Parameter` objects."
msgstr "仮引数名から対応する :class:`Parameter` オブジェクトへの順序付きマッピングです。"

#: ../../library/inspect.rst:582
msgid ""
"The \"return\" annotation for the callable.  If the callable has no "
"\"return\" annotation, this attribute is set to :attr:`Signature.empty`."
msgstr "呼び出し可能オブジェクトの \"return\" アノテーションです。呼び出し可能オブジェクトに \"return\" アノテーションがない場合、この属性は :attr:`Signature.empty` に設定されます。"

#: ../../library/inspect.rst:587
msgid ""
"Create a mapping from positional and keyword arguments to parameters. "
"Returns :class:`BoundArguments` if ``*args`` and ``**kwargs`` match the "
"signature, or raises a :exc:`TypeError`."
msgstr ""

#: ../../library/inspect.rst:593
msgid ""
"Works the same way as :meth:`Signature.bind`, but allows the omission of "
"some required arguments (mimics :func:`functools.partial` behavior.) Returns"
" :class:`BoundArguments`, or raises a :exc:`TypeError` if the passed "
"arguments do not match the signature."
msgstr ""

#: ../../library/inspect.rst:600
msgid ""
"Create a new Signature instance based on the instance replace was invoked "
"on.  It is possible to pass different ``parameters`` and/or "
"``return_annotation`` to override the corresponding properties of the base "
"signature.  To remove return_annotation from the copied Signature, pass in "
":attr:`Signature.empty`."
msgstr ""

#: ../../library/inspect.rst:617
msgid ""
"Return a :class:`Signature` (or its subclass) object for a given callable "
"``obj``.  Pass ``follow_wrapped=False`` to get a signature of ``obj`` "
"without unwrapping its ``__wrapped__`` chain."
msgstr ""

#: ../../library/inspect.rst:621
msgid "This method simplifies subclassing of :class:`Signature`::"
msgstr "このメソッドは :class:`Signature` のサブクラス化を単純化します::"

#: ../../library/inspect.rst:633
msgid ""
"Parameter objects are *immutable*.  Instead of modifying a Parameter object,"
" you can use :meth:`Parameter.replace` to create a modified copy."
msgstr "Parameter オブジェクトは *イミュータブル* です。変更されたコピーを作成するには :meth:`Parameter.replace` を使用してください。"

#: ../../library/inspect.rst:636
msgid "Parameter objects are picklable and hashable."
msgstr "Parameter オブジェクトがピックル並びにハッシュ可能になりました。"

#: ../../library/inspect.rst:641
msgid ""
"A special class-level marker to specify absence of default values and "
"annotations."
msgstr "デフォルト値とアノテーションがないことを指すクラスレベルの特殊マーカです。"

#: ../../library/inspect.rst:646
msgid ""
"The name of the parameter as a string.  The name must be a valid Python "
"identifier."
msgstr "仮引数名 (文字列) です。名前は有効な Python 識別子でなければなりません。"

#: ../../library/inspect.rst:651
msgid ""
"The default value for the parameter.  If the parameter has no default value,"
" this attribute is set to :attr:`Parameter.empty`."
msgstr "引数のデフォルト値です。引数にデフォルト値がない場合、この属性は :attr:`Parameter.empty` に設定されます。"

#: ../../library/inspect.rst:656
msgid ""
"The annotation for the parameter.  If the parameter has no annotation, this "
"attribute is set to :attr:`Parameter.empty`."
msgstr "引数のアノテーションです。引数にアノテーションがない場合、この属性は :attr:`Parameter.empty` に設定されます。"

#: ../../library/inspect.rst:661
msgid ""
"Describes how argument values are bound to the parameter.  Possible values "
"(accessible via :class:`Parameter`, like ``Parameter.KEYWORD_ONLY``):"
msgstr "実引数値がどのように仮引数に束縛されるかを記述します。有効な値 (:class:`Parameter` を通じてアクセスできます、たとえば ``Parameter.KEYWORD_ONLY``) は:"

#: ../../library/inspect.rst:667
msgid "Name"
msgstr "名前"

#: ../../library/inspect.rst:667
msgid "Meaning"
msgstr "意味"

#: ../../library/inspect.rst:669
msgid "*POSITIONAL_ONLY*"
msgstr "*POSITIONAL_ONLY*"

#: ../../library/inspect.rst:669
msgid "Value must be supplied as a positional argument."
msgstr "値を位置引数として渡さなければなりません。"

#: ../../library/inspect.rst:672
msgid ""
"Python has no explicit syntax for defining positional-only parameters, but "
"many built-in and extension module functions (especially those that accept "
"only one or two parameters) accept them."
msgstr "Python には位置専用引数を定義する明示的なシンタックスはありませんが、組み込みおよび拡張モジュールの多くの関数 (特に1つか2つの引数を取るもの) は位置専用引数を取ります。"

#: ../../library/inspect.rst:678
msgid "*POSITIONAL_OR_KEYWORD*"
msgstr "*POSITIONAL_OR_KEYWORD*"

#: ../../library/inspect.rst:678
msgid ""
"Value may be supplied as either a keyword or positional argument (this is "
"the standard binding behaviour for functions implemented in Python.)"
msgstr "値をキーワードまたは位置引数として渡すことができます (これは Python で実装された関数の標準的な束縛動作です)。"

#: ../../library/inspect.rst:683
msgid "*VAR_POSITIONAL*"
msgstr "*VAR_POSITIONAL*"

#: ../../library/inspect.rst:683
msgid ""
"A tuple of positional arguments that aren't bound to any other parameter. "
"This corresponds to a ``*args`` parameter in a Python function definition."
msgstr "その他の仮引数に束縛されていない位置引数のタプルです。Python の関数定義における ``*args`` 仮引数に対応します。"

#: ../../library/inspect.rst:688
msgid "*KEYWORD_ONLY*"
msgstr "*KEYWORD_ONLY*"

#: ../../library/inspect.rst:688
msgid ""
"Value must be supplied as a keyword argument. Keyword only parameters are "
"those which appear after a ``*`` or ``*args`` entry in a Python function "
"definition."
msgstr "値をキーワード引数として渡さなければなりません。キーワード専用引数は Python の関数定義において ``*`` や ``*args`` の後に現れる引数です。"

#: ../../library/inspect.rst:693
msgid "*VAR_KEYWORD*"
msgstr "*VAR_KEYWORD*"

#: ../../library/inspect.rst:693
msgid ""
"A dict of keyword arguments that aren't bound to any other parameter. This "
"corresponds to a ``**kwargs`` parameter in a Python function definition."
msgstr "その他の仮引数に束縛されていないキーワード引数の辞書です。Python の関数定義における ``**kwargs`` 仮引数に対応します。"

#: ../../library/inspect.rst:699
msgid "Example: print all keyword-only arguments without default values::"
msgstr "例: デフォルト値のない全てのキーワード専用引数を出力します::"

#: ../../library/inspect.rst:713
msgid ""
"Create a new Parameter instance based on the instance replaced was invoked "
"on.  To override a :class:`Parameter` attribute, pass the corresponding "
"argument.  To remove a default value or/and an annotation from a Parameter, "
"pass :attr:`Parameter.empty`."
msgstr ""

#: ../../library/inspect.rst:731
msgid ""
"In Python 3.3 Parameter objects were allowed to have ``name`` set to "
"``None`` if their ``kind`` was set to ``POSITIONAL_ONLY``. This is no longer"
" permitted."
msgstr "Python 3.3 では、Parameter オブジェクトは ``kind`` が ``POSITIONAL_ONLY`` の場合 ``None`` に設定された ``name`` を持つことができました。 これはもう許可されません。"

#: ../../library/inspect.rst:738
msgid ""
"Result of a :meth:`Signature.bind` or :meth:`Signature.bind_partial` call. "
"Holds the mapping of arguments to the function's parameters."
msgstr ""

#: ../../library/inspect.rst:743
msgid ""
"An ordered, mutable mapping (:class:`collections.OrderedDict`) of "
"parameters' names to arguments' values.  Contains only explicitly bound "
"arguments.  Changes in :attr:`arguments` will reflect in :attr:`args` and "
":attr:`kwargs`."
msgstr ""

#: ../../library/inspect.rst:748
msgid ""
"Should be used in conjunction with :attr:`Signature.parameters` for any "
"argument processing purposes."
msgstr ""

#: ../../library/inspect.rst:753
msgid ""
"Arguments for which :meth:`Signature.bind` or :meth:`Signature.bind_partial`"
" relied on a default value are skipped. However, if needed, use "
":meth:`BoundArguments.apply_defaults` to add them."
msgstr ""

#: ../../library/inspect.rst:760
msgid ""
"A tuple of positional arguments values.  Dynamically computed from the "
":attr:`arguments` attribute."
msgstr "位置引数の値のタプルです。:attr:`arguments` 属性から動的に計算されます。"

#: ../../library/inspect.rst:765
msgid ""
"A dict of keyword arguments values.  Dynamically computed from the "
":attr:`arguments` attribute."
msgstr "キーワード引数の値の辞書です。:attr:`arguments` 属性から動的に計算されます。"

#: ../../library/inspect.rst:770
msgid "A reference to the parent :class:`Signature` object."
msgstr "親の :class:`Signature` オブジェクトへの参照です。"

#: ../../library/inspect.rst:774
msgid "Set default values for missing arguments."
msgstr "存在しない引数のデフォルト値を設定します。"

#: ../../library/inspect.rst:776
msgid ""
"For variable-positional arguments (``*args``) the default is an empty tuple."
msgstr ""

#: ../../library/inspect.rst:779
msgid ""
"For variable-keyword arguments (``**kwargs``) the default is an empty dict."
msgstr ""

#: ../../library/inspect.rst:792
msgid ""
"The :attr:`args` and :attr:`kwargs` properties can be used to invoke "
"functions::"
msgstr ":attr:`args` および :attr:`kwargs` 属性を使用して関数を呼び出すことができます::"

#: ../../library/inspect.rst:805
msgid ":pep:`362` - Function Signature Object."
msgstr ""

#: ../../library/inspect.rst:806
msgid "The detailed specification, implementation details and examples."
msgstr ""

#: ../../library/inspect.rst:812
msgid "Classes and functions"
msgstr "クラスと関数"

#: ../../library/inspect.rst:816
msgid ""
"Arrange the given list of classes into a hierarchy of nested lists. Where a "
"nested list appears, it contains classes derived from the class whose entry "
"immediately precedes the list.  Each entry is a 2-tuple containing a class "
"and a tuple of its base classes.  If the *unique* argument is true, exactly "
"one entry appears in the returned structure for each class in the given "
"list.  Otherwise, classes using multiple inheritance and their descendants "
"will appear multiple times."
msgstr "リストで指定したクラスの継承関係から、ネストしたリストを作成します。ネストしたリストには、直前の要素から派生したクラスが格納されます。各要素は長さ2のタプルで、クラスと基底クラスのタプルを格納しています。*unique* が真の場合、各クラスは戻り値のリスト内に一つだけしか格納されません。真でなければ、多重継承を利用したクラスとその派生クラスは複数回格納される場合があります。"

#: ../../library/inspect.rst:827
msgid ""
"Get the names and default values of a Python function's arguments. A "
":term:`named tuple` ``ArgSpec(args, varargs, keywords, defaults)`` is "
"returned. *args* is a list of the argument names. *varargs* and *keywords* "
"are the names of the ``*`` and ``**`` arguments or ``None``. *defaults* is a"
" tuple of default argument values or ``None`` if there are no default "
"arguments; if this tuple has *n* elements, they correspond to the last *n* "
"elements listed in *args*."
msgstr ""

#: ../../library/inspect.rst:835 ../../library/inspect.rst:864
#: ../../library/inspect.rst:878 ../../library/inspect.rst:905
#: ../../library/inspect.rst:917
msgid ""
"Use :func:`signature` and :ref:`Signature Object <inspect-signature-"
"object>`, which provide a better introspecting API for callables."
msgstr ""

#: ../../library/inspect.rst:843
msgid ""
"Get the names and default values of a Python function's arguments.  A "
":term:`named tuple` is returned:"
msgstr ""

#: ../../library/inspect.rst:846
msgid ""
"``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, "
"annotations)``"
msgstr "``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)``"

#: ../../library/inspect.rst:849
msgid ""
"*args* is a list of the argument names.  *varargs* and *varkw* are the names"
" of the ``*`` and ``**`` arguments or ``None``.  *defaults* is an *n*-tuple "
"of the default values of the last *n* arguments, or ``None`` if there are no"
" default arguments.  *kwonlyargs* is a list of keyword-only argument names."
"  *kwonlydefaults* is a dictionary mapping names from kwonlyargs to "
"defaults.  *annotations* is a dictionary mapping argument names to "
"annotations."
msgstr ""

#: ../../library/inspect.rst:857
msgid "The first four items in the tuple correspond to :func:`getargspec`."
msgstr ""

#: ../../library/inspect.rst:859
msgid ""
"This function is now based on :func:`signature`, but still ignores "
"``__wrapped__`` attributes and includes the already bound first parameter in"
" the signature output for bound methods."
msgstr ""

#: ../../library/inspect.rst:872
msgid ""
"Get information about arguments passed into a particular frame.  A "
":term:`named tuple` ``ArgInfo(args, varargs, keywords, locals)`` is "
"returned. *args* is a list of the argument names.  *varargs* and *keywords* "
"are the names of the ``*`` and ``**`` arguments or ``None``.  *locals* is "
"the locals dictionary of the given frame."
msgstr ""

#: ../../library/inspect.rst:886
msgid ""
"Format a pretty argument spec from the values returned by :func:`getargspec`"
" or :func:`getfullargspec`."
msgstr ""

#: ../../library/inspect.rst:889
msgid ""
"The first seven arguments are (``args``, ``varargs``, ``varkw``, "
"``defaults``, ``kwonlyargs``, ``kwonlydefaults``, ``annotations``)."
msgstr ""

#: ../../library/inspect.rst:892
msgid ""
"The other six arguments are functions that are called to turn argument "
"names, ``*`` argument name, ``**`` argument name, default values, return "
"annotation and individual annotations into strings, respectively."
msgstr ""

#: ../../library/inspect.rst:896
msgid "For example:"
msgstr "例えば:"

#: ../../library/inspect.rst:913
msgid ""
"Format a pretty argument spec from the four values returned by "
":func:`getargvalues`.  The format\\* arguments are the corresponding "
"optional formatting functions that are called to turn names and values into "
"strings."
msgstr ":func:`getargvalues` で取得した4つの値を読みやすく整形します。 format\\* 引数はオプションで、名前と値を文字列に変換する整形関数を指定することができます。"

#: ../../library/inspect.rst:925
msgid ""
"Return a tuple of class cls's base classes, including cls, in method "
"resolution order.  No class appears more than once in this tuple. Note that "
"the method resolution order depends on cls's type.  Unless a very peculiar "
"user-defined metatype is in use, cls will be the first element of the tuple."
msgstr "*cls* クラスの基底クラス (*cls* 自身も含む) を、メソッドの優先順位順に並べたタプルを返します。結果のリスト内で各クラスは一度だけ格納されます。メソッドの優先順位はクラスの型によって異なります。非常に特殊なユーザ定義のメタクラスを使用していない限り、*cls* が戻り値の先頭要素となります。"

#: ../../library/inspect.rst:933
msgid ""
"Bind the *args* and *kwds* to the argument names of the Python function or "
"method *func*, as if it was called with them. For bound methods, bind also "
"the first argument (typically named ``self``) to the associated instance. A "
"dict is returned, mapping the argument names (including the names of the "
"``*`` and ``**`` arguments, if any) to their values from *args* and *kwds*. "
"In case of invoking *func* incorrectly, i.e. whenever ``func(*args, "
"**kwds)`` would raise an exception because of incompatible signature, an "
"exception of the same type and the same or similar message is raised. For "
"example::"
msgstr "*args* と *kwds* を、Python の関数もしくはメソッド *func* を呼び出した場合と同じように引数名に束縛します。束縛済みメソッド(bound method)の場合、最初の引数(慣習的に ``self`` という名前が付けられます)にも、関連づけられたインスタンスを束縛します。引数名 (``*`` や ``**`` 引数が存在すればその名前も) に *args* と *kwds* からの値をマップした辞書を返します。*func* を正しく呼び出せない場合、つまり ``func(*args, **kwds)`` がシグネチャの不一致のために例外を投げるような場合には、それと同じ型で同じか似ているメッセージの例外を発生させます。例::"

#: ../../library/inspect.rst:956
msgid "Use :meth:`Signature.bind` and :meth:`Signature.bind_partial` instead."
msgstr ""

#: ../../library/inspect.rst:962
msgid ""
"Get the mapping of external name references in a Python function or method "
"*func* to their current values. A :term:`named tuple` "
"``ClosureVars(nonlocals, globals, builtins, unbound)`` is returned. "
"*nonlocals* maps referenced names to lexical closure variables, *globals* to"
" the function's module globals and *builtins* to the builtins visible from "
"the function body. *unbound* is the set of names referenced in the function "
"that could not be resolved at all given the current module globals and "
"builtins."
msgstr ""

#: ../../library/inspect.rst:971
msgid ""
":exc:`TypeError` is raised if *func* is not a Python function or method."
msgstr "*func* が Python の関数やメソッドでない場合 :exc:`TypeError` が送出されます。"

#: ../../library/inspect.rst:978
msgid ""
"Get the object wrapped by *func*. It follows the chain of "
":attr:`__wrapped__` attributes returning the last object in the chain."
msgstr ""

#: ../../library/inspect.rst:981
msgid ""
"*stop* is an optional callback accepting an object in the wrapper chain as "
"its sole argument that allows the unwrapping to be terminated early if the "
"callback returns a true value. If the callback never returns a true value, "
"the last object in the chain is returned as usual. For example, "
":func:`signature` uses this to stop unwrapping if any object in the chain "
"has a ``__signature__`` attribute defined."
msgstr ""

#: ../../library/inspect.rst:988
msgid ":exc:`ValueError` is raised if a cycle is encountered."
msgstr ""

#: ../../library/inspect.rst:996
msgid "The interpreter stack"
msgstr "インタープリタスタック"

#: ../../library/inspect.rst:998
msgid ""
"When the following functions return \"frame records,\" each record is a "
":term:`named tuple` ``FrameInfo(frame, filename, lineno, function, "
"code_context, index)``. The tuple contains the frame object, the filename, "
"the line number of the current line, the function name, a list of lines of "
"context from the source code, and the index of the current line within that "
"list."
msgstr ""

#: ../../library/inspect.rst:1006
msgid "Return a named tuple instead of a tuple."
msgstr "タプルではなく名前付きタプルを返します。"

#: ../../library/inspect.rst:1011
msgid ""
"Keeping references to frame objects, as found in the first element of the "
"frame records these functions return, can cause your program to create "
"reference cycles.  Once a reference cycle has been created, the lifespan of "
"all objects which can be accessed from the objects which form the cycle can "
"become much longer even if Python's optional cycle detector is enabled.  If "
"such cycles must be created, it is important to ensure they are explicitly "
"broken to avoid the delayed destruction of objects and increased memory "
"consumption which occurs."
msgstr "フレームレコードの最初の要素などのフレームオブジェクトへの参照を保存すると、循環参照になってしまう場合があります。循環参照ができると、Python の循環参照検出機能を有効にしていたとしても関連するオブジェクトが参照しているすべてのオブジェクトが解放されにくくなり、明示的に参照を削除しないとメモリ消費量が増大する恐れがあります。"

#: ../../library/inspect.rst:1019
msgid ""
"Though the cycle detector will catch these, destruction of the frames (and "
"local variables) can be made deterministic by removing the cycle in a "
":keyword:`finally` clause.  This is also important if the cycle detector was"
" disabled when Python was compiled or using :func:`gc.disable`.  For "
"example::"
msgstr "参照の削除を Python の循環参照検出機能にまかせることもできますが、 :keyword:`finally` 節で循環参照を解除すれば確実にフレーム (とそのローカル変数) は削除されます。また、循環参照検出機能は Python のコンパイルオプションや :func:`gc.disable` で無効とされている場合がありますので注意が必要です。例::"

#: ../../library/inspect.rst:1031
msgid ""
"If you want to keep the frame around (for example to print a traceback "
"later), you can also break reference cycles by using the :meth:`frame.clear`"
" method."
msgstr ""

#: ../../library/inspect.rst:1035
msgid ""
"The optional *context* argument supported by most of these functions "
"specifies the number of lines of context to return, which are centered "
"around the current line."
msgstr "以下の関数でオプション引数 *context* には、戻り値のソース行リストに何行分のソースを含めるかを指定します。ソース行リストには、実行中の行を中心として指定された行数分のリストを返します。"

#: ../../library/inspect.rst:1042
msgid ""
"Get information about a frame or traceback object.  A :term:`named tuple` "
"``Traceback(filename, lineno, function, code_context, index)`` is returned."
msgstr "フレームまたはトレースバックオブジェクトの情報を取得します。 :term:`名前付きタプル <named tuple>` ``Traceback(filename, lineno, function, code_context, index)`` が返されます。"

#: ../../library/inspect.rst:1048
msgid ""
"Get a list of frame records for a frame and all outer frames.  These frames "
"represent the calls that lead to the creation of *frame*. The first entry in"
" the returned list represents *frame*; the last entry represents the "
"outermost call on *frame*'s stack."
msgstr "指定したフレームと、その外側の全フレームのフレームレコードを返します。外側のフレームとは *frame* が生成されるまでのすべての関数呼び出しを示します。戻り値のリストの先頭は *frame* のフレームレコードで、末尾の要素は *frame* のスタックにある最も外側のフレームのフレームレコードとなります。"

#: ../../library/inspect.rst:1053 ../../library/inspect.rst:1066
#: ../../library/inspect.rst:1090 ../../library/inspect.rst:1103
msgid ""
"A list of :term:`named tuples <named tuple>` ``FrameInfo(frame, filename, "
"lineno, function, code_context, index)`` is returned."
msgstr ""

#: ../../library/inspect.rst:1061
msgid ""
"Get a list of frame records for a traceback's frame and all inner frames.  "
"These frames represent calls made as a consequence of *frame*.  The first "
"entry in the list represents *traceback*; the last entry represents where "
"the exception was raised."
msgstr "指定したフレームと、その内側の全フレームのフレームレコードを返します。内のフレームとは *frame* から続く一連の関数呼び出しを示します。戻り値のリストの先頭は *traceback* のフレームレコードで、末尾の要素は例外が発生した位置を示します。"

#: ../../library/inspect.rst:1074
msgid "Return the frame object for the caller's stack frame."
msgstr "呼び出し元のフレームオブジェクトを返します。"

#: ../../library/inspect.rst:1078
msgid ""
"This function relies on Python stack frame support in the interpreter, which"
" isn't guaranteed to exist in all implementations of Python.  If running in "
"an implementation without Python stack frame support this function returns "
"``None``."
msgstr "この関数はインタプリタの Python スタックフレームサポートに依存します。これは Python のすべての実装に存在している保証はありません。Python スタックフレームサポートのない環境では、この関数は ``None`` を返します。"

#: ../../library/inspect.rst:1086
msgid ""
"Return a list of frame records for the caller's stack.  The first entry in "
"the returned list represents the caller; the last entry represents the "
"outermost call on the stack."
msgstr "呼び出し元スタックのフレームレコードのリストを返します。最初の要素は呼び出し元のフレームレコードで、末尾の要素はスタックにある最も外側のフレームのフレームレコードとなります。"

#: ../../library/inspect.rst:1098
msgid ""
"Return a list of frame records for the stack between the current frame and "
"the frame in which an exception currently being handled was raised in.  The "
"first entry in the list represents the caller; the last entry represents "
"where the exception was raised."
msgstr "実行中のフレームと処理中の例外が発生したフレームの間のフレームレコードのリストを返します。最初の要素は呼び出し元のフレームレコードで、末尾の要素は例外が発生した位置を示します。"

#: ../../library/inspect.rst:1110
msgid "Fetching attributes statically"
msgstr "属性の静的なフェッチ"

#: ../../library/inspect.rst:1112
msgid ""
"Both :func:`getattr` and :func:`hasattr` can trigger code execution when "
"fetching or checking for the existence of attributes. Descriptors, like "
"properties, will be invoked and :meth:`__getattr__` and "
":meth:`__getattribute__` may be called."
msgstr ""

#: ../../library/inspect.rst:1117
msgid ""
"For cases where you want passive introspection, like documentation tools, "
"this can be inconvenient. :func:`getattr_static` has the same signature as "
":func:`getattr` but avoids executing code when it fetches attributes."
msgstr ""

#: ../../library/inspect.rst:1123
msgid ""
"Retrieve attributes without triggering dynamic lookup via the descriptor "
"protocol, :meth:`__getattr__` or :meth:`__getattribute__`."
msgstr ""

#: ../../library/inspect.rst:1126
msgid ""
"Note: this function may not be able to retrieve all attributes that getattr "
"can fetch (like dynamically created attributes) and may find attributes that"
" getattr can't (like descriptors that raise AttributeError). It can also "
"return descriptors objects instead of instance members."
msgstr ""

#: ../../library/inspect.rst:1132
msgid ""
"If the instance :attr:`~object.__dict__` is shadowed by another member (for "
"example a property) then this function will be unable to find instance "
"members."
msgstr ""

#: ../../library/inspect.rst:1138
msgid ""
":func:`getattr_static` does not resolve descriptors, for example slot "
"descriptors or getset descriptors on objects implemented in C. The "
"descriptor object is returned instead of the underlying attribute."
msgstr ""

#: ../../library/inspect.rst:1142
msgid ""
"You can handle these with code like the following. Note that for arbitrary "
"getset descriptors invoking these may trigger code execution::"
msgstr ""

#: ../../library/inspect.rst:1168
msgid "Current State of Generators and Coroutines"
msgstr "ジェネレータおよびコルーチンの現在の状態"

#: ../../library/inspect.rst:1170
msgid ""
"When implementing coroutine schedulers and for other advanced uses of "
"generators, it is useful to determine whether a generator is currently "
"executing, is waiting to start or resume or execution, or has already "
"terminated. :func:`getgeneratorstate` allows the current state of a "
"generator to be determined easily."
msgstr ""

#: ../../library/inspect.rst:1178
msgid "Get current state of a generator-iterator."
msgstr "ジェネレータイテレータの現在の状態を取得します。"

#: ../../library/inspect.rst:1184 ../../library/inspect.rst:1199
msgid "Possible states are:"
msgstr "取り得る状態は:"

#: ../../library/inspect.rst:1181
msgid "GEN_CREATED: Waiting to start execution."
msgstr "GEN_CREATED: 実行開始を待機しています。"

#: ../../library/inspect.rst:1182
msgid "GEN_RUNNING: Currently being executed by the interpreter."
msgstr "GEN_RUNNING: インタープリタによって現在実行されています。"

#: ../../library/inspect.rst:1183
msgid "GEN_SUSPENDED: Currently suspended at a yield expression."
msgstr "GEN_SUSPENDED: yield 式で現在サスペンドされています。"

#: ../../library/inspect.rst:1184
msgid "GEN_CLOSED: Execution has completed."
msgstr "GEN_CLOSED: 実行が完了しました。"

#: ../../library/inspect.rst:1190
msgid ""
"Get current state of a coroutine object.  The function is intended to be "
"used with coroutine objects created by :keyword:`async def` functions, but "
"will accept any coroutine-like object that has ``cr_running`` and "
"``cr_frame`` attributes."
msgstr ""

#: ../../library/inspect.rst:1196
msgid "CORO_CREATED: Waiting to start execution."
msgstr "CORO_CREATED: 実行開始を待機しています。"

#: ../../library/inspect.rst:1197
msgid "CORO_RUNNING: Currently being executed by the interpreter."
msgstr "CORO_RUNNING: インタープリタにより現在実行中です。"

#: ../../library/inspect.rst:1198
msgid "CORO_SUSPENDED: Currently suspended at an await expression."
msgstr "CORO_SUSPENDED: await 式により現在停止中です。"

#: ../../library/inspect.rst:1199
msgid "CORO_CLOSED: Execution has completed."
msgstr "CORO_CLOSED: 実行が完了しました。"

#: ../../library/inspect.rst:1203
msgid ""
"The current internal state of the generator can also be queried. This is "
"mostly useful for testing purposes, to ensure that internal state is being "
"updated as expected:"
msgstr "ジェネレータの現在の内部状態を問い合わせることも出来ます。これは主に内部状態が期待通り更新されているかどうかを確認するためのテストの目的に有用です。"

#: ../../library/inspect.rst:1209
msgid ""
"Get the mapping of live local variables in *generator* to their current "
"values.  A dictionary is returned that maps from variable names to values. "
"This is the equivalent of calling :func:`locals` in the body of the "
"generator, and all the same caveats apply."
msgstr ""

#: ../../library/inspect.rst:1214
msgid ""
"If *generator* is a :term:`generator` with no currently associated frame, "
"then an empty dictionary is returned.  :exc:`TypeError` is raised if "
"*generator* is not a Python generator object."
msgstr ""

#: ../../library/inspect.rst:1220
msgid ""
"This function relies on the generator exposing a Python stack frame for "
"introspection, which isn't guaranteed to be the case in all implementations "
"of Python. In such cases, this function will always return an empty "
"dictionary."
msgstr ""

#: ../../library/inspect.rst:1229
msgid ""
"This function is analogous to :func:`~inspect.getgeneratorlocals`, but works"
" for coroutine objects created by :keyword:`async def` functions."
msgstr ""

#: ../../library/inspect.rst:1238
msgid "Command Line Interface"
msgstr "コマンドラインインターフェイス"

#: ../../library/inspect.rst:1240
msgid ""
"The :mod:`inspect` module also provides a basic introspection capability "
"from the command line."
msgstr ""

#: ../../library/inspect.rst:1245
msgid ""
"By default, accepts the name of a module and prints the source of that "
"module. A class or function within the module can be printed instead by "
"appended a colon and the qualified name of the target object."
msgstr ""

#: ../../library/inspect.rst:1251
msgid ""
"Print information about the specified object rather than the source code"
msgstr ""
