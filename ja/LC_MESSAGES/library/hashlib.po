# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# E. Kawashima, 2016
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2016
# Shun Sakurai, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2017-03-04 08:35+0000\n"
"Last-Translator: cocoatomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-35/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/hashlib.rst:2
msgid ":mod:`hashlib` --- Secure hashes and message digests"
msgstr ":mod:`hashlib` --- セキュアハッシュおよびメッセージダイジェスト"

#: ../../library/hashlib.rst:10
msgid "**Source code:** :source:`Lib/hashlib.py`"
msgstr "**ソースコード:** :source:`Lib/hashlib.py`"

#: ../../library/hashlib.rst:23
msgid ""
"This module implements a common interface to many different secure hash and "
"message digest algorithms.  Included are the FIPS secure hash algorithms "
"SHA1, SHA224, SHA256, SHA384, and SHA512 (defined in FIPS 180-2) as well as "
"RSA's MD5 algorithm (defined in Internet :rfc:`1321`).  The terms \"secure "
"hash\" and \"message digest\" are interchangeable.  Older algorithms were "
"called message digests.  The modern term is secure hash."
msgstr "このモジュールは、セキュアハッシュやメッセージダイジェスト用のさまざまなアルゴリズムを実装したものです。FIPSのセキュアなハッシュアルゴリズムである SHA1、SHA224、SHA256、SHA384およびSHA512 (FIPS 180-2 で定義されているもの) だけでなくRSAのMD5アルゴリズム (Internet :rfc:`1321` で定義されています)も実装しています。「セキュアなハッシュ」と「メッセージダイジェスト」はどちらも同じ意味です。古くからあるアルゴリズムは「メッセージダイジェスト」と呼ばれていますが、最近は「セキュアハッシュ」という用語が用いられています。"

#: ../../library/hashlib.rst:32
msgid ""
"If you want the adler32 or crc32 hash functions, they are available in the "
":mod:`zlib` module."
msgstr "adler32 や crc32 ハッシュ関数は :mod:`zlib` モジュールで提供されています。"

#: ../../library/hashlib.rst:37
msgid ""
"Some algorithms have known hash collision weaknesses, refer to the \"See "
"also\" section at the end."
msgstr "幾つかのアルゴリズムはハッシュの衝突に弱いことが知られています。最後の \"参考\" セクションを見てください。"

#: ../../library/hashlib.rst:44
msgid "Hash algorithms"
msgstr "ハッシュアルゴリズム"

#: ../../library/hashlib.rst:46
msgid ""
"There is one constructor method named for each type of :dfn:`hash`.  All "
"return a hash object with the same simple interface. For example: use "
":func:`sha1` to create a SHA1 hash object. You can now feed this object with"
" :term:`bytes-like objects <bytes-like object>` (normally :class:`bytes`) "
"using the :meth:`update` method. At any point you can ask it for the "
":dfn:`digest` of the concatenation of the data fed to it so far using the "
":meth:`digest` or :meth:`hexdigest` methods."
msgstr "各 :dfn:`hash` の名前が付いたコンストラクタがあります。いずれも同一で簡単なインターフェイスのあるハッシュオブジェクトを返します。例えば、SHA1 ハッシュオブジェクトを作るには :func:`sha1` を使います。このオブジェクトには :meth:`update` を用いて :term:`bytes-like オブジェクト <bytes-like object>` (通常 :class:`bytes`) を渡すことができます。:meth:`digest` や :meth:`hexdigest` メソッドを用いて、それまでに渡したデータを連結したものの :dfn:`digest` をいつでも要求することができます。"

#: ../../library/hashlib.rst:56
msgid ""
"For better multithreading performance, the Python :term:`GIL` is released "
"for data larger than 2047 bytes at object creation or on update."
msgstr "マルチスレッドにおける良好なパフォーマンスを得るために、オブジェクトの生成時または更新時に与えるデータが 2047 バイトを超えている場合、Python :term:`GIL` が解放されます。"

#: ../../library/hashlib.rst:61
msgid ""
"Feeding string objects into :meth:`update` is not supported, as hashes work "
"on bytes, not on characters."
msgstr "文字列オブジェクトを :meth:`update` に渡すのはサポートされていません。ハッシュはバイトには機能しますが、文字には機能しないからです。"

#: ../../library/hashlib.rst:66
msgid ""
"Constructors for hash algorithms that are always present in this module are "
":func:`md5`, :func:`sha1`, :func:`sha224`, :func:`sha256`, :func:`sha384`, "
"and :func:`sha512`. Additional algorithms may also be available depending "
"upon the OpenSSL library that Python uses on your platform."
msgstr "このモジュールで常に使用できるハッシュアルゴリズムのコンストラクタは :func:`md5` 、 :func:`sha1` 、 :func:`sha224` 、 :func:`sha256` 、 :func:`sha384` および :func:`sha512` です。それ以外のアルゴリズムが使用できるかどうかは、Python が使用している OpenSSL ライブラリに依存します。"

#: ../../library/hashlib.rst:71
msgid ""
"For example, to obtain the digest of the byte string ``b'Nobody inspects the"
" spammish repetition'``::"
msgstr "たとえば、``b'Nobody inspects the spammish repetition'`` というバイト文字列のダイジェストを取得するには次のようにします::"

#: ../../library/hashlib.rst:85
msgid "More condensed:"
msgstr "もっと簡潔に書くと、このようになります:"

#: ../../library/hashlib.rst:92
msgid ""
"Is a generic constructor that takes the string name of the desired algorithm"
" as its first parameter.  It also exists to allow access to the above listed"
" hashes as well as any other algorithms that your OpenSSL library may offer."
"  The named constructors are much faster than :func:`new` and should be "
"preferred."
msgstr "一般的なコンストラクタで、第一引数にアルゴリズム名を文字列で受け取ります。他にも、上記ハッシュだけでなく OpenSSL ライブラリーが提供するような他のアルゴリズムにアクセスすることができます。名前のあるコンストラクタの方が :func:`new` よりもずっと速いので望ましいです。"

#: ../../library/hashlib.rst:98
msgid "Using :func:`new` with an algorithm provided by OpenSSL:"
msgstr ":func:`new` にOpenSSLのアルゴリズムを指定する例です:"

#: ../../library/hashlib.rst:105
msgid "Hashlib provides the following constant attributes:"
msgstr "Hashlib は以下の定数属性を提供しています:"

#: ../../library/hashlib.rst:109
msgid ""
"A set containing the names of the hash algorithms guaranteed to be supported"
" by this module on all platforms."
msgstr "このモジュールによってすべてのプラットフォームでサポートされていることが保証されるハッシュアルゴリズムの名前を含む集合です。"

#: ../../library/hashlib.rst:116
msgid ""
"A set containing the names of the hash algorithms that are available in the "
"running Python interpreter.  These names will be recognized when passed to "
":func:`new`.  :attr:`algorithms_guaranteed` will always be a subset.  The "
"same algorithm may appear multiple times in this set under different names "
"(thanks to OpenSSL)."
msgstr "実行中の Python インタープリタで利用可能なハッシュアルゴリズム名の set です。これらの名前は :func:`new` に渡すことができます。:attr:`algorithms_guaranteed` は常にサブセットです。この set の中に同じアルゴリズムが違う名前で複数回現れることがあります (OpenSSL 由来)。"

#: ../../library/hashlib.rst:124
msgid ""
"The following values are provided as constant attributes of the hash objects"
" returned by the constructors:"
msgstr "コンストラクタが返すハッシュオブジェクトには、次のような定数属性が用意されています:"

#: ../../library/hashlib.rst:130
msgid "The size of the resulting hash in bytes."
msgstr "生成されたハッシュのバイト数。"

#: ../../library/hashlib.rst:134
msgid "The internal block size of the hash algorithm in bytes."
msgstr "内部で使われるハッシュアルゴリズムのブロックのバイト数。"

#: ../../library/hashlib.rst:136
msgid "A hash object has the following attributes:"
msgstr "ハッシュオブジェクトには次のような属性があります:"

#: ../../library/hashlib.rst:140
msgid ""
"The canonical name of this hash, always lowercase and always suitable as a "
"parameter to :func:`new` to create another hash of this type."
msgstr "このハッシュの正規名です。常に小文字で、:func:`new` の引数として渡してこのタイプの別のハッシュを生成することができます。"

#: ../../library/hashlib.rst:143
msgid ""
"The name attribute has been present in CPython since its inception, but "
"until Python 3.4 was not formally specified, so may not exist on some "
"platforms."
msgstr "name 属性は CPython には最初からありましたが、Python 3.4 までは正式に明記されていませんでした。そのため、プラットフォームによっては存在しないかもしれません。"

#: ../../library/hashlib.rst:148
msgid "A hash object has the following methods:"
msgstr "ハッシュオブジェクトには次のようなメソッドがあります:"

#: ../../library/hashlib.rst:153
msgid ""
"Update the hash object with the object *arg*, which must be interpretable as"
" a buffer of bytes.  Repeated calls are equivalent to a single call with the"
" concatenation of all the arguments: ``m.update(a); m.update(b)`` is "
"equivalent to ``m.update(a+b)``."
msgstr "オブジェクト *arg* でハッシュオブジェクトを更新します。*arg* はバイトのバッファとして解釈可能でなければなりません。繰り返し呼び出すことは引数全ての連結で一回呼び出すことと等価です。例えば ``m.update(a); m.update(b)`` は ``m.update(a+b)`` と等価です。"

#: ../../library/hashlib.rst:158
msgid ""
"The Python GIL is released to allow other threads to run while hash updates "
"on data larger than 2047 bytes is taking place when using hash algorithms "
"supplied by OpenSSL."
msgstr "ハッシュアルゴリズムが OpenSSL によって提供されていて、データが 2047 バイトを超えている場合には、ハッシュの更新が実行中でも他のスレッドが実行できるように、Python :term:`GIL` が解放されます。"

#: ../../library/hashlib.rst:166
msgid ""
"Return the digest of the data passed to the :meth:`update` method so far. "
"This is a bytes object of size :attr:`digest_size` which may contain bytes "
"in the whole range from 0 to 255."
msgstr "これまで :meth:`update` メソッドに渡されたデータのダイジェスト値を返します。これは :attr:`digest_size` と同じ長さの、0 から 255 の範囲全てを含み得るバイトの列です。"

#: ../../library/hashlib.rst:173
msgid ""
"Like :meth:`digest` except the digest is returned as a string object of "
"double length, containing only hexadecimal digits.  This may be used to "
"exchange the value safely in email or other non-binary environments."
msgstr ":meth:`digest` と似ていますが、倍の長さの、16進形式文字列を返します。これは、電子メールなどの非バイナリ環境で値を交換する場合に便利です。"

#: ../../library/hashlib.rst:180
msgid ""
"Return a copy (\"clone\") of the hash object.  This can be used to "
"efficiently compute the digests of data sharing a common initial substring."
msgstr "ハッシュオブジェクトのコピー (\"クローン\") を返します。これは、最初の部分文字列が共通なデータのダイジェストを効率的に計算するために使用します。"

#: ../../library/hashlib.rst:185
msgid "Key derivation"
msgstr "鍵導出"

#: ../../library/hashlib.rst:187
msgid ""
"Key derivation and key stretching algorithms are designed for secure "
"password hashing. Naive algorithms such as ``sha1(password)`` are not "
"resistant against brute-force attacks. A good password hashing function must"
" be tunable, slow, and include a `salt "
"<https://en.wikipedia.org/wiki/Salt_%28cryptography%29>`_."
msgstr "鍵の導出 (derivation) と引き伸ばし (stretching) のアルゴリズムはセキュアなパスワードのハッシュ化のために設計されました。 ``sha1(password)`` のような甘いアルゴリズムは、ブルートフォース攻撃に抵抗できません。良いパスワードハッシュ化は調節可能で、遅くて、 `salt <https://en.wikipedia.org/wiki/Salt_%28cryptography%29>`_ を含まなければなりません。"

#: ../../library/hashlib.rst:195
msgid ""
"The function provides PKCS#5 password-based key derivation function 2. It "
"uses HMAC as pseudorandom function."
msgstr "この関数は PKCS#5 のパスワードに基づいた鍵導出関数 2 を提供しています。疑似乱数関数として HMAC を使用しています。"

#: ../../library/hashlib.rst:198
msgid ""
"The string *hash_name* is the desired name of the hash digest algorithm for "
"HMAC, e.g. 'sha1' or 'sha256'. *password* and *salt* are interpreted as "
"buffers of bytes. Applications and libraries should limit *password* to a "
"sensible length (e.g. 1024). *salt* should be about 16 or more bytes from a "
"proper source, e.g. :func:`os.urandom`."
msgstr "文字列 *hash_name* は、HMAC のハッシュダイジェストアルゴリズムの望ましい名前で、例えば 'sha1' や 'sha256' です。 *password* と *salt* はバイト列のバッファとして解釈されます。アプリケーションとライブラリは、 *password* を適切な長さ (例えば 1024) に制限すべきです。 *salt* は :func:`os.urandom` のような適切なソースからの、およそ 16 バイトかそれ以上のバイト列にするべきです。"

#: ../../library/hashlib.rst:204
msgid ""
"The number of *iterations* should be chosen based on the hash algorithm and "
"computing power. As of 2013, at least 100,000 iterations of SHA-256 are "
"suggested."
msgstr "*iterations* 数はハッシュアルゴリズムと計算機の能力に基づいて決めるべきです。2013 年現在の場合、 SHA-256 に対して最低でも 100,000 反復が推奨されています。"

#: ../../library/hashlib.rst:208
msgid ""
"*dklen* is the length of the derived key. If *dklen* is ``None`` then the "
"digest size of the hash algorithm *hash_name* is used, e.g. 64 for SHA-512."
msgstr "*dklen* は、導出された鍵の長さです。 *dklen* が ``None`` の場合、ハッシュアルゴリズム *hash_name* のダイジェストサイズが使われます。例えば SHA-512 では 64 です。"

#: ../../library/hashlib.rst:220
msgid ""
"A fast implementation of *pbkdf2_hmac* is available with OpenSSL.  The "
"Python implementation uses an inline version of :mod:`hmac`. It is about "
"three times slower and doesn't release the GIL."
msgstr "*pbkdf2_hmac* の高速な実装は OpenSSL 使用版で利用可能です。Python 実装は :mod:`hmac` のインラインバージョンを使います。それはおよそ 3 倍遅く、GIL を解放しません。"

#: ../../library/hashlib.rst:228
msgid "Module :mod:`hmac`"
msgstr ":mod:`hmac` モジュール"

#: ../../library/hashlib.rst:228
msgid "A module to generate message authentication codes using hashes."
msgstr "ハッシュを用いてメッセージ認証コードを生成するモジュールです。"

#: ../../library/hashlib.rst:231
msgid "Module :mod:`base64`"
msgstr ":mod:`base64` モジュール"

#: ../../library/hashlib.rst:231
msgid "Another way to encode binary hashes for non-binary environments."
msgstr "バイナリハッシュを非バイナリ環境用にエンコードするもうひとつの方法です。"

#: ../../library/hashlib.rst:234
msgid "http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf"
msgstr "http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf"

#: ../../library/hashlib.rst:234
msgid "The FIPS 180-2 publication on Secure Hash Algorithms."
msgstr "FIPS 180-2 のセキュアハッシュアルゴリズムについての説明。"

#: ../../library/hashlib.rst:238
msgid ""
"https://en.wikipedia.org/wiki/Cryptographic_hash_function#Cryptographic_hash_algorithms"
msgstr "https://en.wikipedia.org/wiki/Cryptographic_hash_function#Cryptographic_hash_algorithms (日本語版: https://ja.wikipedia.org/wiki/%E6%9A%97%E5%8F%B7%E5%AD%A6%E7%9A%84%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E9%96%A2%E6%95%B0)"

#: ../../library/hashlib.rst:237
msgid ""
"Wikipedia article with information on which algorithms have known issues and"
" what that means regarding their use."
msgstr "どのアルゴリズムにどんな既知の問題があって、それが実際に利用する際にどう影響するかについての Wikipedia の記事。"

#: ../../library/hashlib.rst:240
msgid "https://www.ietf.org/rfc/rfc2898.txt"
msgstr "https://www.ietf.org/rfc/rfc2898.txt"

#: ../../library/hashlib.rst:241
msgid "PKCS #5: Password-Based Cryptography Specification Version 2.0"
msgstr "PKCS #5: Password-Based Cryptography Specification Version 2.0"
