# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# E. Kawashima <e.kawaschima+transifex@gmail.com>, 2016
# tomo <cocoatomo77@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2016-09-14 15:46+0000\n"
"Last-Translator: tomo <cocoatomo77@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc-ja/python-35/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-eventloops.rst:4
msgid "Event loops"
msgstr "イベントループ"

#: ../../library/asyncio-eventloops.rst:7
msgid "Event loop functions"
msgstr "イベントループ関数"

#: ../../library/asyncio-eventloops.rst:9
msgid ""
"The following functions are convenient shortcuts to accessing the methods of"
" the global policy. Note that this provides access to the default policy, "
"unless an alternative policy was set by calling "
":func:`set_event_loop_policy` earlier in the execution of the process."
msgstr "以下の関数は、グローバルポリシーのメソッドにアクセスするための便利なショートカットです。これらはデフォルトポリシーへのアクセス手段を提供するものであり、プロセスの実行前に :func:`set_event_loop_policy` を呼び出して設定された代替ポリシーには適用できないことに注意してください。"

#: ../../library/asyncio-eventloops.rst:16
msgid "Equivalent to calling ``get_event_loop_policy().get_event_loop()``."
msgstr "``get_event_loop_policy().get_event_loop()`` の呼び出しと等価です。"

#: ../../library/asyncio-eventloops.rst:20
msgid ""
"Equivalent to calling ``get_event_loop_policy().set_event_loop(loop)``."
msgstr "``get_event_loop_policy().set_event_loop(loop)`` の呼び出しと等価です。"

#: ../../library/asyncio-eventloops.rst:24
msgid "Equivalent to calling ``get_event_loop_policy().new_event_loop()``."
msgstr "``get_event_loop_policy().new_event_loop()`` の呼び出しと等価です。"

#: ../../library/asyncio-eventloops.rst:30
msgid "Available event loops"
msgstr "利用可能なイベントループ"

#: ../../library/asyncio-eventloops.rst:32
msgid ""
"asyncio currently provides two implementations of event loops: "
":class:`SelectorEventLoop` and :class:`ProactorEventLoop`."
msgstr "asyncio は現在 2 種類の実装のイベントループ、:class:`SelectorEventLoop` と :class:`ProactorEventLoop` を提供しています。"

#: ../../library/asyncio-eventloops.rst:37
msgid ""
"Event loop based on the :mod:`selectors` module. Subclass of "
":class:`AbstractEventLoop`."
msgstr ":mod:`selectors` モジュールベースのイベントループで、:class:`AbstractEventLoop` のサブクラスです。"

#: ../../library/asyncio-eventloops.rst:40
msgid "Use the most efficient selector available on the platform."
msgstr "プラットフォームで利用できる最も効率的なセレクターを使用します。"

#: ../../library/asyncio-eventloops.rst:42
msgid ""
"On Windows, only sockets are supported (ex: pipes are not supported): see "
"the `MSDN documentation of select <https://msdn.microsoft.com/en-"
"us/library/windows/desktop/ms740141%28v=vs.85%29.aspx>`_."
msgstr "Windows ではソケットのみサポートされています (例えばパイプは未サポート): `MSDN の select のドキュメント <https://msdn.microsoft.com/en-us/library/windows/desktop/ms740141%28v=vs.85%29.aspx>`_ を参照してください。"

#: ../../library/asyncio-eventloops.rst:48
msgid ""
"Proactor event loop for Windows using \"I/O Completion Ports\" aka IOCP. "
"Subclass of :class:`AbstractEventLoop`."
msgstr "\"I/O Completion Ports\" (IOCP) を使用した Windows 用のプロアクターイベントループで、:class:`AbstractEventLoop` のサブクラスです。"

#: ../../library/asyncio-eventloops.rst:51
msgid "Availability: Windows."
msgstr "利用出来る環境 : Windows."

#: ../../library/asyncio-eventloops.rst:55
msgid ""
"`MSDN documentation on I/O Completion Ports <https://msdn.microsoft.com/en-"
"us/library/windows/desktop/aa365198%28v=vs.85%29.aspx>`_."
msgstr "`MSDN の I/O Completion Ports のドキュメント <https://msdn.microsoft.com/en-us/library/windows/desktop/aa365198%28v=vs.85%29.aspx>`_。"

#: ../../library/asyncio-eventloops.rst:58
msgid "Example to use a :class:`ProactorEventLoop` on Windows::"
msgstr "Windows で :class:`ProactorEventLoop` を使用した例::"

#: ../../library/asyncio-eventloops.rst:69
msgid "Platform support"
msgstr "プラットフォームでのサポート"

#: ../../library/asyncio-eventloops.rst:71
msgid ""
"The :mod:`asyncio` module has been designed to be portable, but each "
"platform still has subtle differences and may not support all :mod:`asyncio`"
" features."
msgstr ":mod:`asyncio` モジュールは移植性を考慮して設計されていますが、プラットフォームごとにわずかな違いがあり、:mod:`asyncio` の全機能をサポートしているわけではありません。"

#: ../../library/asyncio-eventloops.rst:75
msgid "Windows"
msgstr "Windows"

#: ../../library/asyncio-eventloops.rst:77
msgid "Common limits of Windows event loops:"
msgstr "Windows のイベントループでの共通の制限:"

#: ../../library/asyncio-eventloops.rst:79
msgid ""
":meth:`~AbstractEventLoop.create_unix_connection` and "
":meth:`~AbstractEventLoop.create_unix_server` are not supported: the socket "
"family :data:`socket.AF_UNIX` is specific to UNIX"
msgstr ":meth:`~AbstractEventLoop.create_unix_connection` および :meth:`~AbstractEventLoop.create_unix_server` はサポートされていません: ソケットファミリー :data:`socket.AF_UNIX` は UNIX 固有です"

#: ../../library/asyncio-eventloops.rst:82
msgid ""
":meth:`~AbstractEventLoop.add_signal_handler` and "
":meth:`~AbstractEventLoop.remove_signal_handler` are not supported"
msgstr ":meth:`~AbstractEventLoop.add_signal_handler` と :meth:`~AbstractEventLoop.remove_signal_handler` はサポートされていません"

#: ../../library/asyncio-eventloops.rst:84
msgid ""
":meth:`EventLoopPolicy.set_child_watcher` is not supported. "
":class:`ProactorEventLoop` supports subprocesses. It has only one "
"implementation to watch child processes, there is no need to configure it."
msgstr ":meth:`EventLoopPolicy.set_child_watcher` は未サポート: :class:`ProactorEventLoop` はサブプロセスをサポートします。これは子プロセスを監視できる唯一の実装で、構成設定を必要としません。"

#: ../../library/asyncio-eventloops.rst:88
msgid ":class:`SelectorEventLoop` specific limits:"
msgstr ":class:`SelectorEventLoop` 固有の制限:"

#: ../../library/asyncio-eventloops.rst:90
msgid ""
":class:`~selectors.SelectSelector` is used which only supports sockets and "
"is limited to 512 sockets."
msgstr ":class:`~selectors.SelectSelector` が使用されるがサポートしているのはソケットのみで 512 ソケットに制限される"

#: ../../library/asyncio-eventloops.rst:92
msgid ""
":meth:`~AbstractEventLoop.add_reader` and "
":meth:`~AbstractEventLoop.add_writer` only accept file descriptors of "
"sockets"
msgstr ":meth:`~AbstractEventLoop.add_reader` および :meth:`~AbstractEventLoop.add_writer` はソケットのファイル記述子受け取るだけです"

#: ../../library/asyncio-eventloops.rst:94
msgid ""
"Pipes are not supported (ex: :meth:`~AbstractEventLoop.connect_read_pipe`, "
":meth:`~AbstractEventLoop.connect_write_pipe`)"
msgstr "パイプは未サポート (例: :meth:`~AbstractEventLoop.connect_read_pipe`, :meth:`~AbstractEventLoop.connect_write_pipe`)"

#: ../../library/asyncio-eventloops.rst:97
msgid ""
":ref:`Subprocesses <asyncio-subprocess>` are not supported (ex: "
":meth:`~AbstractEventLoop.subprocess_exec`, "
":meth:`~AbstractEventLoop.subprocess_shell`)"
msgstr ":ref:`サブプロセス <asyncio-subprocess>` は未サポート (例: :meth:`~AbstractEventLoop.subprocess_exec`, :meth:`~AbstractEventLoop.subprocess_shell`)"

#: ../../library/asyncio-eventloops.rst:101
msgid ":class:`ProactorEventLoop` specific limits:"
msgstr ":class:`ProactorEventLoop` 固有の制限:"

#: ../../library/asyncio-eventloops.rst:103
msgid ""
":meth:`~AbstractEventLoop.create_datagram_endpoint` (UDP) is not supported"
msgstr ":meth:`~AbstractEventLoop.create_datagram_endpoint` (UDP) は未サポート"

#: ../../library/asyncio-eventloops.rst:104
msgid ""
":meth:`~AbstractEventLoop.add_reader` and "
":meth:`~AbstractEventLoop.add_writer` are not supported"
msgstr ":meth:`~AbstractEventLoop.add_reader` および :meth:`~AbstractEventLoop.add_writer` は未サポート"

#: ../../library/asyncio-eventloops.rst:107
msgid ""
"The resolution of the monotonic clock on Windows is usually around 15.6 "
"msec. The best resolution is 0.5 msec. The resolution depends on the "
"hardware (availability of `HPET "
"<https://en.wikipedia.org/wiki/High_Precision_Event_Timer>`_) and on the "
"Windows configuration. See :ref:`asyncio delayed calls <asyncio-delayed-"
"calls>`."
msgstr "Windows のモノトニック時計の時間分解能は、通常約 15.6 秒です。\n最高分解能は 0.5 秒です。\n分解能はハードウェア (`HPET <http://ja.wikipedia.org/wiki/High_Precision_Event_Timer>`_ の可否) および Windows の設定に依存します。\n:ref:`asyncio 遅延呼び出し <asyncio-delayed-calls>` を参照してください。"

#: ../../library/asyncio-eventloops.rst:115
msgid ":class:`ProactorEventLoop` now supports SSL."
msgstr ":class:`ProactorEventLoop` は SSL をサポートしました。"

#: ../../library/asyncio-eventloops.rst:119
msgid "Mac OS X"
msgstr "Mac OS X"

#: ../../library/asyncio-eventloops.rst:121
msgid ""
"Character devices like PTY are only well supported since Mavericks (Mac OS "
"10.9). They are not supported at all on Mac OS 10.5 and older."
msgstr "PTY のようなキャラクターデバイスは Mavericks (Mac OS 10.9) 以降でのみ十分サポートされています。Mac OS 10.5 以前ではサポートされていません。"

#: ../../library/asyncio-eventloops.rst:124
msgid ""
"On Mac OS 10.6, 10.7 and 10.8, the default event loop is "
":class:`SelectorEventLoop` which uses :class:`selectors.KqueueSelector`. "
":class:`selectors.KqueueSelector` does not support character devices on "
"these versions.  The :class:`SelectorEventLoop` can be used with "
":class:`~selectors.SelectSelector` or :class:`~selectors.PollSelector` to "
"support character devices on these versions of Mac OS X. Example::"
msgstr "Mac OS 10.6、10.7 および 10.8 では、デフォルトのイベントループは :class:`SelectorEventLoop` で、:class:`selectors.KqueueSelector` を使用します。:class:`selectors.KqueueSelector` はこれらのバージョンではキャラクターデバイスをサポートしていません。これらのバージョンでキャラクターデバイスをサポートするには :class:`SelectorEventLoop` で :class:`~selectors.SelectSelector` または :class:`~selectors.PollSelector` を使用します。例::"

#: ../../library/asyncio-eventloops.rst:140
msgid "Event loop policies and the default policy"
msgstr "イベントループのポリシーとデフォルトポリシー"

#: ../../library/asyncio-eventloops.rst:142
msgid ""
"Event loop management is abstracted with a *policy* pattern, to provide "
"maximal flexibility for custom platforms and frameworks. Throughout the "
"execution of a process, a single global policy object manages the event "
"loops available to the process based on the calling context. A policy is an "
"object implementing the :class:`AbstractEventLoopPolicy` interface."
msgstr "イベントループの管理は、カスタムプラットフォームやフレームワークのために最大限の柔軟性を提供するため *ポリシー* パターンによって抽象化されます。プロセスの実行中、単一のポリシーオブジェクトが、コンテキスト呼び出しベースのプロセスから利用可能なイベントループを管理します。一つのポリシーは一つの :class:`AbstractEventLoopPolicy` インターフェースを実装するオブジェクトです。"

#: ../../library/asyncio-eventloops.rst:148
msgid ""
"For most users of :mod:`asyncio`, policies never have to be dealt with "
"explicitly, since the default global policy is sufficient."
msgstr "ほとんどの :mod:`asyncio` 利用者にとってデフォルトのグローバルポリシーで十分であるため、ポリシーを明示的に追加する必要はありません。"

#: ../../library/asyncio-eventloops.rst:151
msgid ""
"The default policy defines context as the current thread, and manages an "
"event loop per thread that interacts with :mod:`asyncio`. The module-level "
"functions :func:`get_event_loop` and :func:`set_event_loop` provide "
"convenient access to event loops managed by the default policy."
msgstr "デフォルトポリシーは現在のスレッドをコンテキストとして定義し、:mod:`asyncio` と情報のやり取りを行うスレッドごとにイベントループを管理します。モジュールレベル関数 :func:`get_event_loop` および :func:`set_event_loop` は、デフォルトポリシーによって管理されるイベントループへの便利なアクセス手段を提供します。"

#: ../../library/asyncio-eventloops.rst:158
msgid "Event loop policy interface"
msgstr "イベントループポリシーインターフェース"

#: ../../library/asyncio-eventloops.rst:160
msgid "An event loop policy must implement the following interface:"
msgstr "イベントループのポリシーは以下のインターフェースを実装しなければなりません:"

#: ../../library/asyncio-eventloops.rst:164
msgid "Event loop policy."
msgstr "イベントループポリシーです。"

#: ../../library/asyncio-eventloops.rst:168
msgid "Get the event loop for the current context."
msgstr "現在のコンテクストのイベントループを取得します。"

#: ../../library/asyncio-eventloops.rst:170
msgid ""
"Returns an event loop object implementing the :class:`AbstractEventLoop` "
"interface."
msgstr ":class:`AbstractEventLoop` インターフェイスを実装したイベントループオブジェクトを返します。"

#: ../../library/asyncio-eventloops.rst:173
msgid ""
"Raises an exception in case no event loop has been set for the current "
"context and the current policy does not specify to create one. It must never"
" return ``None``."
msgstr "現在のコンテキストに設定されているイベントループが存在しない場合やイベントループを作成するためのポリシーが指定されていない場合には例外を送出します。\n``None`` を返すことがあってはなりません。"

#: ../../library/asyncio-eventloops.rst:179
msgid "Set the event loop for the current context to *loop*."
msgstr "現在のコンテキストにイベントループ *loop* を設定します。"

#: ../../library/asyncio-eventloops.rst:183
msgid ""
"Create and return a new event loop object according to this policy's rules."
msgstr "このポリシーのルールに従った新しいイベントループを作成して返します。"

#: ../../library/asyncio-eventloops.rst:186
msgid ""
"If there's need to set this loop as the event loop for the current context, "
":meth:`set_event_loop` must be called explicitly."
msgstr "このループを現在のコンテキストのイベントループとして設定する必要がある場合は、:meth:`set_event_loop` が明示的に呼び出されなくてはなりません。"

#: ../../library/asyncio-eventloops.rst:191
msgid "Access to the global loop policy"
msgstr "グローバルループポリシーへのアクセス"

#: ../../library/asyncio-eventloops.rst:195
msgid "Get the current event loop policy."
msgstr "現在のイベントループポリシーを取得します。"

#: ../../library/asyncio-eventloops.rst:199
msgid ""
"Set the current event loop policy. If *policy* is ``None``, the default "
"policy is restored."
msgstr "現在のイベントループポリシーを設定します。*policy* が ``None`` の場合、デフォルトポリシーが復元されます。"
