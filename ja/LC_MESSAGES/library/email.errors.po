# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# E. Kawashima, 2016
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2016-12-10 07:43+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-35/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.errors.rst:2
msgid ":mod:`email.errors`: Exception and Defect classes"
msgstr ":mod:`email.errors`: 例外及び欠陥クラス"

#: ../../library/email.errors.rst:7
msgid "**Source code:** :source:`Lib/email/errors.py`"
msgstr "**ソースコード:** :source:`Lib/email/errors.py`"

#: ../../library/email.errors.rst:11
msgid ""
"The following exception classes are defined in the :mod:`email.errors` "
"module:"
msgstr ":mod:`email.errors` モジュールでは、以下の例外クラスが定義されています:"

#: ../../library/email.errors.rst:16
msgid ""
"This is the base class for all exceptions that the :mod:`email` package can "
"raise.  It is derived from the standard :exc:`Exception` class and defines "
"no additional methods."
msgstr "これは :mod:`email` パッケージが送出しうるすべての例外の基底クラスです。これは標準の :exc:`Exception` クラスから派生しており、追加のメソッドは定義されていません。"

#: ../../library/email.errors.rst:23
msgid ""
"This is the base class for exceptions raised by the "
":class:`~email.parser.Parser` class.  It is derived from "
":exc:`MessageError`."
msgstr "これは :class:`~email.parser.Parser` クラスが送出しうる例外の基底クラスです。 :exc:`MessageError` から派生しています。"

#: ../../library/email.errors.rst:29 ../../library/email.errors.rst:42
msgid ""
"Raised under some error conditions when parsing the :rfc:`2822` headers of a"
" message, this class is derived from :exc:`MessageParseError`. It can be "
"raised from the :meth:`Parser.parse <email.parser.Parser.parse>` or "
":meth:`Parser.parsestr <email.parser.Parser.parsestr>` methods."
msgstr "メッセージの :rfc:`2822` ヘッダを解析しているときのエラー条件で送出されます。これは :exc:`MessageParseError` から派生しています。:meth:`Parser.parse <email.parser.Parser.parse>` メソッドや :meth:`Parser.parsestr <email.parser.Parser.parsestr>` メソッドが送出しえます。"

#: ../../library/email.errors.rst:34
msgid ""
"Situations where it can be raised include finding an envelope header after "
"the first :rfc:`2822` header of the message, finding a continuation line "
"before the first :rfc:`2822` header is found, or finding a line in the "
"headers which is neither a header or a continuation line."
msgstr "この例外が送出されるのはメッセージの最初の :rfc:`2822` ヘッダの後にエンベロープヘッダが見つかった場合、最初の :rfc:`2822` ヘッダの前に継続行が見つかった場合、ヘッダ内にヘッダでも継続行でもない行が見つかった場合などです。"

#: ../../library/email.errors.rst:47
msgid ""
"Situations where it can be raised include not being able to find the "
"starting or terminating boundary in a :mimetype:`multipart/\\*` message when"
" strict parsing is used."
msgstr "この例外が送出されるのは、厳格なパース時に :mimetype:`multipart/\\*` メッセージ内に\n開始あるいは終了境界が見付けられなかった場合も含みます。"

#: ../../library/email.errors.rst:54
msgid ""
"Raised when a payload is added to a :class:`~email.message.Message` object "
"using :meth:`add_payload`, but the payload is already a scalar and the "
"message's :mailheader:`Content-Type` main type is not either "
":mimetype:`multipart` or missing.  :exc:`MultipartConversionError` multiply "
"inherits from :exc:`MessageError` and the built-in :exc:`TypeError`."
msgstr "この例外は、 :class:`~email.message.Message` オブジェクトに :meth:`add_payload` メソッドでペイロードを追加したが、そのペイロードがすでにスカラー値で、メッセージの :mailheader:`Content-Type` メインタイプが :mimetype:`multipart` でないか見付からない場合に送出されます。\n:exc:`MultipartConversionError` は :exc:`MessageError` と組み込みの :exc:`TypeError` を多重継承しています。"

#: ../../library/email.errors.rst:60
msgid ""
"Since :meth:`Message.add_payload` is deprecated, this exception is rarely "
"raised in practice.  However the exception may also be raised if the "
":meth:`~email.message.Message.attach` method is called on an instance of a "
"class derived from :class:`~email.mime.nonmultipart.MIMENonMultipart` (e.g. "
":class:`~email.mime.image.MIMEImage`)."
msgstr ":meth:`Message.add_payload` は非推奨なので、実際のところこの例外が送出されることはほとんどありません。\nしかしながら、 :meth:`~email.message.Message.attach` メソッドを :class:`~email.mime.nonmultipart.MIMENonMultipart` から派生したインスタンス (たとえば :class:`~email.mime.image.MIMEImage`) に対して呼んだ場合にも送出されることがあります。"

#: ../../library/email.errors.rst:67
msgid ""
"Here's the list of the defects that the :class:`~email.parser.FeedParser` "
"can find while parsing messages.  Note that the defects are added to the "
"message where the problem was found, so for example, if a message nested "
"inside a :mimetype:`multipart/alternative` had a malformed header, that "
"nested message object would have a defect, but the containing messages would"
" not."
msgstr "以下は :class:`~email.parser.FeedParser` がメッセージの解析中に検出する欠陥 (defect) の一覧です。\n問題があった場合、欠陥はメッセージに追加されることに注意してください。\n例えば :mimetype:`multipart/alternative` 内で入れ子になったメッセージに不正な形式のヘッダがあった場合、その入れ子になったメッセージオブジェクトには欠陥がありますが、親メッセージはそうではありません。"

#: ../../library/email.errors.rst:73
msgid ""
"All defect classes are subclassed from :class:`email.errors.MessageDefect`, "
"but this class is *not* an exception!"
msgstr "すべての欠陥クラスは :class:`email.errors.MessageDefect` のサブクラスですが、例外では *ありません*。"

#: ../../library/email.errors.rst:76
msgid ""
":class:`NoBoundaryInMultipartDefect` -- A message claimed to be a multipart,"
" but had no :mimetype:`boundary` parameter."
msgstr ":class:`NoBoundaryInMultipartDefect` -- メッセージが multipart だと宣言されているのに、 :mimetype:`boundary` パラメータがありません。"

#: ../../library/email.errors.rst:79
msgid ""
":class:`StartBoundaryNotFoundDefect` -- The start boundary claimed in the "
":mailheader:`Content-Type` header was never found."
msgstr ":class:`StartBoundaryNotFoundDefect` -- :mailheader:`Content-Type` ヘッダで宣言された開始境界がありません。"

#: ../../library/email.errors.rst:82
msgid ""
":class:`CloseBoundaryNotFoundDefect` -- A start boundary was found, but no "
"corresponding close boundary was ever found."
msgstr ":class:`CloseBoundaryNotFoundDefect` -- 開始境界はあるが対応する終了境界がありません。"

#: ../../library/email.errors.rst:87
msgid ""
":class:`FirstHeaderLineIsContinuationDefect` -- The message had a "
"continuation line as its first header line."
msgstr ":class:`FirstHeaderLineIsContinuationDefect` -- メッセージの最初のヘッダ行が継続行です。"

#: ../../library/email.errors.rst:90
msgid ""
":class:`MisplacedEnvelopeHeaderDefect` - A \"Unix From\" header was found in"
" the middle of a header block."
msgstr ":class:`MisplacedEnvelopeHeaderDefect` -- ヘッダブロックの途中に \"Unix From\" ヘッダがあります。"

#: ../../library/email.errors.rst:93
msgid ""
":class:`MissingHeaderBodySeparatorDefect` - A line was found while parsing "
"headers that had no leading white space but contained no ':'.  Parsing "
"continues assuming that the line represents the first line of the body."
msgstr ":class:`MissingHeaderBodySeparatorDefect` - 先頭に空白はないが ':' がないヘッダの解析中に行が見付かりました。その行を本体の最初の行とみなして解析を続けます。"

#: ../../library/email.errors.rst:99
msgid ""
":class:`MalformedHeaderDefect` -- A header was found that was missing a "
"colon, or was otherwise malformed."
msgstr ":class:`MalformedHeaderDefect` -- ヘッダにコロンがありません、あるいはそれ以外の不正な形式です。"

#: ../../library/email.errors.rst:102
msgid "This defect has not been used for several Python versions."
msgstr "この欠陥が使われていないPythonバージョンがいくつかあります。"

#: ../../library/email.errors.rst:105
msgid ""
":class:`MultipartInvariantViolationDefect` -- A message claimed to be a "
":mimetype:`multipart`, but no subparts were found.  Note that when a message"
" has this defect, its :meth:`~email.message.Message.is_multipart` method may"
" return false even though its content type claims to be "
":mimetype:`multipart`."
msgstr ":class:`MultipartInvariantViolationDefect` -- メッセージが :mimetype:`multipart` だと宣言されているのに、サブパートが存在しません。\nメッセージがこの欠陥を持つ場合、内容の型が :mimetype:`multipart` と宣言されていても :meth:`~email.message.Message.is_multipart` メソッドは偽を返すことがあるので注意してください。"

#: ../../library/email.errors.rst:110
msgid ""
":class:`InvalidBase64PaddingDefect` -- When decoding a block of base64 "
"enocded bytes, the padding was not correct.  Enough padding is added to "
"perform the decode, but the resulting decoded bytes may be invalid."
msgstr ":class:`InvalidBase64PaddingDefect` -- 一連の base64 でエンコードされた bytes をデコードしているときにパディングが誤っていました。\nデコードするのに十分なパディングがなされますが、デコードされた bytes は不正かもしれません。"

#: ../../library/email.errors.rst:114
msgid ""
":class:`InvalidBase64CharactersDefect` -- When decoding a block of base64 "
"enocded bytes, characters outside the base64 alphebet were encountered. The "
"characters are ignored, but the resulting decoded bytes may be invalid."
msgstr ":class:`InvalidBase64CharactersDefect` -- 一連の base64 でエンコードされた bytes をデコードしているときに base64 アルファベット外の文字がありました。\nその文字は無視されますが、デコードされた bytes は不正かもしれません。"
