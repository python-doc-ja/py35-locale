# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# E. Kawashima <e.kawaschima+transifex@gmail.com>, 2016
# Shun Sakurai, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2016-08-28 04:56+0000\n"
"Last-Translator: E. Kawashima <e.kawaschima+transifex@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc-ja/python-35/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/readline.rst:2
msgid ":mod:`readline` --- GNU readline interface"
msgstr ":mod:`readline` --- GNU readline のインタフェース"

#: ../../library/readline.rst:12
msgid ""
"The :mod:`readline` module defines a number of functions to facilitate "
"completion and reading/writing of history files from the Python interpreter."
" This module can be used directly, or via the :mod:`rlcompleter` module, "
"which supports completion of Python identifiers at the interactive prompt.  "
"Settings made using  this module affect the behaviour of both the "
"interpreter's interactive prompt  and the prompts offered by the built-in "
":func:`input` function."
msgstr ":mod:`readline` モジュールでは、補完や Python インタプリタからの履歴ファイルの読み書きを容易にするための多くの関数を定義しています。\nこのモジュールは直接、または :mod:`rlcompleter` モジュールを介して使うことができます。\n:mod:`rlcompleter` モジュールは対話的プロンプトで Python 識別子の補完をサポートするものです。\nこのモジュールで利用される設定は、インタプリタの対話プロンプトならびに組み込みの :func:`input` 関数の両方の挙動に影響します。"

#: ../../library/readline.rst:22
msgid ""
"The underlying Readline library API may be implemented by the ``libedit`` "
"library instead of GNU readline. On MacOS X the :mod:`readline` module "
"detects which library is being used at run time."
msgstr "下層の Readline ライブラリー API は GNU readline ではなく ``libedit`` ライブラリーで実装される可能性があります。\nMacOS X では :mod:`readline` モジュールはどのライブラリーが使われているかを実行時に検出します。"

#: ../../library/readline.rst:27
msgid ""
"The configuration file for ``libedit`` is different from that of GNU "
"readline. If you programmatically load configuration strings you can check "
"for the text \"libedit\" in :const:`readline.__doc__` to differentiate "
"between GNU readline and libedit."
msgstr "``libedit`` の設定ファイルは GNU readline のものとは異なります。もし設定文字列をプログラムからロードしているなら、 GNU readline と libedit を区別するために \"libedit\" という文字列が :const:`readline.__doc__` に含まれているかどうかチェックしてください。"

#: ../../library/readline.rst:32
msgid ""
"Readline keybindings may be configured via an initialization file, typically"
" ``.inputrc`` in your home directory.  See `Readline Init File "
"<https://cnswww.cns.cwru.edu/php/chet/readline/rluserman.html#SEC9>`_ in the"
" GNU Readline manual for information about the format and allowable "
"constructs of that file, and the capabilities of the Readline library in "
"general."
msgstr ""

#: ../../library/readline.rst:41
msgid "Init file"
msgstr "初期化ファイル"

#: ../../library/readline.rst:43
msgid ""
"The following functions relate to the init file and user configuration:"
msgstr "以下の関数は初期化ファイルならびにユーザ設定関連のものです:"

#: ../../library/readline.rst:48
msgid ""
"Execute the init line provided in the *string* argument. This calls "
":c:func:`rl_parse_and_bind` in the underlying library."
msgstr ""

#: ../../library/readline.rst:54
msgid ""
"Execute a readline initialization file. The default filename is the last "
"filename used. This calls :c:func:`rl_read_init_file` in the underlying "
"library."
msgstr ""

#: ../../library/readline.rst:59
msgid "Line buffer"
msgstr "行バッファ"

#: ../../library/readline.rst:61
msgid "The following functions operate on the line buffer:"
msgstr "以下の関数は行バッファを操作します:"

#: ../../library/readline.rst:66
msgid ""
"Return the current contents of the line buffer (:c:data:`rl_line_buffer` in "
"the underlying library)."
msgstr ""

#: ../../library/readline.rst:72
msgid ""
"Insert text into the line buffer at the cursor position.  This calls "
":c:func:`rl_insert_text` in the underlying library, but ignores the return "
"value."
msgstr ""

#: ../../library/readline.rst:79
msgid ""
"Change what's displayed on the screen to reflect the current contents of the"
" line buffer.  This calls :c:func:`rl_redisplay` in the underlying library."
msgstr ""

#: ../../library/readline.rst:84
msgid "History file"
msgstr "履歴ファイル"

#: ../../library/readline.rst:86
msgid "The following functions operate on a history file:"
msgstr "以下の関数は履歴ファイルを操作します:"

#: ../../library/readline.rst:91
msgid ""
"Load a readline history file, and append it to the history list. The default"
" filename is :file:`~/.history`.  This calls :c:func:`read_history` in the "
"underlying library."
msgstr ""

#: ../../library/readline.rst:98
msgid ""
"Save the history list to a readline history file, overwriting any existing "
"file.  The default filename is :file:`~/.history`.  This calls "
":c:func:`write_history` in the underlying library."
msgstr ""

#: ../../library/readline.rst:105
msgid ""
"Append the last *nelements* items of history to a file.  The default "
"filename is :file:`~/.history`.  The file must already exist.  This calls "
":c:func:`append_history` in the underlying library.  This function only "
"exists if Python was compiled for a version of the library that supports it."
msgstr ""

#: ../../library/readline.rst:117
msgid ""
"Set or return the desired number of lines to save in the history file. The "
":func:`write_history_file` function uses this value to truncate the history "
"file, by calling :c:func:`history_truncate_file` in the underlying library."
"  Negative values imply unlimited history file size."
msgstr ""

#: ../../library/readline.rst:125
msgid "History list"
msgstr "履歴リスト"

#: ../../library/readline.rst:127
msgid "The following functions operate on a global history list:"
msgstr "以下の関数はグローバルな履歴リストを操作します:"

#: ../../library/readline.rst:132
msgid ""
"Clear the current history.  This calls :c:func:`clear_history` in the "
"underlying library.  The Python function only exists if Python was compiled "
"for a version of the library that supports it."
msgstr ""

#: ../../library/readline.rst:139
msgid ""
"Return the number of items currently in the history.  (This is different "
"from :func:`get_history_length`, which returns the maximum number of lines "
"that will be written to a history file.)"
msgstr ""

#: ../../library/readline.rst:146
msgid ""
"Return the current contents of history item at *index*.  The item index is "
"one-based.  This calls :c:func:`history_get` in the underlying library."
msgstr ""

#: ../../library/readline.rst:152
msgid ""
"Remove history item specified by its position from the history. The position"
" is zero-based.  This calls :c:func:`remove_history` in the underlying "
"library."
msgstr ""

#: ../../library/readline.rst:159
msgid ""
"Replace history item specified by its position with *line*. The position is "
"zero-based.  This calls :c:func:`replace_history_entry` in the underlying "
"library."
msgstr ""

#: ../../library/readline.rst:166
msgid ""
"Append *line* to the history buffer, as if it was the last line typed. This "
"calls :c:func:`add_history` in the underlying library."
msgstr ""

#: ../../library/readline.rst:171
msgid "Startup hooks"
msgstr "開始フック"

#: ../../library/readline.rst:176
msgid ""
"Set or remove the function invoked by the :c:data:`rl_startup_hook` callback"
" of the underlying library.  If *function* is specified, it will be used as "
"the new hook function; if omitted or ``None``, any function already "
"installed is removed.  The hook is called with no arguments just before "
"readline prints the first prompt."
msgstr ""

#: ../../library/readline.rst:185
msgid ""
"Set or remove the function invoked by the :c:data:`rl_pre_input_hook` "
"callback of the underlying library.  If *function* is specified, it will be "
"used as the new hook function; if omitted or ``None``, any function already "
"installed is removed.  The hook is called with no arguments after the first "
"prompt has been printed and just before readline starts reading input "
"characters.  This function only exists if Python was compiled for a version "
"of the library that supports it."
msgstr ""

#: ../../library/readline.rst:195
msgid "Completion"
msgstr "補完"

#: ../../library/readline.rst:197
msgid ""
"The following functions relate to implementing a custom word completion "
"function.  This is typically operated by the Tab key, and can suggest and "
"automatically complete a word being typed.  By default, Readline is set up "
"to be used by :mod:`rlcompleter` to complete Python identifiers for the "
"interactive interpreter.  If the :mod:`readline` module is to be used with a"
" custom completer, a different set of word delimiters should be set."
msgstr ""

#: ../../library/readline.rst:207
msgid ""
"Set or remove the completer function.  If *function* is specified, it will "
"be used as the new completer function; if omitted or ``None``, any completer"
" function already installed is removed.  The completer function is called as"
" ``function(text, state)``, for *state* in ``0``, ``1``, ``2``, ..., until "
"it returns a non-string value.  It should return the next possible "
"completion starting with *text*."
msgstr "completer 関数を設定または削除します。*function* が指定された場合、新たな completer 関数として用いられます;  省略された場合や ``None`` の場合、現在インストールされている completer 関数は削除されます。completer 関数は ``function(text, state)`` の形式で、関数が文字列でない値を返すまで *state* を ``0``, ``1``, ``2``, ..., にして呼び出します。この関数は *text* から始まる補完結果として次に来そうなものを返さなければなりません。"

#: ../../library/readline.rst:214
msgid ""
"The installed completer function is invoked by the *entry_func* callback "
"passed to :c:func:`rl_completion_matches` in the underlying library. The "
"*text* string comes from the first parameter to the "
":c:data:`rl_attempted_completion_function` callback of the underlying "
"library."
msgstr ""

#: ../../library/readline.rst:223
msgid ""
"Get the completer function, or ``None`` if no completer function has been "
"set."
msgstr "completer 関数を取得します。completer 関数が設定されていなければ ``None`` を返します。"

#: ../../library/readline.rst:228
msgid ""
"Get the type of completion being attempted.  This returns the "
":c:data:`rl_completion_type` variable in the underlying library as an "
"integer."
msgstr ""

#: ../../library/readline.rst:236
msgid ""
"Get the beginning or ending index of the completion scope. These indexes are"
" the *start* and *end* arguments passed to the "
":c:data:`rl_attempted_completion_function` callback of the underlying "
"library."
msgstr ""

#: ../../library/readline.rst:245
msgid ""
"Set or get the word delimiters for completion.  These determine the start of"
" the word to be considered for completion (the completion scope). These "
"functions access the :c:data:`rl_completer_word_break_characters` variable "
"in the underlying library."
msgstr ""

#: ../../library/readline.rst:253
msgid ""
"Set or remove the completion display function.  If *function* is specified, "
"it will be used as the new completion display function; if omitted or "
"``None``, any completion display function already installed is removed.  "
"This sets or clears the :c:data:`rl_completion_display_matches_hook` "
"callback in the underlying library.  The completion display function is "
"called as ``function(substitution, [matches], longest_match_length)`` once "
"each time matches need to be displayed."
msgstr ""

#: ../../library/readline.rst:266
msgid "Example"
msgstr "例"

#: ../../library/readline.rst:268
msgid ""
"The following example demonstrates how to use the :mod:`readline` module's "
"history reading and writing functions to automatically load and save a "
"history file named :file:`.python_history` from the user's home directory.  "
"The code below would normally be executed automatically during interactive "
"sessions from the user's :envvar:`PYTHONSTARTUP` file. ::"
msgstr "以下の例では、ユーザのホームディレクトリにある履歴ファイル :file:`.python_history` の読み込みと保存を自動的に行うために、 :mod:`readline` モジュールの履歴の読み書き関数をどのように使うかを示しています。以下のソースコードは通常、対話セッション中はユーザの :envvar:`PYTHONSTARTUP` ファイルから自動的に実行されます::"

#: ../../library/readline.rst:288
msgid ""
"This code is actually automatically run when Python is run in "
":ref:`interactive mode <tut-interactive>` (see :ref:`rlcompleter-config`)."
msgstr "Python が :ref:`対話モード <tut-interactive>` で実行される時、このコードは実際には自動的に実行されます ( :ref:`rlcompleter-config` を参照してください)。"

#: ../../library/readline.rst:291
msgid ""
"The following example achieves the same goal but supports concurrent "
"interactive sessions, by only appending the new history. ::"
msgstr "次の例では上記と同じ目的を達成できますが、ここでは新規の履歴のみを追加することで、並行して対話セッションがサポートされます。"

#: ../../library/readline.rst:312
msgid ""
"The following example extends the :class:`code.InteractiveConsole` class to "
"support history save/restore. ::"
msgstr "次の例では :class:`code.InteractiveConsole` クラスを拡張し、履歴の保存・復旧をサポートします。 ::"
