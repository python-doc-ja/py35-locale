# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# INADA Naoki <songofacandy@gmail.com>, 2016
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2016
# Shun Sakurai, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2016-12-10 07:47+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-35/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/interpreter.rst:5
msgid "Using the Python Interpreter"
msgstr "Python インタプリタを使う"

#: ../../tutorial/interpreter.rst:11
msgid "Invoking the Interpreter"
msgstr "インタプリタを起動する"

#: ../../tutorial/interpreter.rst:13
msgid ""
"The Python interpreter is usually installed as "
":file:`/usr/local/bin/python3.5` on those machines where it is available; "
"putting :file:`/usr/local/bin` in your Unix shell's search path makes it "
"possible to start it by typing the command:"
msgstr "Python インタプリタは、それが使えるマシン上では通常 :file:`/usr/local/bin/python3.5` としてインストールされています; Unix シェルの検索パスに :file:`/usr/local/bin` を入れることによって、次のコマンドをタイプしてインタプリタを開始することができます:"

#: ../../tutorial/interpreter.rst:21
msgid ""
"to the shell. [#]_ Since the choice of the directory where the interpreter "
"lives is an installation option, other places are possible; check with your "
"local Python guru or system administrator.  (E.g., :file:`/usr/local/python`"
" is a popular alternative location.)"
msgstr "[#]_ どのディレクトリに Python インタプリタをインストールするかはインストール時に選択できるので、インタプリタは他のディレクトリにあるかもしれません; 身近な Python に詳しい人か、システム管理者に聞いてみてください。 (例えば、その他の場所としては :file:`/usr/local/python` が一般的です。)"

#: ../../tutorial/interpreter.rst:26
msgid ""
"On Windows machines, the Python installation is usually placed in "
":file:`C:\\\\Python35`, though you can change this when you're running the "
"installer.  To add this directory to your path,  you can type the following "
"command into the command prompt in a DOS box::"
msgstr "Windows では、 Python は大抵の場合 :file:`C:\\\\Python35` にインストールされますが、インストーラ実行時に変更することができます。このディレクトリをあなたのパスに追加するには、以下のコマンドをコマンドプロンプトで実行してください。 ::"

#: ../../tutorial/interpreter.rst:33
msgid ""
"Typing an end-of-file character (:kbd:`Control-D` on Unix, :kbd:`Control-Z` "
"on Windows) at the primary prompt causes the interpreter to exit with a zero"
" exit status.  If that doesn't work, you can exit the interpreter by typing "
"the following command: ``quit()``."
msgstr "ファイル終端文字 (Unixでは :kbd:`Control-D` 、DOS や Windows では :kbd:`Control-Z`) を一次プロンプト (訳注: '>>>' のこと) に入力すると、インタプリタが終了ステータス 0 で終了します。もしこの操作がうまく働かないなら、コマンド: ``quit()`` と入力すればインタプリタを終了できます。"

#: ../../tutorial/interpreter.rst:38
msgid ""
"The interpreter's line-editing features include interactive editing, history"
" substitution and code completion on systems that support readline.  Perhaps"
" the quickest check to see whether command line editing is supported is "
"typing :kbd:`Control-P` to the first Python prompt you get.  If it beeps, "
"you have command line editing; see Appendix :ref:`tut-interacting` for an "
"introduction to the keys.  If nothing appears to happen, or if ``^P`` is "
"echoed, command line editing isn't available; you'll only be able to use "
"backspace to remove characters from the current line."
msgstr "readline をサポートしているシステム上では、対話的行編集やヒストリ置換、コード補完のインタプリタの行編集機能が利用できます。コマンドライン編集機能がサポートされているかを最も手っ取り早く調べる方法は、おそらく最初に表示された Python プロンプトに :kbd:`Control-P` を入力してみることでしょう。ビープ音が鳴るなら、コマンドライン編集機能があります。編集キーについての解説は付録 :ref:`tut-interacting` を参照してください。何も起こらないように見えるか、 ``^P`` がエコーバックされるなら、コマンドライン編集機能は利用できません。この場合、現在編集中の行から文字を削除するにはバックスペースを使うしかありません。"

#: ../../tutorial/interpreter.rst:47
msgid ""
"The interpreter operates somewhat like the Unix shell: when called with "
"standard input connected to a tty device, it reads and executes commands "
"interactively; when called with a file name argument or with a file as "
"standard input, it reads and executes a *script* from that file."
msgstr "インタプリタはさながら Unix シェルのように働きます。標準入力が端末に接続された状態で呼び出されると、コマンドを対話的に読み込んで実行します。ファイル名を引数にしたり、標準入力からファイルを入力すると、インタプリタはファイルから *スクリプト* を読み込んで実行します。"

#: ../../tutorial/interpreter.rst:52
msgid ""
"A second way of starting the interpreter is ``python -c command [arg] ...``,"
" which executes the statement(s) in *command*, analogous to the shell's "
":option:`-c` option.  Since Python statements often contain spaces or other "
"characters that are special to the shell, it is usually advised to quote "
"*command* in its entirety with single quotes."
msgstr "インタプリタを起動する第二の方法は ``python -c command [arg] ...`` です。この形式では、シェルの :option:`-c` オプションと同じように、 *command* に指定した文を実行します。 Python 文には、スペースなどのシェルにとって特殊な意味をもつ文字がしばしば含まれるので、 *command* 全体をシングルクォート(訳注: ``'``)で囲っておいたほうが良いでしょう。"

#: ../../tutorial/interpreter.rst:58
msgid ""
"Some Python modules are also useful as scripts.  These can be invoked using "
"``python -m module [arg] ...``, which executes the source file for *module* "
"as if you had spelled out its full name on the command line."
msgstr "Python のモジュールには、スクリプトとしても便利に使えるものがあります。 ``python -m module [arg] ...`` のようにすると、 *module* のソースファイルを、フルパスを指定して起動したかのように実行できます。"

#: ../../tutorial/interpreter.rst:62
msgid ""
"When a script file is used, it is sometimes useful to be able to run the "
"script and enter interactive mode afterwards.  This can be done by passing "
":option:`-i` before the script."
msgstr "スクリプトファイルが使われた場合、スクリプトを走らせて、そのまま対話モードに入れると便利なことがあります。これには :option:`-i` をスクリプトの前に追加します。"

#: ../../tutorial/interpreter.rst:66
msgid "All command line options are described in :ref:`using-on-general`."
msgstr "全てのコマンドラインオプションは :ref:`using-on-general` で説明されています。"

#: ../../tutorial/interpreter.rst:72
msgid "Argument Passing"
msgstr "引数の受け渡し"

#: ../../tutorial/interpreter.rst:74
msgid ""
"When known to the interpreter, the script name and additional arguments "
"thereafter are turned into a list of strings and assigned to the ``argv`` "
"variable in the ``sys`` module.  You can access this list by executing "
"``import sys``.  The length of the list is at least one; when no script and "
"no arguments are given, ``sys.argv[0]`` is an empty string.  When the script"
" name is given as ``'-'`` (meaning  standard input), ``sys.argv[0]`` is set "
"to ``'-'``.  When :option:`-c` *command* is used, ``sys.argv[0]`` is set to "
"``'-c'``.  When :option:`-m` *module* is used, ``sys.argv[0]``  is set to "
"the full name of the located module.  Options found after  :option:`-c` "
"*command* or :option:`-m` *module* are not consumed  by the Python "
"interpreter's option processing but left in ``sys.argv`` for  the command or"
" module to handle."
msgstr "スクリプト名と引数を指定してインタプリタを起動した場合、スクリプト名やスクリプト名以後に指定した引数は、文字列のリストに変換されて ``sys`` モジュールの ``argv`` 変数に格納されます。 ``import sys`` することでこのリストにアクセスすることができます。 ``sys.argv`` には少なくとも一つ要素が入っています。スクリプト名も引数も指定しなければ ``sys.argv[0]`` は空の文字列になります。スクリプト名の代わりに ``'-'`` (標準入力を意味します) を指定すると、 ``sys.argv[0]`` は ``'-'`` になります。 :option:`-c`  *command* を使うと、 ``sys.argv[0]`` は ``'-c'`` になります。 :option:`-m` *module* を使った場合、 ``sys.argv[0]`` はモジュールのフルパスになります。 :option:`-c` *command* や :option:`-m` *module* の後ろにオプションを指定した場合、 Python インタプリタ自体はこれらの引数を処理せず、 ``sys.argv`` を介して *command* や *module* から扱えるようになります。"

#: ../../tutorial/interpreter.rst:90
msgid "Interactive Mode"
msgstr "対話モード"

#: ../../tutorial/interpreter.rst:92
msgid ""
"When commands are read from a tty, the interpreter is said to be in "
"*interactive mode*.  In this mode it prompts for the next command with the "
"*primary prompt*, usually three greater-than signs (``>>>``); for "
"continuation lines it prompts with the *secondary prompt*, by default three "
"dots (``...``). The interpreter prints a welcome message stating its version"
" number and a copyright notice before printing the first prompt:"
msgstr "インタプリタが命令を端末 (tty) やコマンドプロンプトから読み取っている場合、インタプリタは *対話モード (interactive mode)* で動作しているといいます。このモードでは、インタプリタは *一次プロンプト (primary prompt)* を表示して、ユーザにコマンドを入力するよう促します。一次プロンプトは普通、三つの「大なり記号」 (``>>>``) です。一つの入力が次の行まで続く (行継続: continuation line を行う) 場合、インタプリタは *二次プロンプト (secondary prompt)* を表示します。二次プロンプトは、デフォルトでは三つのドット (``...``) です。インタプリタは、最初のプロンプトを出す前にバージョン番号と著作権表示から始まる起動メッセージを出力します:"

#: ../../tutorial/interpreter.rst:109
msgid ""
"Continuation lines are needed when entering a multi-line construct. As an "
"example, take a look at this :keyword:`if` statement::"
msgstr "行継続は、例えば以下の :keyword:`if` 文のように、複数の行からなる構文を入力するときに必要です::"

#: ../../tutorial/interpreter.rst:119
msgid "For more on interactive mode, see :ref:`tut-interac`."
msgstr "対話モードについての詳細は :ref:`tut-interac` を参照してください。"

#: ../../tutorial/interpreter.rst:125
msgid "The Interpreter and Its Environment"
msgstr "インタプリタとその環境"

#: ../../tutorial/interpreter.rst:131
msgid "Source Code Encoding"
msgstr "ソースコードの文字コード"

#: ../../tutorial/interpreter.rst:133
msgid ""
"By default, Python source files are treated as encoded in UTF-8.  In that "
"encoding, characters of most languages in the world can be used "
"simultaneously in string literals, identifiers and comments --- although the"
" standard library only uses ASCII characters for identifiers, a convention "
"that any portable code should follow.  To display all these characters "
"properly, your editor must recognize that the file is UTF-8, and it must use"
" a font that supports all the characters in the file."
msgstr "デフォルトでは、Python のソースコードは UTF-8 でエンコードされているものとして扱われます。UTF-8 では、世界中のほとんどの言語の文字を同時に文字列リテラルや識別子やコメント中に書くことができます。--- ただし、標準ライブラリは識別子に ASCII 文字のみを利用していて、その他のポータブルなコードもその慣習に従うべきです。それらの文字を正しく表示するためには、エディターはそのファイルが UTF-8 である事を識別して、そのファイルに含まれている文字を全てサポートしたフォントを使わなければなりません。"

#: ../../tutorial/interpreter.rst:141
msgid ""
"It is also possible to specify a different encoding for source files.  In "
"order to do this, put one more special comment line right after the ``#!`` "
"line to define the source file encoding::"
msgstr "ソースファイルで扱う異なるエンコーディングを指定することもできます。そのためには、``#!`` 行の直後に、ソースファイルエンコーディングを定義する特殊なコメント行を置いてください::"

#: ../../tutorial/interpreter.rst:147
msgid ""
"With that declaration, everything in the source file will be treated as "
"having the encoding *encoding* instead of UTF-8.  The list of possible "
"encodings can be found in the Python Library Reference, in the section on "
":mod:`codecs`."
msgstr "このように宣言しておくと、ソースファイル中の全ては UTF-8 ではなく *encoding* という文字コードでエンコードされているものとして扱われます。実際に利用できるエンコードのリストは Python ライブラリリファレンスの :mod:`codecs` の節にあります。訳注: *エンコーディング* の部分には、実際には ``utf-8`` や ``cp932`` など、そのソースコードのエンコーディングを記述します。プログラムから日本語を扱う場合には、必ずある程度の文字コードの知識が必要になります。もし文字コードについてよく判らないのであれば、まずは英語だけ扱いながらチュートリアルを読み進めて、並行して文字コードについても勉強してみましょう。現在は、 Unicode の扱い易さの観点から、推奨される文字コードは ``utf-8`` です。ただし、 ``utf-8`` でソースを書いた場合、 ``utf-8`` を表示できない Windows のコマンドプロンプトは ``print \"こんにちは\"`` を実行すると文字化けを起こすでしょう。その場合は、互換性のために古い ``cp932`` エンコーディングを使うか、 ``print u\"こんにちは\"`` のように Unicode 文字列を使います。"

#: ../../tutorial/interpreter.rst:151
msgid ""
"For example, if your editor of choice does not support UTF-8 encoded files "
"and insists on using some other encoding, say Windows-1252, you can write::"
msgstr "例えば、エディターが UTF-8 でエンコードされたファイルをサポートせず他のエンコーディング、例えば Windows-1252 を利用しないといけない場合、次のように書くことができます::"

#: ../../tutorial/interpreter.rst:156
msgid ""
"and still use all characters in the Windows-1252 character set in the source"
" files.  The special encoding comment must be in the *first or second* line "
"within the file."
msgstr "そして Windows-1252 文字集合中の文字をソースコード中に使うことができます。この特殊なエンコーディングコメントはファイルの *1行目か2行目* に書く必要があります。"

#: ../../tutorial/interpreter.rst:162
msgid "Footnotes"
msgstr "脚注"

#: ../../tutorial/interpreter.rst:163
msgid ""
"On Unix, the Python 3.x interpreter is by default not installed with the "
"executable named ``python``, so that it does not conflict with a "
"simultaneously installed Python 2.x executable."
msgstr "Unixでは、Python 3.x インタープリタの実行ファイルはデフォルトでは ``python`` という名前ではインストールされません。同時にインストールされた Python 2.x 実行ファイルと衝突させないためです。"
