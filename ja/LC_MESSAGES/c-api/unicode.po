# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
# Hiroki Kimura <ranpaku1012@yahoo.co.jp>, 2016
# tomo, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2016-12-23 06:02+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-35/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/unicode.rst:6
msgid "Unicode Objects and Codecs"
msgstr "Unicode オブジェクトと codec"

#: ../../c-api/unicode.rst:12
msgid "Unicode Objects"
msgstr "Unicode オブジェクト"

#: ../../c-api/unicode.rst:14
msgid ""
"Since the implementation of :pep:`393` in Python 3.3, Unicode objects "
"internally use a variety of representations, in order to allow handling the "
"complete range of Unicode characters while staying memory efficient.  There "
"are special cases for strings where all code points are below 128, 256, or "
"65536; otherwise, code points must be below 1114112 (which is the full "
"Unicode range)."
msgstr "Python3.3 の :pep:`393` 実装から、メモリ効率を維持しながらUnicode文字の完全な範囲を扱えるように、Unicodeオブジェクトは内部的に多様な表現を用いています。すべてのコードポイントが128、256または65536以下の文字列に対して特別なケースが存在しますが、それ以外ではコードポイントは1114112以下(これはすべてのUnicode範囲です)でなければなりません。"

#: ../../c-api/unicode.rst:20
msgid ""
":c:type:`Py_UNICODE*` and UTF-8 representations are created on demand and "
"cached in the Unicode object.  The :c:type:`Py_UNICODE*` representation is "
"deprecated and inefficient; it should be avoided in performance- or memory-"
"sensitive situations."
msgstr ":c:type:`Py_UNICODE*` および UTF-8表現はオンデマンドで作成され、Unicode オブジェクト内にキャッシュされます。:c:type:`Py_UNICODE*` 表現は推奨されず、非効率ですので、重要なタスクを実行し、メモリを消費している状況下では避けるべきです。"

#: ../../c-api/unicode.rst:25
msgid ""
"Due to the transition between the old APIs and the new APIs, unicode objects"
" can internally be in two states depending on how they were created:"
msgstr "古いAPI群と新しいAPI群での変換のために、ユニコードオブジェクトは、オブジェクトがどのように生成されたかによって、内部的に２つの状態を持ちます。"

#: ../../c-api/unicode.rst:28
msgid ""
"\"canonical\" unicode objects are all objects created by a non-deprecated "
"unicode API.  They use the most efficient representation allowed by the "
"implementation."
msgstr "\"正統な\" unicode オブジェクトは、非推奨ではないunicode APIで作成されたすべてのオブジェクトです。これらのオブジェクトは実装が許すかぎり最も効率の良い表現を使用します。"

#: ../../c-api/unicode.rst:32
msgid ""
"\"legacy\" unicode objects have been created through one of the deprecated "
"APIs (typically :c:func:`PyUnicode_FromUnicode`) and only bear the "
":c:type:`Py_UNICODE*` representation; you will have to call "
":c:func:`PyUnicode_READY` on them before calling any other API."
msgstr "\"古い\" unicode オブジェクトは、非推奨の API (たいていは :c:func:`PyUnicode_FromUnicode`) で作成されたオブジェクトで、 :c:type:`Py_UNICODE*` 表現しか持ってません;\n他の API を呼び出す前に、このオブジェクトに対し :c:func:`PyUnicode_READY` を呼び出す必要があるでしょう。"

#: ../../c-api/unicode.rst:39
msgid "Unicode Type"
msgstr "Unicode 型"

#: ../../c-api/unicode.rst:41
msgid ""
"These are the basic Unicode object types used for the Unicode implementation"
" in Python:"
msgstr "以下は Python の Unicode 実装に用いられている基本 Unicode オブジェクト型です:"

#: ../../c-api/unicode.rst:48
msgid ""
"These types are typedefs for unsigned integer types wide enough to contain "
"characters of 32 bits, 16 bits and 8 bits, respectively.  When dealing with "
"single Unicode characters, use :c:type:`Py_UCS4`."
msgstr "これらの型は、それぞれ、32ビット、16ビット、そして8ビットの文字を保持するのに充分な幅を持つ符号なしの整数型のtypedefです。単一のUnicode文字を扱う場合は、 :c:type:`Py_UCS4` を用いてください。"

#: ../../c-api/unicode.rst:57
msgid ""
"This is a typedef of :c:type:`wchar_t`, which is a 16-bit type or 32-bit "
"type depending on the platform."
msgstr "これは、:c:type:`wchar_t` のtypedef で、プラットフォームに依存して16ビットか32ビットの型になります。"

#: ../../c-api/unicode.rst:60
msgid ""
"In previous versions, this was a 16-bit type or a 32-bit type depending on "
"whether you selected a \"narrow\" or \"wide\" Unicode version of Python at "
"build time."
msgstr "以前のバージョンでは、Pythonをビルドした際に \"narrow\" または \"wide\" Unicode バージョンのどちらを選択したかによって、 16ビットか32ビットのどちらかの型になっていました。"

#: ../../c-api/unicode.rst:70
msgid ""
"These subtypes of :c:type:`PyObject` represent a Python Unicode object.  In "
"almost all cases, they shouldn't be used directly, since all API functions "
"that deal with Unicode objects take and return :c:type:`PyObject` pointers."
msgstr ""

#: ../../c-api/unicode.rst:79
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python Unicode type."
"  It is exposed to Python code as ``str``."
msgstr "この :c:type:`PyTypeObject` のインスタンスは、Python Unicode型を表します。これは、Pythonコードに ``str`` として露出されます。"

#: ../../c-api/unicode.rst:83
msgid ""
"The following APIs are really C macros and can be used to do fast checks and"
" to access internal read-only data of Unicode objects:"
msgstr "以下の API は実際には C マクロで、Unicode オブジェクト内部の読み出し専用データに対するチェックやアクセスを高速に行います:"

#: ../../c-api/unicode.rst:88
msgid ""
"Return true if the object *o* is a Unicode object or an instance of a "
"Unicode subtype."
msgstr "*o* が Unicode 文字列型か Unicode 文字列型のサブタイプであるときに真を返します。"

#: ../../c-api/unicode.rst:94
msgid ""
"Return true if the object *o* is a Unicode object, but not an instance of a "
"subtype."
msgstr "*o* が Unicode 文字列型で、かつ Unicode 文字列型のサブタイプでないときに真を返します。"

#: ../../c-api/unicode.rst:100
msgid ""
"Ensure the string object *o* is in the \"canonical\" representation.  This "
"is required before using any of the access macros described below."
msgstr ""

#: ../../c-api/unicode.rst:105
msgid ""
"Returns ``0`` on success and ``-1`` with an exception set on failure, which "
"in particular happens if memory allocation fails."
msgstr ""

#: ../../c-api/unicode.rst:113
msgid ""
"Return the length of the Unicode string, in code points.  *o* has to be a "
"Unicode object in the \"canonical\" representation (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:123
msgid ""
"Return a pointer to the canonical representation cast to UCS1, UCS2 or UCS4 "
"integer types for direct character access.  No checks are performed if the "
"canonical representation has the correct character size; use "
":c:func:`PyUnicode_KIND` to select the right macro.  Make sure "
":c:func:`PyUnicode_READY` has been called before accessing this."
msgstr ""

#: ../../c-api/unicode.rst:137
msgid "Return values of the :c:func:`PyUnicode_KIND` macro."
msgstr ""

#: ../../c-api/unicode.rst:144
msgid ""
"Return one of the PyUnicode kind constants (see above) that indicate how "
"many bytes per character this Unicode object uses to store its data.  *o* "
"has to be a Unicode object in the \"canonical\" representation (not "
"checked)."
msgstr ""

#: ../../c-api/unicode.rst:155
msgid ""
"Return a void pointer to the raw unicode buffer.  *o* has to be a Unicode "
"object in the \"canonical\" representation (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:164
msgid ""
"Write into a canonical representation *data* (as obtained with "
":c:func:`PyUnicode_DATA`).  This macro does not do any sanity checks and is "
"intended for usage in loops.  The caller should cache the *kind* value and "
"*data* pointer as obtained from other macro calls.  *index* is the index in "
"the string (starts at 0) and *value* is the new code point value which "
"should be written to that location."
msgstr ""

#: ../../c-api/unicode.rst:176
msgid ""
"Read a code point from a canonical representation *data* (as obtained with "
":c:func:`PyUnicode_DATA`).  No checks or ready calls are performed."
msgstr ""

#: ../../c-api/unicode.rst:184
msgid ""
"Read a character from a Unicode object *o*, which must be in the "
"\"canonical\" representation.  This is less efficient than "
":c:func:`PyUnicode_READ` if you do multiple consecutive reads."
msgstr ""

#: ../../c-api/unicode.rst:193
msgid ""
"Return the maximum code point that is suitable for creating another string "
"based on *o*, which must be in the \"canonical\" representation.  This is "
"always an approximation but more efficient than iterating over the string."
msgstr ""

#: ../../c-api/unicode.rst:202
msgid "Clear the free list. Return the total number of freed items."
msgstr "free list をクリアします。解放された要素数を返します。"

#: ../../c-api/unicode.rst:207
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation, in "
"code units (this includes surrogate pairs as 2 units).  *o* has to be a "
"Unicode object (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:213 ../../c-api/unicode.rst:223
msgid ""
"Deprecated since version 3.3, will be removed in version 4.0: Part of the "
"old-style Unicode API, please migrate to using PyUnicode_GET_LENGTH()."
msgstr ""

#: ../../c-api/unicode.rst:213 ../../c-api/unicode.rst:223
msgid ""
"Part of the old-style Unicode API, please migrate to using "
":c:func:`PyUnicode_GET_LENGTH`."
msgstr ""

#: ../../c-api/unicode.rst:218
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation in "
"bytes.  *o* has to be a Unicode object (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:229
msgid ""
"Return a pointer to a :c:type:`Py_UNICODE` representation of the object.  "
"The returned buffer is always terminated with an extra null code point.  It "
"may also contain embedded null code points, which would cause the string to "
"be truncated when used in most C functions.  The ``AS_DATA`` form casts the "
"pointer to :c:type:`const char *`.  The *o* argument has to be a Unicode "
"object (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:236
msgid ""
"This macro is now inefficient -- because in many cases the "
":c:type:`Py_UNICODE` representation does not exist and needs to be created "
"-- and can fail (return *NULL* with an exception set).  Try to port the code"
" to use the new :c:func:`PyUnicode_nBYTE_DATA` macros or use "
":c:func:`PyUnicode_WRITE` or :c:func:`PyUnicode_READ`."
msgstr ""

#: ../../c-api/unicode.rst:245
msgid ""
"Deprecated since version 3.3, will be removed in version 4.0: Part of the "
"old-style Unicode API, please migrate to using the PyUnicode_nBYTE_DATA() "
"family of macros."
msgstr ""

#: ../../c-api/unicode.rst:245
msgid ""
"Part of the old-style Unicode API, please migrate to using the "
":c:func:`PyUnicode_nBYTE_DATA` family of macros."
msgstr ""

#: ../../c-api/unicode.rst:249
msgid "Unicode Character Properties"
msgstr "Unicode 文字プロパティ"

#: ../../c-api/unicode.rst:251
msgid ""
"Unicode provides many different character properties. The most often needed "
"ones are available through these macros which are mapped to C functions "
"depending on the Python configuration."
msgstr "Unicode は数多くの異なる文字プロパティ (character property) を提供しています。よく使われる文字プロパティは、以下のマクロで利用できます。これらのマクロは Python の設定に応じて、各々 C の関数に対応付けられています。"

#: ../../c-api/unicode.rst:258
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a whitespace character."
msgstr ""

#: ../../c-api/unicode.rst:263
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a lowercase character."
msgstr ""

#: ../../c-api/unicode.rst:268
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an uppercase character."
msgstr ""

#: ../../c-api/unicode.rst:273
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a titlecase character."
msgstr ""

#: ../../c-api/unicode.rst:278
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a linebreak character."
msgstr ""

#: ../../c-api/unicode.rst:283
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a decimal character."
msgstr ""

#: ../../c-api/unicode.rst:288
msgid "Return ``1`` or ``0`` depending on whether *ch* is a digit character."
msgstr ""

#: ../../c-api/unicode.rst:293
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a numeric character."
msgstr ""

#: ../../c-api/unicode.rst:298
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphabetic character."
msgstr ""

#: ../../c-api/unicode.rst:303
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphanumeric "
"character."
msgstr ""

#: ../../c-api/unicode.rst:308
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a printable character. "
"Nonprintable characters are those characters defined in the Unicode "
"character database as \"Other\" or \"Separator\", excepting the ASCII space "
"(0x20) which is considered printable.  (Note that printable characters in "
"this context are those which should not be escaped when :func:`repr` is "
"invoked on a string. It has no bearing on the handling of strings written to"
" :data:`sys.stdout` or :data:`sys.stderr`.)"
msgstr ""

#: ../../c-api/unicode.rst:317
msgid "These APIs can be used for fast direct character conversions:"
msgstr "以下の API は、高速に直接文字変換を行うために使われます:"

#: ../../c-api/unicode.rst:322
msgid "Return the character *ch* converted to lower case."
msgstr "*ch* を小文字に変換したものを返します。"

#: ../../c-api/unicode.rst:324 ../../c-api/unicode.rst:332
#: ../../c-api/unicode.rst:340
msgid "This function uses simple case mappings."
msgstr ""

#: ../../c-api/unicode.rst:330
msgid "Return the character *ch* converted to upper case."
msgstr "*ch* を大文字に変換したものを返します。"

#: ../../c-api/unicode.rst:338
msgid "Return the character *ch* converted to title case."
msgstr "*ch* をタイトルケース文字に変換したものを返します。"

#: ../../c-api/unicode.rst:346
msgid ""
"Return the character *ch* converted to a decimal positive integer.  Return "
"``-1`` if this is not possible.  This macro does not raise exceptions."
msgstr "*ch* を 10 進の正の整数に変換したものを返します。不可能ならば ``-1`` を返します。このマクロは例外を送出しません。"

#: ../../c-api/unicode.rst:352
msgid ""
"Return the character *ch* converted to a single digit integer. Return ``-1``"
" if this is not possible.  This macro does not raise exceptions."
msgstr "*ch* を一桁の 2 進整数に変換したものを返します。不可能ならば ``-1`` を返します。このマクロは例外を送出しません。"

#: ../../c-api/unicode.rst:358
msgid ""
"Return the character *ch* converted to a double. Return ``-1.0`` if this is "
"not possible.  This macro does not raise exceptions."
msgstr "*ch* を :c:type:`double` に変換したものを返します。不可能ならば ``-1.0`` を返します。このマクロは例外を送出しません。"

#: ../../c-api/unicode.rst:362
msgid "These APIs can be used to work with surrogates:"
msgstr ""

#: ../../c-api/unicode.rst:366
msgid "Check if *ch* is a surrogate (``0xD800 <= ch <= 0xDFFF``)."
msgstr ""

#: ../../c-api/unicode.rst:370
msgid "Check if *ch* is a high surrogate (``0xD800 <= ch <= 0xDBFF``)."
msgstr ""

#: ../../c-api/unicode.rst:374
msgid "Check if *ch* is a low surrogate (``0xDC00 <= ch <= 0xDFFF``)."
msgstr ""

#: ../../c-api/unicode.rst:378
msgid ""
"Join two surrogate characters and return a single Py_UCS4 value. *high* and "
"*low* are respectively the leading and trailing surrogates in a surrogate "
"pair."
msgstr ""

#: ../../c-api/unicode.rst:384
msgid "Creating and accessing Unicode strings"
msgstr ""

#: ../../c-api/unicode.rst:386
msgid ""
"To create Unicode objects and access their basic sequence properties, use "
"these APIs:"
msgstr "Unicode オブジェクトを生成したり、Unicode のシーケンスとしての基本的なプロパティにアクセスしたりするには、以下の API を使ってください:"

#: ../../c-api/unicode.rst:391
msgid ""
"Create a new Unicode object.  *maxchar* should be the true maximum code "
"point to be placed in the string.  As an approximation, it can be rounded up"
" to the nearest value in the sequence 127, 255, 65535, 1114111."
msgstr ""

#: ../../c-api/unicode.rst:395
msgid ""
"This is the recommended way to allocate a new Unicode object.  Objects "
"created using this function are not resizable."
msgstr ""

#: ../../c-api/unicode.rst:404
msgid ""
"Create a new Unicode object with the given *kind* (possible values are "
":c:macro:`PyUnicode_1BYTE_KIND` etc., as returned by "
":c:func:`PyUnicode_KIND`).  The *buffer* must point to an array of *size* "
"units of 1, 2 or 4 bytes per character, as given by the kind."
msgstr ""

#: ../../c-api/unicode.rst:414
msgid ""
"Create a Unicode object from the char buffer *u*.  The bytes will be "
"interpreted as being UTF-8 encoded.  The buffer is copied into the new "
"object. If the buffer is not *NULL*, the return value might be a shared "
"object, i.e. modification of the data is not allowed."
msgstr ""

#: ../../c-api/unicode.rst:419
msgid ""
"If *u* is *NULL*, this function behaves like :c:func:`PyUnicode_FromUnicode`"
" with the buffer set to *NULL*.  This usage is deprecated in favor of "
":c:func:`PyUnicode_New`."
msgstr ""

#: ../../c-api/unicode.rst:426
msgid ""
"Create a Unicode object from a UTF-8 encoded null-terminated char buffer "
"*u*."
msgstr ""

#: ../../c-api/unicode.rst:432
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number of "
"arguments, calculate the size of the resulting Python unicode string and "
"return a string with the values formatted into it.  The variable arguments "
"must be C types and must correspond exactly to the format characters in the "
"*format* ASCII-encoded string. The following format characters are allowed:"
msgstr ":c:func:`printf` スタイルの *format* 文字列と可変長引数を受け取り、結果の unicode 文字の長さを計算し、フォーマットされた文字列を含む unicode オブジェクトを返します。可変長引数は C の型を持っていて、 *format* ASCII エンコード文字列で指定された書式指定文字に完全に従う必要があります。以下の書式指定文字が利用できます:"

#: ../../c-api/unicode.rst:448
msgid "Format Characters"
msgstr "フォーマット文字"

#: ../../c-api/unicode.rst:448
msgid "Type"
msgstr "型"

#: ../../c-api/unicode.rst:448
msgid "Comment"
msgstr "コメント"

#: ../../c-api/unicode.rst:450
msgid ":attr:`%%`"
msgstr ":attr:`%%`"

#: ../../c-api/unicode.rst:450
msgid "*n/a*"
msgstr "*n/a*"

#: ../../c-api/unicode.rst:450
msgid "The literal % character."
msgstr "文字 % のリテラル。"

#: ../../c-api/unicode.rst:452
msgid ":attr:`%c`"
msgstr ":attr:`%c`"

#: ../../c-api/unicode.rst:452 ../../c-api/unicode.rst:455
#: ../../c-api/unicode.rst:488 ../../c-api/unicode.rst:491
msgid "int"
msgstr "int"

#: ../../c-api/unicode.rst:452
msgid "A single character, represented as a C int."
msgstr ""

#: ../../c-api/unicode.rst:455
msgid ":attr:`%d`"
msgstr ":attr:`%d`"

#: ../../c-api/unicode.rst:455
msgid "Exactly equivalent to ``printf(\"%d\")``."
msgstr "C の ``printf(\"%d\")`` と全く同じ。"

#: ../../c-api/unicode.rst:458
msgid ":attr:`%u`"
msgstr ":attr:`%u`"

#: ../../c-api/unicode.rst:458
msgid "unsigned int"
msgstr "unsigned int"

#: ../../c-api/unicode.rst:458
msgid "Exactly equivalent to ``printf(\"%u\")``."
msgstr "C の ``printf(\"%u\")`` と全く同じ。"

#: ../../c-api/unicode.rst:461
msgid ":attr:`%ld`"
msgstr ":attr:`%ld`"

#: ../../c-api/unicode.rst:461 ../../c-api/unicode.rst:464
msgid "long"
msgstr "long型"

#: ../../c-api/unicode.rst:461
msgid "Exactly equivalent to ``printf(\"%ld\")``."
msgstr "C の ``printf(\"%ld\")`` と全く同じ。"

#: ../../c-api/unicode.rst:464
msgid ":attr:`%li`"
msgstr ":attr:`%li`"

#: ../../c-api/unicode.rst:464
msgid "Exactly equivalent to ``printf(\"%li\")``."
msgstr "C の ``printf(\"%li\")`` と全く同じ。"

#: ../../c-api/unicode.rst:467
msgid ":attr:`%lu`"
msgstr ":attr:`%lu`"

#: ../../c-api/unicode.rst:467
msgid "unsigned long"
msgstr "unsigned long"

#: ../../c-api/unicode.rst:467
msgid "Exactly equivalent to ``printf(\"%lu\")``."
msgstr "C の ``printf(\"%lu\")`` と全く同じ。"

#: ../../c-api/unicode.rst:470
msgid ":attr:`%lld`"
msgstr ":attr:`%lld`"

#: ../../c-api/unicode.rst:470 ../../c-api/unicode.rst:473
msgid "long long"
msgstr "long long"

#: ../../c-api/unicode.rst:470
msgid "Exactly equivalent to ``printf(\"%lld\")``."
msgstr "C の ``printf(\"%lld\")`` と全く同じ。"

#: ../../c-api/unicode.rst:473
msgid ":attr:`%lli`"
msgstr ":attr:`%lli`"

#: ../../c-api/unicode.rst:473
msgid "Exactly equivalent to ``printf(\"%lli\")``."
msgstr "C の ``printf(\"%lli\")`` と全く同じ。"

#: ../../c-api/unicode.rst:476
msgid ":attr:`%llu`"
msgstr ":attr:`%llu`"

#: ../../c-api/unicode.rst:476
msgid "unsigned long long"
msgstr "unsigned long long"

#: ../../c-api/unicode.rst:476
msgid "Exactly equivalent to ``printf(\"%llu\")``."
msgstr "C の ``printf(\"%llu\")`` と全く同じ。"

#: ../../c-api/unicode.rst:479
msgid ":attr:`%zd`"
msgstr ":attr:`%zd`"

#: ../../c-api/unicode.rst:479 ../../c-api/unicode.rst:482
msgid "Py_ssize_t"
msgstr "Py_ssize_t"

#: ../../c-api/unicode.rst:479
msgid "Exactly equivalent to ``printf(\"%zd\")``."
msgstr "C の ``printf(\"%zd\")`` と全く同じ。"

#: ../../c-api/unicode.rst:482
msgid ":attr:`%zi`"
msgstr ":attr:`%zi`"

#: ../../c-api/unicode.rst:482
msgid "Exactly equivalent to ``printf(\"%zi\")``."
msgstr "C の ``printf(\"%zi\")`` と全く同じ。"

#: ../../c-api/unicode.rst:485
msgid ":attr:`%zu`"
msgstr ":attr:`%zu`"

#: ../../c-api/unicode.rst:485
msgid "size_t"
msgstr "size_t"

#: ../../c-api/unicode.rst:485
msgid "Exactly equivalent to ``printf(\"%zu\")``."
msgstr "C の ``printf(\"%zu\")`` と全く同じ。"

#: ../../c-api/unicode.rst:488
msgid ":attr:`%i`"
msgstr ":attr:`%i`"

#: ../../c-api/unicode.rst:488
msgid "Exactly equivalent to ``printf(\"%i\")``."
msgstr "C の ``printf(\"%i\")`` と全く同じ。"

#: ../../c-api/unicode.rst:491
msgid ":attr:`%x`"
msgstr ":attr:`%x`"

#: ../../c-api/unicode.rst:491
msgid "Exactly equivalent to ``printf(\"%x\")``."
msgstr "C の ``printf(\"%x\")`` と全く同じ。"

#: ../../c-api/unicode.rst:494
msgid ":attr:`%s`"
msgstr ":attr:`%s`"

#: ../../c-api/unicode.rst:494
msgid "char\\*"
msgstr "char\\*"

#: ../../c-api/unicode.rst:494
msgid "A null-terminated C character array."
msgstr "null で終端された C の文字列。"

#: ../../c-api/unicode.rst:497
msgid ":attr:`%p`"
msgstr ":attr:`%p`"

#: ../../c-api/unicode.rst:497
msgid "void\\*"
msgstr "void\\*"

#: ../../c-api/unicode.rst:497
msgid ""
"The hex representation of a C pointer. Mostly equivalent to "
"``printf(\"%p\")`` except that it is guaranteed to start with the literal "
"``0x`` regardless of what the platform's ``printf`` yields."
msgstr "C ポインタの 16 進表記。``printf(\"%p\")`` とほとんど同じだが、プラットフォームにおける ``printf`` の定義に関わりなく先頭にリテラル ``0x`` が付きます。"

#: ../../c-api/unicode.rst:505
msgid ":attr:`%A`"
msgstr ":attr:`%A`"

#: ../../c-api/unicode.rst:505 ../../c-api/unicode.rst:508
#: ../../c-api/unicode.rst:517 ../../c-api/unicode.rst:520
msgid "PyObject\\*"
msgstr "PyObject\\*"

#: ../../c-api/unicode.rst:505
msgid "The result of calling :func:`ascii`."
msgstr ":func:`ascii` の戻り値。"

#: ../../c-api/unicode.rst:508
msgid ":attr:`%U`"
msgstr ":attr:`%U`"

#: ../../c-api/unicode.rst:508
msgid "A unicode object."
msgstr "unicode オブジェクト。"

#: ../../c-api/unicode.rst:510
msgid ":attr:`%V`"
msgstr ":attr:`%V`"

#: ../../c-api/unicode.rst:510
msgid "PyObject\\*, char \\*"
msgstr "PyObject\\*, char \\*"

#: ../../c-api/unicode.rst:510
msgid ""
"A unicode object (which may be *NULL*) and a null-terminated C character "
"array as a second parameter (which will be used, if the first parameter is "
"*NULL*)."
msgstr "unicode オブジェクト(*NULL* でも良い)と、 2つめの引数として NUL 終端の C 文字列 (2つめの引数は1つめの引数が *NULL* だった時にのみ利用されます)。"

#: ../../c-api/unicode.rst:517
msgid ":attr:`%S`"
msgstr ":attr:`%S`"

#: ../../c-api/unicode.rst:517
msgid "The result of calling :c:func:`PyObject_Str`."
msgstr ":c:func:`PyObject_Str` の戻り値。"

#: ../../c-api/unicode.rst:520
msgid ":attr:`%R`"
msgstr ":attr:`%R`"

#: ../../c-api/unicode.rst:520
msgid "The result of calling :c:func:`PyObject_Repr`."
msgstr ":c:func:`PyObject_Repr` の戻り値。"

#: ../../c-api/unicode.rst:524
msgid ""
"An unrecognized format character causes all the rest of the format string to"
" be copied as-is to the result string, and any extra arguments discarded."
msgstr "識別できない書式指定文字があった場合、残りの書式文字列はそのまま出力文字列にコピーされ、残りの引数は無視されます。"

#: ../../c-api/unicode.rst:529
msgid ""
"The `\"%lld\"` and `\"%llu\"` format specifiers are only available when "
":const:`HAVE_LONG_LONG` is defined."
msgstr "`\"%lld\"` と `\"%llu\"` 書式指定文字は :const:`HAVE_LONG_LONG` が定義されている時だけ利用できます。"

#: ../../c-api/unicode.rst:533
msgid ""
"The width formatter unit is number of characters rather than bytes. The "
"precision formatter unit is number of bytes for ``\"%s\"`` and ``\"%V\"`` "
"(if the ``PyObject*`` argument is NULL), and a number of characters for "
"``\"%A\"``, ``\"%U\"``, ``\"%S\"``, ``\"%R\"`` and ``\"%V\"`` (if the "
"``PyObject*`` argument is not NULL)."
msgstr ""

#: ../../c-api/unicode.rst:539
msgid "Support for ``\"%lld\"`` and ``\"%llu\"`` added."
msgstr ""

#: ../../c-api/unicode.rst:542
msgid "Support for ``\"%li\"``, ``\"%lli\"`` and ``\"%zi\"`` added."
msgstr ""

#: ../../c-api/unicode.rst:545
msgid ""
"Support width and precision formatter for ``\"%s\"``, ``\"%A\"``, "
"``\"%U\"``, ``\"%V\"``, ``\"%S\"``, ``\"%R\"`` added."
msgstr ""

#: ../../c-api/unicode.rst:552
msgid ""
"Identical to :c:func:`PyUnicode_FromFormat` except that it takes exactly two"
" arguments."
msgstr "ちょうど２つの引数を取ることを除いて、 :c:func:`PyUnicode_FromFormat` と同じです。"

#: ../../c-api/unicode.rst:559
msgid "Decode an encoded object *obj* to a Unicode object."
msgstr ""

#: ../../c-api/unicode.rst:561
msgid ""
":class:`bytes`, :class:`bytearray` and other :term:`bytes-like objects "
"<bytes-like object>` are decoded according to the given *encoding* and using"
" the error handling defined by *errors*. Both can be *NULL* to have the "
"interface use the default values (see :ref:`builtincodecs` for details)."
msgstr ""

#: ../../c-api/unicode.rst:567
msgid ""
"All other objects, including Unicode objects, cause a :exc:`TypeError` to be"
" set."
msgstr "その他のUnicodeオブジェクトを含むオブジェクトは :exc:`TypeError` 例外を引き起こします。"

#: ../../c-api/unicode.rst:570
msgid ""
"The API returns *NULL* if there was an error.  The caller is responsible for"
" decref'ing the returned objects."
msgstr "この API は、エラーが生じたときには *NULL* を返します。呼び出し側は返されたオブジェクトに対し参照カウンタを 1 つ減らす (decref) する責任があります。"

#: ../../c-api/unicode.rst:576
msgid "Return the length of the Unicode object, in code points."
msgstr ""

#: ../../c-api/unicode.rst:587
msgid ""
"Copy characters from one Unicode object into another.  This function "
"performs character conversion when necessary and falls back to "
":c:func:`memcpy` if possible.  Returns ``-1`` and sets an exception on "
"error, otherwise returns the number of copied characters."
msgstr ""

#: ../../c-api/unicode.rst:598
msgid ""
"Fill a string with a character: write *fill_char* into "
"``unicode[start:start+length]``."
msgstr ""

#: ../../c-api/unicode.rst:601
msgid ""
"Fail if *fill_char* is bigger than the string maximum character, or if the "
"string has more than 1 reference."
msgstr ""

#: ../../c-api/unicode.rst:604
msgid ""
"Return the number of written character, or return ``-1`` and raise an "
"exception on error."
msgstr ""

#: ../../c-api/unicode.rst:613
msgid ""
"Write a character to a string.  The string must have been created through "
":c:func:`PyUnicode_New`.  Since Unicode strings are supposed to be "
"immutable, the string must not be shared, or have been hashed yet."
msgstr ""

#: ../../c-api/unicode.rst:617
msgid ""
"This function checks that *unicode* is a Unicode object, that the index is "
"not out of bounds, and that the object can be modified safely (i.e. that it "
"its reference count is one)."
msgstr ""

#: ../../c-api/unicode.rst:626
msgid ""
"Read a character from a string.  This function checks that *unicode* is a "
"Unicode object and the index is not out of bounds, in contrast to the macro "
"version :c:func:`PyUnicode_READ_CHAR`."
msgstr ""

#: ../../c-api/unicode.rst:636
msgid ""
"Return a substring of *str*, from character index *start* (included) to "
"character index *end* (excluded).  Negative indices are not supported."
msgstr ""

#: ../../c-api/unicode.rst:645
msgid ""
"Copy the string *u* into a UCS4 buffer, including a null character, if "
"*copy_null* is set.  Returns *NULL* and sets an exception on error (in "
"particular, a :exc:`SystemError` if *buflen* is smaller than the length of "
"*u*).  *buffer* is returned on success."
msgstr ""

#: ../../c-api/unicode.rst:655
msgid ""
"Copy the string *u* into a new UCS4 buffer that is allocated using "
":c:func:`PyMem_Malloc`.  If this fails, *NULL* is returned with a "
":exc:`MemoryError` set.  The returned buffer always has an extra null code "
"point appended."
msgstr ""

#: ../../c-api/unicode.rst:664
msgid "Deprecated Py_UNICODE APIs"
msgstr "廃止予定の Py_UNICODE API群"

#: ../../c-api/unicode.rst:667
msgid "Deprecated since version 3.3, will be removed in version 4.0."
msgstr "3.3 より非推奨となりました。4.0 では削除される予定です。"

#: ../../c-api/unicode.rst:668
msgid ""
"These API functions are deprecated with the implementation of :pep:`393`. "
"Extension modules can continue using them, as they will not be removed in "
"Python 3.x, but need to be aware that their use can now cause performance "
"and memory hits."
msgstr "これらのAPI 関数は :pep:`393` の実装により廃止予定です。Python 3.x では削除されないため、拡張モジュールはこれらの関数を引き続き使えますが、これらの関数の使用はパフォーマンスとメモリに影響があることを念頭に置いてください。"

#: ../../c-api/unicode.rst:675
msgid ""
"Create a Unicode object from the Py_UNICODE buffer *u* of the given size. "
"*u* may be *NULL* which causes the contents to be undefined. It is the "
"user's responsibility to fill in the needed data.  The buffer is copied into"
" the new object."
msgstr ""

#: ../../c-api/unicode.rst:680
msgid ""
"If the buffer is not *NULL*, the return value might be a shared object. "
"Therefore, modification of the resulting Unicode object is only allowed when"
" *u* is *NULL*."
msgstr ""

#: ../../c-api/unicode.rst:684
msgid ""
"If the buffer is *NULL*, :c:func:`PyUnicode_READY` must be called once the "
"string content has been filled before using any of the access macros such as"
" :c:func:`PyUnicode_KIND`."
msgstr ""

#: ../../c-api/unicode.rst:688
msgid ""
"Please migrate to using :c:func:`PyUnicode_FromKindAndData`, "
":c:func:`PyUnicode_FromWideChar` or :c:func:`PyUnicode_New`."
msgstr ""

#: ../../c-api/unicode.rst:694
msgid ""
"Return a read-only pointer to the Unicode object's internal "
":c:type:`Py_UNICODE` buffer, or *NULL* on error. This will create the "
":c:type:`Py_UNICODE*` representation of the object if it is not yet "
"available. The buffer is always terminated with an extra null code point. "
"Note that the resulting :c:type:`Py_UNICODE` string may also contain "
"embedded null code points, which would cause the string to be truncated when"
" used in most C functions."
msgstr ""

#: ../../c-api/unicode.rst:702
msgid ""
"Please migrate to using :c:func:`PyUnicode_AsUCS4`, "
":c:func:`PyUnicode_AsWideChar`, :c:func:`PyUnicode_ReadChar` or similar new "
"APIs."
msgstr ""

#: ../../c-api/unicode.rst:709
msgid ""
"Create a Unicode object by replacing all decimal digits in "
":c:type:`Py_UNICODE` buffer of the given *size* by ASCII digits 0--9 "
"according to their decimal value.  Return *NULL* if an exception occurs."
msgstr ""

#: ../../c-api/unicode.rst:716
msgid ""
"Like :c:func:`PyUnicode_AsUnicode`, but also saves the :c:func:`Py_UNICODE` "
"array length (excluding the extra null terminator) in *size*. Note that the "
"resulting :c:type:`Py_UNICODE*` string may contain embedded null code "
"points, which would cause the string to be truncated when used in most C "
"functions."
msgstr ""

#: ../../c-api/unicode.rst:727
msgid ""
"Create a copy of a Unicode string ending with a null code point. Return "
"*NULL* and raise a :exc:`MemoryError` exception on memory allocation "
"failure, otherwise return a new allocated buffer (use :c:func:`PyMem_Free` "
"to free the buffer). Note that the resulting :c:type:`Py_UNICODE*` string "
"may contain embedded null code points, which would cause the string to be "
"truncated when used in most C functions."
msgstr ""

#: ../../c-api/unicode.rst:736
msgid ""
"Please migrate to using :c:func:`PyUnicode_AsUCS4Copy` or similar new APIs."
msgstr ""

#: ../../c-api/unicode.rst:741
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation, in "
"code units (this includes surrogate pairs as 2 units)."
msgstr ""

#: ../../c-api/unicode.rst:744
msgid "Please migrate to using :c:func:`PyUnicode_GetLength`."
msgstr ":c:func:`PyUnicode_GetLength` を使用するように移行してください。"

#: ../../c-api/unicode.rst:749
msgid ""
"Copy an instance of a Unicode subtype to a new true Unicode object if "
"necessary. If *obj* is already a true Unicode object (not a subtype), return"
" the reference with incremented refcount."
msgstr ""

#: ../../c-api/unicode.rst:753
msgid ""
"Objects other than Unicode or its subtypes will cause a :exc:`TypeError`."
msgstr ""

#: ../../c-api/unicode.rst:757
msgid "Locale Encoding"
msgstr ""

#: ../../c-api/unicode.rst:759
msgid ""
"The current locale encoding can be used to decode text from the operating "
"system."
msgstr ""

#: ../../c-api/unicode.rst:766
msgid ""
"Decode a string from the current locale encoding. The supported error "
"handlers are ``\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The "
"decoder uses ``\"strict\"`` error handler if *errors* is ``NULL``.  *str* "
"must end with a null character but cannot contain embedded null characters."
msgstr ""

#: ../../c-api/unicode.rst:772
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` to decode a string from "
":c:data:`Py_FileSystemDefaultEncoding` (the locale encoding read at Python "
"startup)."
msgstr ""

#: ../../c-api/unicode.rst:778 ../../c-api/unicode.rst:857
msgid "The :c:func:`Py_DecodeLocale` function."
msgstr ""

#: ../../c-api/unicode.rst:785
msgid ""
"Similar to :c:func:`PyUnicode_DecodeLocaleAndSize`, but compute the string "
"length using :c:func:`strlen`."
msgstr ""

#: ../../c-api/unicode.rst:793
msgid ""
"Encode a Unicode object to the current locale encoding. The supported error "
"handlers are ``\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The "
"encoder uses ``\"strict\"`` error handler if *errors* is ``NULL``. Return a "
":class:`bytes` object. *unicode* cannot contain embedded null characters."
msgstr ""

#: ../../c-api/unicode.rst:799
msgid ""
"Use :c:func:`PyUnicode_EncodeFSDefault` to encode a string to "
":c:data:`Py_FileSystemDefaultEncoding` (the locale encoding read at Python "
"startup)."
msgstr ""

#: ../../c-api/unicode.rst:805 ../../c-api/unicode.rst:893
msgid "The :c:func:`Py_EncodeLocale` function."
msgstr ""

#: ../../c-api/unicode.rst:811
msgid "File System Encoding"
msgstr ""

#: ../../c-api/unicode.rst:813
msgid ""
"To encode and decode file names and other environment strings, "
":c:data:`Py_FileSystemEncoding` should be used as the encoding, and "
"``\"surrogateescape\"`` should be used as the error handler (:pep:`383`). To"
" encode file names during argument parsing, the ``\"O&\"`` converter should "
"be used, passing :c:func:`PyUnicode_FSConverter` as the conversion function:"
msgstr ""

#: ../../c-api/unicode.rst:821
msgid ""
"ParseTuple converter: encode :class:`str` objects to :class:`bytes` using "
":c:func:`PyUnicode_EncodeFSDefault`; :class:`bytes` objects are output as-"
"is. *result* must be a :c:type:`PyBytesObject*` which must be released when "
"it is no longer used."
msgstr ""

#: ../../c-api/unicode.rst:829
msgid ""
"To decode file names during argument parsing, the ``\"O&\"`` converter "
"should be used, passing :c:func:`PyUnicode_FSDecoder` as the conversion "
"function:"
msgstr ""

#: ../../c-api/unicode.rst:834
msgid ""
"ParseTuple converter: decode :class:`bytes` objects to :class:`str` using "
":c:func:`PyUnicode_DecodeFSDefaultAndSize`; :class:`str` objects are output "
"as-is. *result* must be a :c:type:`PyUnicodeObject*` which must be released "
"when it is no longer used."
msgstr ""

#: ../../c-api/unicode.rst:844
msgid ""
"Decode a string using :c:data:`Py_FileSystemDefaultEncoding` and the "
"``\"surrogateescape\"`` error handler, or ``\"strict\"`` on Windows."
msgstr ""

#: ../../c-api/unicode.rst:847 ../../c-api/unicode.rst:868
#: ../../c-api/unicode.rst:884
msgid ""
"If :c:data:`Py_FileSystemDefaultEncoding` is not set, fall back to the "
"locale encoding."
msgstr ""

#: ../../c-api/unicode.rst:850
msgid ""
":c:data:`Py_FileSystemDefaultEncoding` is initialized at startup from the "
"locale encoding and cannot be modified later. If you need to decode a string"
" from the current locale encoding, use "
":c:func:`PyUnicode_DecodeLocaleAndSize`."
msgstr ""

#: ../../c-api/unicode.rst:859 ../../c-api/unicode.rst:873
msgid "Use ``\"strict\"`` error handler on Windows."
msgstr ""

#: ../../c-api/unicode.rst:865
msgid ""
"Decode a null-terminated string using :c:data:`Py_FileSystemDefaultEncoding`"
" and the ``\"surrogateescape\"`` error handler, or ``\"strict\"`` on "
"Windows."
msgstr ""

#: ../../c-api/unicode.rst:871
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` if you know the string "
"length."
msgstr ""

#: ../../c-api/unicode.rst:879
msgid ""
"Encode a Unicode object to :c:data:`Py_FileSystemDefaultEncoding` with the "
"``\"surrogateescape\"`` error handler, or ``\"strict\"`` on Windows, and "
"return :class:`bytes`. Note that the resulting :class:`bytes` object may "
"contain null bytes."
msgstr ""

#: ../../c-api/unicode.rst:887
msgid ""
":c:data:`Py_FileSystemDefaultEncoding` is initialized at startup from the "
"locale encoding and cannot be modified later. If you need to encode a string"
" to the current locale encoding, use :c:func:`PyUnicode_EncodeLocale`."
msgstr ""

#: ../../c-api/unicode.rst:899
msgid "wchar_t Support"
msgstr "wchar_t サポート"

#: ../../c-api/unicode.rst:901
msgid ":c:type:`wchar_t` support for platforms which support it:"
msgstr ":c:type:`wchar_t` をサポートするプラットフォームでの wchar_t サポート:"

#: ../../c-api/unicode.rst:905
msgid ""
"Create a Unicode object from the :c:type:`wchar_t` buffer *w* of the given "
"*size*. Passing ``-1`` as the *size* indicates that the function must itself"
" compute the length, using wcslen. Return *NULL* on failure."
msgstr ""

#: ../../c-api/unicode.rst:913
msgid ""
"Copy the Unicode object contents into the :c:type:`wchar_t` buffer *w*.  At "
"most *size* :c:type:`wchar_t` characters are copied (excluding a possibly "
"trailing null termination character).  Return the number of "
":c:type:`wchar_t` characters copied or ``-1`` in case of an error.  Note "
"that the resulting :c:type:`wchar_t*` string may or may not be null-"
"terminated.  It is the responsibility of the caller to make sure that the "
":c:type:`wchar_t*` string is null-terminated in case this is required by the"
" application. Also, note that the :c:type:`wchar_t*` string might contain "
"null characters, which would cause the string to be truncated when used with"
" most C functions."
msgstr ""

#: ../../c-api/unicode.rst:926
msgid ""
"Convert the Unicode object to a wide character string. The output string "
"always ends with a null character. If *size* is not *NULL*, write the number"
" of wide characters (excluding the trailing null termination character) into"
" *\\*size*."
msgstr ""

#: ../../c-api/unicode.rst:931
msgid ""
"Returns a buffer allocated by :c:func:`PyMem_Alloc` (use "
":c:func:`PyMem_Free` to free it) on success. On error, returns *NULL*, "
"*\\*size* is undefined and raises a :exc:`MemoryError`. Note that the "
"resulting :c:type:`wchar_t` string might contain null characters, which "
"would cause the string to be truncated when used with most C functions."
msgstr ""

#: ../../c-api/unicode.rst:941
msgid "UCS4 Support"
msgstr ""

#: ../../c-api/unicode.rst:956
msgid ""
"These utility functions work on strings of :c:type:`Py_UCS4` characters and "
"otherwise behave like the C standard library functions with the same name."
msgstr ""

#: ../../c-api/unicode.rst:963
msgid "Built-in Codecs"
msgstr "組み込み codec (built-in codec)"

#: ../../c-api/unicode.rst:965
msgid ""
"Python provides a set of built-in codecs which are written in C for speed. "
"All of these codecs are directly usable via the following functions."
msgstr "Python には、処理速度を高めるために C で書かれた codec が揃えてあります。これら全ての codec は以下の関数を介して直接利用できます。"

#: ../../c-api/unicode.rst:968
msgid ""
"Many of the following APIs take two arguments encoding and errors, and they "
"have the same semantics as the ones of the built-in :func:`str` string "
"object constructor."
msgstr "以下の API の多くが、 *encoding* と *errors* という二つの引数をとります。これらのパラメータは、組み込みの文字列コンストラクタである :func:`str` における同名のパラメータと同じ意味を持ちます。"

#: ../../c-api/unicode.rst:972
msgid ""
"Setting encoding to *NULL* causes the default encoding to be used which is "
"ASCII.  The file system calls should use :c:func:`PyUnicode_FSConverter` for"
" encoding file names. This uses the variable "
":c:data:`Py_FileSystemDefaultEncoding` internally. This variable should be "
"treated as read-only: on some systems, it will be a pointer to a static "
"string, on others, it will change at run-time (such as when the application "
"invokes setlocale)."
msgstr ""

#: ../../c-api/unicode.rst:980
msgid ""
"Error handling is set by errors which may also be set to *NULL* meaning to "
"use the default handling defined for the codec.  Default error handling for "
"all built-in codecs is \"strict\" (:exc:`ValueError` is raised)."
msgstr "*errors* で指定するエラー処理もまた、 *NULL* を指定できます。 *NULL* を指定すると、codec で定義されているデフォルト処理の使用を意味します。全ての組み込み codec で、デフォルトのエラー処理は \"strict\" (:exc:`ValueError` を送出する) になっています。"

#: ../../c-api/unicode.rst:984
msgid ""
"The codecs all use a similar interface.  Only deviation from the following "
"generic ones are documented for simplicity."
msgstr "個々の codec は全て同様のインタフェースを使っています。個別の codec の説明では、説明を簡単にするために以下の汎用のインタフェースとの違いだけを説明しています。"

#: ../../c-api/unicode.rst:989
msgid "Generic Codecs"
msgstr "汎用 codec"

#: ../../c-api/unicode.rst:991
msgid "These are the generic codec APIs:"
msgstr "以下は汎用 codec の API です:"

#: ../../c-api/unicode.rst:997
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *s*. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the :func:`str` built-in function.  The codec to be used is looked "
"up using the Python codec registry.  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1007
msgid ""
"Encode a Unicode object and return the result as Python bytes object. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the Unicode :meth:`~str.encode` method. The codec to be used is "
"looked up using the Python codec registry. Return *NULL* if an exception was"
" raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1017
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer *s* of the given *size* and return a "
"Python bytes object.  *encoding* and *errors* have the same meaning as the "
"parameters of the same name in the Unicode :meth:`~str.encode` method.  The "
"codec to be used is looked up using the Python codec registry.  Return "
"*NULL* if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1025 ../../c-api/unicode.rst:1276
msgid ""
"Deprecated since version 3.3, will be removed in version 4.0: Part of the "
"old-style Py_UNICODE API; please migrate to using "
"PyUnicode_AsEncodedString()."
msgstr "バージョン 3.3 で非推奨、バージョン 4.0 で削除予定: 古いスタイルの Py_UNICODE API の一部です; PyUnicode_AsEncodedString() を使用するように移行してください。"

#: ../../c-api/unicode.rst:1025 ../../c-api/unicode.rst:1276
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsEncodedString`."
msgstr "古いスタイルの :c:type:`Py_UNICODE` APIの一部です; :c:func:`PyUnicode_AsEncodedString` を使用するように移行してください。"

#: ../../c-api/unicode.rst:1029
msgid "UTF-8 Codecs"
msgstr "UTF-8 Codecs"

#: ../../c-api/unicode.rst:1031
msgid "These are the UTF-8 codec APIs:"
msgstr "以下は UTF-8 codec の APIです:"

#: ../../c-api/unicode.rst:1036
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-8 encoded string"
" *s*. Return *NULL* if an exception was raised by the codec."
msgstr "UTF-8 でエンコードされた *size* バイトの文字列 *s* から Unicode オブジェクトを生成します。codec が例外を送出した場合には *NULL* を返します。"

#: ../../c-api/unicode.rst:1043
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF8`. If "
"*consumed* is not *NULL*, trailing incomplete UTF-8 byte sequences will not "
"be treated as an error. Those bytes will not be decoded and the number of "
"bytes that have been decoded will be stored in *consumed*."
msgstr "*consumed* が *NULL* の場合、 :c:func:`PyUnicode_DecodeUTF8` と同じように動作します。 *consumed* が *NULL* でない場合、 :c:func:`PyUnicode_DecodeUTF8Stateful` は末尾の不完全な UTF-8 バイト列をエラーとみなしません。これらのバイト列はデコードされず、デコードされたバイト数を *consumed* に返します。"

#: ../../c-api/unicode.rst:1051
msgid ""
"Encode a Unicode object using UTF-8 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr "UTF-8 で Unicode オブジェクトをエンコードし、結果を Python バイト列オブジェクトとして返します。エラー処理は \"strict\" です。 codec が例外を送出した場合には *NULL* を返します。"

#: ../../c-api/unicode.rst:1058
msgid ""
"Return a pointer to the UTF-8 encoding of the Unicode object, and store the "
"size of the encoded representation (in bytes) in *size*.  The *size* "
"argument can be *NULL*; in this case no size will be stored.  The returned "
"buffer always has an extra null byte appended (not included in *size*), "
"regardless of whether there are any other null code points."
msgstr ""

#: ../../c-api/unicode.rst:1064
msgid ""
"In the case of an error, *NULL* is returned with an exception set and no "
"*size* is stored."
msgstr ""

#: ../../c-api/unicode.rst:1067
msgid ""
"This caches the UTF-8 representation of the string in the Unicode object, "
"and subsequent calls will return a pointer to the same buffer.  The caller "
"is not responsible for deallocating the buffer."
msgstr ""

#: ../../c-api/unicode.rst:1076
msgid "As :c:func:`PyUnicode_AsUTF8AndSize`, but does not store the size."
msgstr ""

#: ../../c-api/unicode.rst:1083
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer *s* of the given *size* using UTF-8 "
"and return a Python bytes object.  Return *NULL* if an exception was raised "
"by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1090
msgid ""
"Deprecated since version 3.3, will be removed in version 4.0: Part of the "
"old-style Py_UNICODE API; please migrate to using PyUnicode_AsUTF8String(), "
"PyUnicode_AsUTF8AndSize() or PyUnicode_AsEncodedString()."
msgstr ""

#: ../../c-api/unicode.rst:1090
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsUTF8String`, :c:func:`PyUnicode_AsUTF8AndSize` or "
":c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1094
msgid "UTF-32 Codecs"
msgstr "UTF-32 Codecs"

#: ../../c-api/unicode.rst:1096
msgid "These are the UTF-32 codec APIs:"
msgstr "以下は UTF-32 codec API です:"

#: ../../c-api/unicode.rst:1102
msgid ""
"Decode *size* bytes from a UTF-32 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-*NULL*) defines the error "
"handling. It defaults to \"strict\"."
msgstr "UTF-32 でエンコードされたバッファ文字列から *size* バイトをデコードし、 Unicodeオブジェクトとして返します。 *errors* は (*NULL* でないなら) エラーハンドラを指定します。デフォルトは \"strict\" です。"

#: ../../c-api/unicode.rst:1106 ../../c-api/unicode.rst:1179
msgid ""
"If *byteorder* is non-*NULL*, the decoder starts decoding using the given "
"byte order::"
msgstr "*byteorder* が *NULL* でない時、デコーダは与えられたバイトオーダーでデコードを開始します。 ::"

#: ../../c-api/unicode.rst:1113
msgid ""
"If ``*byteorder`` is zero, and the first four bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output."
msgstr "``*byteorder`` が 0 で、入力データの最初の 4 バイトが byte order mark (BOM) ならば、デコーダはこのバイトオーダーに切り替え、BOM は結果の Unicode 文字列にコピーされません。 ``*byteorder`` が ``-1`` または ``1`` ならば、全ての byte order mark は出力にコピーされます。"

#: ../../c-api/unicode.rst:1118 ../../c-api/unicode.rst:1192
msgid ""
"After completion, *\\*byteorder* is set to the current byte order at the end"
" of input data."
msgstr "デコードを完了した後、入力データの終端に来た時点でのバイトオーダーを *\\*byteorder* にセットします。"

#: ../../c-api/unicode.rst:1121 ../../c-api/unicode.rst:1195
msgid "If *byteorder* is *NULL*, the codec starts in native order mode."
msgstr "*byteorder* が *NULL* のとき、 codec は native order モードで開始します。"

#: ../../c-api/unicode.rst:1123 ../../c-api/unicode.rst:1159
#: ../../c-api/unicode.rst:1197 ../../c-api/unicode.rst:1234
msgid "Return *NULL* if an exception was raised by the codec."
msgstr "codec が例外を発生させたときは *NULL* を返します。"

#: ../../c-api/unicode.rst:1129
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF32`. If "
"*consumed* is not *NULL*, :c:func:`PyUnicode_DecodeUTF32Stateful` will not "
"treat trailing incomplete UTF-32 byte sequences (such as a number of bytes "
"not divisible by four) as an error. Those bytes will not be decoded and the "
"number of bytes that have been decoded will be stored in *consumed*."
msgstr "*consumed* が *NULL* のとき、 :c:func:`PyUnicode_DecodeUTF32` と同じように振る舞います。 *consumed* が *NULL* でないとき、 :c:func:`PyUnicode_DecodeUTF32Stateful` は末尾の不完全な (4 で割り切れない長さのバイト列などの) UTF-32 バイト列をエラーとして扱いません。末尾の不完全なバイト列はデコードされず、デコードされたバイト数が *consumed* に格納されます。"

#: ../../c-api/unicode.rst:1138
msgid ""
"Return a Python byte string using the UTF-32 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return *NULL* if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1146
msgid ""
"Return a Python bytes object holding the UTF-32 encoded value of the Unicode"
" data in *s*.  Output is written according to the following byte order::"
msgstr "*s* の Unicode データを UTF-32 にエンコードし、その値を Python の bytes オブジェクトに格納して返します。出力は以下のバイトオーダーで従って書かれます。 ::"

#: ../../c-api/unicode.rst:1153 ../../c-api/unicode.rst:1227
msgid ""
"If byteorder is ``0``, the output string will always start with the Unicode "
"BOM mark (U+FEFF). In the other two modes, no BOM mark is prepended."
msgstr "byteorder が ``0`` のとき、出力文字列は常に Unicode BOM マーク (U+FEFF) で始まります。それ以外の2つのモードでは、先頭に BOM マークは出力されません。"

#: ../../c-api/unicode.rst:1156
msgid ""
"If *Py_UNICODE_WIDE* is not defined, surrogate pairs will be output as a "
"single code point."
msgstr "*Py_UNICODE_WIDE* が定義されていない場合は、サロゲートペアを 1 つのコードポイントとして出力します。"

#: ../../c-api/unicode.rst:1163
msgid ""
"Deprecated since version 3.3, will be removed in version 4.0: Part of the "
"old-style Py_UNICODE API; please migrate to using PyUnicode_AsUTF32String() "
"or PyUnicode_AsEncodedString()."
msgstr ""

#: ../../c-api/unicode.rst:1163
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsUTF32String` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1167
msgid "UTF-16 Codecs"
msgstr "UTF-16 Codecs"

#: ../../c-api/unicode.rst:1169
msgid "These are the UTF-16 codec APIs:"
msgstr "以下は UTF-16 codec の APIです:"

#: ../../c-api/unicode.rst:1175
msgid ""
"Decode *size* bytes from a UTF-16 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-*NULL*) defines the error "
"handling. It defaults to \"strict\"."
msgstr "UTF-16 でエンコードされたバッファ *s* から *size* バイトだけデコードして、結果を Unicode オブジェクトで返します。 *errors* は (*NULL* でない場合) エラー処理方法を定義します。デフォルト値は \"strict\" です。"

#: ../../c-api/unicode.rst:1186
msgid ""
"If ``*byteorder`` is zero, and the first two bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output (where it will "
"result in either a ``\\ufeff`` or a ``\\ufffe`` character)."
msgstr "``*byteorder`` が 0 で、入力データの先頭2バイトがバイトオーダーマーク (BOM) だった場合、デコーダは BOM が示すバイトオーダーに切り替え、そのBOMを結果の Unicode 文字列にコピーしません。 ``*byteorder`` が ``-1`` か ``1`` だった場合、すべてのBOMは出力へコピーされます (出力では ``\\ufeff`` か ``\\ufffe`` のどちらかになるでしょう)。"

#: ../../c-api/unicode.rst:1203
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF16`. If "
"*consumed* is not *NULL*, :c:func:`PyUnicode_DecodeUTF16Stateful` will not "
"treat trailing incomplete UTF-16 byte sequences (such as an odd number of "
"bytes or a split surrogate pair) as an error. Those bytes will not be "
"decoded and the number of bytes that have been decoded will be stored in "
"*consumed*."
msgstr "*consumed* が *NULL* の場合、 :c:func:`PyUnicode_DecodeUTF16` と同じように動作します。 *consumed* が *NULL* でない場合、 :c:func:`PyUnicode_DecodeUTF16Stateful` は末尾の不完全な UTF-16 バイト列 (奇数長のバイト列や分割されたサロゲートペア) をエラーとみなしません。これらのバイト列はデコードされず、デコードされたバイト数を *consumed* に返します。"

#: ../../c-api/unicode.rst:1212
msgid ""
"Return a Python byte string using the UTF-16 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return *NULL* if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1220
msgid ""
"Return a Python bytes object holding the UTF-16 encoded value of the Unicode"
" data in *s*.  Output is written according to the following byte order::"
msgstr ""

#: ../../c-api/unicode.rst:1230
msgid ""
"If *Py_UNICODE_WIDE* is defined, a single :c:type:`Py_UNICODE` value may get"
" represented as a surrogate pair. If it is not defined, each "
":c:type:`Py_UNICODE` values is interpreted as a UCS-2 character."
msgstr ""

#: ../../c-api/unicode.rst:1238
msgid ""
"Deprecated since version 3.3, will be removed in version 4.0: Part of the "
"old-style Py_UNICODE API; please migrate to using PyUnicode_AsUTF16String() "
"or PyUnicode_AsEncodedString()."
msgstr ""

#: ../../c-api/unicode.rst:1238
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsUTF16String` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1242
msgid "UTF-7 Codecs"
msgstr "UTF-7 Codecs"

#: ../../c-api/unicode.rst:1244
msgid "These are the UTF-7 codec APIs:"
msgstr "以下は UTF-7 codec の API です:"

#: ../../c-api/unicode.rst:1249
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-7 encoded string"
" *s*.  Return *NULL* if an exception was raised by the codec."
msgstr "UTF-7 でエンコードされた *size* バイトの文字列 *s* をデコードして Unicode オブジェクトを作成します。 codec が例外を発生させたときは *NULL* を返します。"

#: ../../c-api/unicode.rst:1256
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF7`.  If "
"*consumed* is not *NULL*, trailing incomplete UTF-7 base-64 sections will "
"not be treated as an error.  Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr "*consumed* が *NULL* のとき、 :c:func:`PyUnicode_DecodeUTF7` と同じように動作します。 *consumed* が *NULL* でないとき、末尾の不完全な UTF-7 base-64 部分をエラーとしません。不完全な部分のバイト列はデコードせずに、デコードしたバイト数を *consumed* に格納します。"

#: ../../c-api/unicode.rst:1265
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given size using UTF-7 and "
"return a Python bytes object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr "与えられたサイズの :c:type:`Py_UNICODE` バッファを UTF-7 でエンコードして、 Python の bytes オブジェクトとして返します。 codec が例外を発生させたときは *NULL* を返します。"

#: ../../c-api/unicode.rst:1269
msgid ""
"If *base64SetO* is nonzero, \"Set O\" (punctuation that has no otherwise "
"special meaning) will be encoded in base-64.  If *base64WhiteSpace* is "
"nonzero, whitespace will be encoded in base-64.  Both are set to zero for "
"the Python \"utf-7\" codec."
msgstr "*base64SetO* がゼロでないとき、 \"Set O\" 文字 (他の場合には何も特別な意味を持たない句読点) を base-64 エンコードします。 *base64WhiteSpace* がゼロでないとき、空白文字を base-64 エンコードします。 Python の \"utf-7\" codec では、両方ともゼロに設定されています。"

#: ../../c-api/unicode.rst:1280
msgid "Unicode-Escape Codecs"
msgstr "Unicode-Escape Codecs"

#: ../../c-api/unicode.rst:1282
msgid "These are the \"Unicode Escape\" codec APIs:"
msgstr "以下は \"Unicode Escape\" codec の API です:"

#: ../../c-api/unicode.rst:1288
msgid ""
"Create a Unicode object by decoding *size* bytes of the Unicode-Escape "
"encoded string *s*.  Return *NULL* if an exception was raised by the codec."
msgstr "Unicode-Escape でエンコードされた *size* バイトの文字列 *s* から Unicode オブジェクトを生成します。codec が例外を送出した場合には *NULL* を返します。"

#: ../../c-api/unicode.rst:1294
msgid ""
"Encode a Unicode object using Unicode-Escape and return the result as a "
"bytes object.  Error handling is \"strict\".  Return *NULL* if an exception "
"was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1301
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Unicode-"
"Escape and return a bytes object.  Return *NULL* if an exception was raised "
"by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1306
msgid ""
"Deprecated since version 3.3, will be removed in version 4.0: Part of the "
"old-style Py_UNICODE API; please migrate to using "
"PyUnicode_AsUnicodeEscapeString()."
msgstr "バージョン 3.3 で非推奨、バージョン 4.0 で削除予定: 古いスタイルの Py_UNICODE API の一部です; PyUnicode_AsUnicodeEscapeString() を使用するように移行してください。"

#: ../../c-api/unicode.rst:1306
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsUnicodeEscapeString`."
msgstr "古いスタイルの :c:type:`Py_UNICODE` APIの一部です; :c:func:`PyUnicode_AsUnicodeEscapeString` を使用するように移行してください。"

#: ../../c-api/unicode.rst:1310
msgid "Raw-Unicode-Escape Codecs"
msgstr "Raw-Unicode-Escape Codecs"

#: ../../c-api/unicode.rst:1312
msgid "These are the \"Raw Unicode Escape\" codec APIs:"
msgstr "以下は \"Raw Unicode Escape\" codec の APIです:"

#: ../../c-api/unicode.rst:1318
msgid ""
"Create a Unicode object by decoding *size* bytes of the Raw-Unicode-Escape "
"encoded string *s*.  Return *NULL* if an exception was raised by the codec."
msgstr "Raw-Unicode-Escape でエンコードされた *size* バイトの文字列 *s* から Unicode オブジェクトを生成します。codec が例外を送出した場合には *NULL* を返します。"

#: ../../c-api/unicode.rst:1324
msgid ""
"Encode a Unicode object using Raw-Unicode-Escape and return the result as a "
"bytes object.  Error handling is \"strict\".  Return *NULL* if an exception "
"was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1332
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Raw-"
"Unicode-Escape and return a bytes object.  Return *NULL* if an exception was"
" raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1338
msgid ""
"Deprecated since version 3.3, will be removed in version 4.0: Part of the "
"old-style Py_UNICODE API; please migrate to using "
"PyUnicode_AsRawUnicodeEscapeString() or PyUnicode_AsEncodedString()."
msgstr ""

#: ../../c-api/unicode.rst:1338
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsRawUnicodeEscapeString` or "
":c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1342
msgid "Latin-1 Codecs"
msgstr "Latin-1 Codecs"

#: ../../c-api/unicode.rst:1344
msgid ""
"These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256 "
"Unicode ordinals and only these are accepted by the codecs during encoding."
msgstr "以下は Latin-1 codec の APIです: Latin-1 は、 Unicode 序数の最初の 256 個に対応し、エンコード時にはこの 256 個だけを受理します。"

#: ../../c-api/unicode.rst:1350
msgid ""
"Create a Unicode object by decoding *size* bytes of the Latin-1 encoded "
"string *s*.  Return *NULL* if an exception was raised by the codec."
msgstr "Latin-1 でエンコードされた *size* バイトの文字列 *s* から Unicode オブジェクトを生成します。codec が例外を送出した場合には *NULL* を返します。"

#: ../../c-api/unicode.rst:1356
msgid ""
"Encode a Unicode object using Latin-1 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1363
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Latin-1 and"
" return a Python bytes object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

#: ../../c-api/unicode.rst:1370
msgid ""
"Deprecated since version 3.3, will be removed in version 4.0: Part of the "
"old-style Py_UNICODE API; please migrate to using PyUnicode_AsLatin1String()"
" or PyUnicode_AsEncodedString()."
msgstr ""

#: ../../c-api/unicode.rst:1370
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsLatin1String` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1374
msgid "ASCII Codecs"
msgstr "ASCII Codecs"

#: ../../c-api/unicode.rst:1376
msgid ""
"These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted. All "
"other codes generate errors."
msgstr "以下は ASCII codec の APIです。 7 ビットの ASCII データだけを受理します。その他のコードはエラーになります。"

#: ../../c-api/unicode.rst:1382
msgid ""
"Create a Unicode object by decoding *size* bytes of the ASCII encoded string"
" *s*.  Return *NULL* if an exception was raised by the codec."
msgstr "ASCII でエンコードされた *size* バイトの文字列 *s* から Unicode オブジェクトを生成します。codec が例外を送出した場合には *NULL* を返します。"

#: ../../c-api/unicode.rst:1388
msgid ""
"Encode a Unicode object using ASCII and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1395
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using ASCII and "
"return a Python bytes object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

#: ../../c-api/unicode.rst:1402
msgid ""
"Deprecated since version 3.3, will be removed in version 4.0: Part of the "
"old-style Py_UNICODE API; please migrate to using PyUnicode_AsASCIIString() "
"or PyUnicode_AsEncodedString()."
msgstr ""

#: ../../c-api/unicode.rst:1402
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsASCIIString` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1406
msgid "Character Map Codecs"
msgstr "Character Map Codecs"

#: ../../c-api/unicode.rst:1408
msgid ""
"This codec is special in that it can be used to implement many different "
"codecs (and this is in fact what was done to obtain most of the standard "
"codecs included in the :mod:`encodings` package). The codec uses mapping to "
"encode and decode characters."
msgstr "この codec は、多くの様々な codec を実装する際に使われるという点で特殊な codec です (実際、 :mod:`encodings` パッケージに入っている標準 codecs のほとんどは、この codec を使っています)。この codec は、文字のエンコードやデコードにマップ型 (mapping) を使います。"

#: ../../c-api/unicode.rst:1413
msgid ""
"Decoding mappings must map single string characters to single Unicode "
"characters, integers (which are then interpreted as Unicode ordinals) or "
"``None`` (meaning \"undefined mapping\" and causing an error)."
msgstr ""

#: ../../c-api/unicode.rst:1417
msgid ""
"Encoding mappings must map single Unicode characters to single string "
"characters, integers (which are then interpreted as Latin-1 ordinals) or "
"``None`` (meaning \"undefined mapping\" and causing an error)."
msgstr ""

#: ../../c-api/unicode.rst:1421
msgid ""
"The mapping objects provided must only support the __getitem__ mapping "
"interface."
msgstr "マップ型オブジェクトは、 :meth:`__getitem__` マップ型インタフェースをサポートしなければなりません。"

#: ../../c-api/unicode.rst:1424
msgid ""
"If a character lookup fails with a LookupError, the character is copied as-"
"is meaning that its ordinal value will be interpreted as Unicode or Latin-1 "
"ordinal resp. Because of this, mappings only need to contain those mappings "
"which map characters to different code points."
msgstr "ある文字の検索が LookupError によって失敗すると、その文字はそのままコピーされます。すなわち、その文字の序数値がそれぞれ Unicode または Latin-1 として解釈されます。このため、codec を実現するマップ型に入れる必要がある対応付け関係は、ある文字を別のコード点に対応付けるものだけです。"

#: ../../c-api/unicode.rst:1429
msgid "These are the mapping codec APIs:"
msgstr "以下は mapping codec の APIです:"

#: ../../c-api/unicode.rst:1434
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *s* "
"using the given *mapping* object.  Return *NULL* if an exception was raised "
"by the codec. If *mapping* is *NULL* latin-1 decoding will be done. Else it "
"can be a dictionary mapping byte or a unicode string, which is treated as a "
"lookup table. Byte values greater that the length of the string and U+FFFE "
"\"characters\" are treated as \"undefined mapping\"."
msgstr "エンコードされた *size* バイトの文字列 *s* から  *mapping* に指定されたオブジェクトを使って Unicode オブジェクトを生成します。codec が例外を送出した場合には *NULL* を返します。もし、 *mapping* が *NULL* だった場合、latin-1 でデコードされます。それ以外の場合では、 *mapping* は byte に対する辞書マップ (訳注: s に含まれる文字の unsigned な値を int 型でキーとして、値として変換対象の Unicode 文字を表す Unicode 文字列になっているような辞書) か、ルックアップテーブルとして扱われる Unicode 文字列です。文字列 (訳注: mapping が Unicode 文字列として渡された場合) の長さより大きい byte 値や、(訳注: mappingにしたがって変換した結果が) U+FFFE \"characters\" になる Byte値は、\"定義されていない対応付け (undefined mapping)\" として扱われます。"

#: ../../c-api/unicode.rst:1444
msgid ""
"Encode a Unicode object using the given *mapping* object and return the "
"result as Python string object.  Error handling is \"strict\".  Return "
"*NULL* if an exception was raised by the codec."
msgstr "Unicode オブジェクトを *mapping* に指定されたオブジェクトを使ってエンコードし、結果を Python 文字列オブジェクトとして返します。エラー処理は \"strict\" です。 codec が例外を送出した場合には *NULL* を返します。"

#: ../../c-api/unicode.rst:1448
msgid "The following codec API is special in that maps Unicode to Unicode."
msgstr "以下の codec API は Unicode から Unicode への対応付けを行う特殊なものです。"

#: ../../c-api/unicode.rst:1454
msgid ""
"Translate a :c:type:`Py_UNICODE` buffer of the given *size* by applying a "
"character mapping *table* to it and return the resulting Unicode object.  "
"Return *NULL* when an exception was raised by the codec."
msgstr "*size* で指定された長さを持つ :c:type:`Py_UNICODE` バッファを、文字変換マップ *table* を適用して変換し、変換結果を Unicode オブジェクトで返します。 codec が例外を発行した場合には *NULL* を返します。"

#: ../../c-api/unicode.rst:1458
msgid ""
"The *mapping* table must map Unicode ordinal integers to Unicode ordinal "
"integers or ``None`` (causing deletion of the character)."
msgstr ""

#: ../../c-api/unicode.rst:1461 ../../c-api/unicode.rst:1580
msgid ""
"Mapping tables need only provide the :meth:`__getitem__` interface; "
"dictionaries and sequences work well.  Unmapped character ordinals (ones "
"which cause a :exc:`LookupError`) are left untouched and are copied as-is."
msgstr "対応付けテーブルが提供する必要があるメソッドは :meth:`__getitem__` インタフェースだけです; 従って、辞書やシーケンス型を使ってもうまく動作します。対応付けを行っていない (:exc:`LookupError` を起こすような) 文字序数に対しては、変換は行わず、そのままコピーします。"

#: ../../c-api/unicode.rst:1468
msgid ""
"Deprecated since version 3.3, will be removed in version 4.0: Part of the "
"old-style Py_UNICODE API; please migrate to using PyUnicode_Translate(). or "
"generic codec based API"
msgstr ""

#: ../../c-api/unicode.rst:1468
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_Translate`. or :ref:`generic codec based API <codec-"
"registry>`"
msgstr ""

#: ../../c-api/unicode.rst:1474
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using the given "
"*mapping* object and return a Python string object. Return *NULL* if an "
"exception was raised by the codec."
msgstr "*size* で指定された長さを持つ :c:type:`Py_UNICODE` 型バッファを *mapping* に指定されたオブジェクトを使ってエンコードし、 Python 文字列オブジェクトにして返します。 codec が例外を送出した場合には *NULL* を返します。"

#: ../../c-api/unicode.rst:1481
msgid ""
"Deprecated since version 3.3, will be removed in version 4.0: Part of the "
"old-style Py_UNICODE API; please migrate to using "
"PyUnicode_AsCharmapString() or PyUnicode_AsEncodedString()."
msgstr ""

#: ../../c-api/unicode.rst:1481
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsCharmapString` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1485
msgid "MBCS codecs for Windows"
msgstr "Windows 用の MBCS codec"

#: ../../c-api/unicode.rst:1487
msgid ""
"These are the MBCS codec APIs. They are currently only available on Windows "
"and use the Win32 MBCS converters to implement the conversions.  Note that "
"MBCS (or DBCS) is a class of encodings, not just one.  The target encoding "
"is defined by the user settings on the machine running the codec."
msgstr "以下は MBCS codec の API です。この codec は現在のところ、 Windows 上だけで利用でき、変換の実装には Win32 MBCS 変換機構 (Win32 MBCS converter) を使っています。 MBCS (または DBCS) はエンコード方式の種類 (class) を表す言葉で、単一のエンコード方式を表すわけでなないので注意してください。利用されるエンコード方式 (target encoding) は、 codec を動作させているマシン上のユーザ設定で定義されています。"

#: ../../c-api/unicode.rst:1494
msgid ""
"Create a Unicode object by decoding *size* bytes of the MBCS encoded string "
"*s*. Return *NULL* if an exception was raised by the codec."
msgstr "MBCS でエンコードされた *size* バイトの文字列 *s* から Unicode オブジェクトを生成します。codec が例外を送出した場合には *NULL* を返します。"

#: ../../c-api/unicode.rst:1501
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeMBCS`. If "
"*consumed* is not *NULL*, :c:func:`PyUnicode_DecodeMBCSStateful` will not "
"decode trailing lead byte and the number of bytes that have been decoded "
"will be stored in *consumed*."
msgstr "*consumed* が *NULL* のとき、 :c:func:`PyUnicode_DecodeMBCS` と同じ動作をします。 *consumed* が *NULL* でないとき、 :c:func:`PyUnicode_DecodeMBCSStateful` は文字列の最後にあるマルチバイト文字の前半バイトをデコードせず、 *consumed* にデコードしたバイト数を格納します。"

#: ../../c-api/unicode.rst:1509
msgid ""
"Encode a Unicode object using MBCS and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr "MBCS で Unicode オブジェクトをエンコードし、結果を Python バイト列オブジェクトとして返します。エラー処理は \"strict\" です。 codec が例外を送出した場合には *NULL* を返します。"

#: ../../c-api/unicode.rst:1516
msgid ""
"Encode the Unicode object using the specified code page and return a Python "
"bytes object.  Return *NULL* if an exception was raised by the codec. Use "
":c:data:`CP_ACP` code page to get the MBCS encoder."
msgstr ""

#: ../../c-api/unicode.rst:1525
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using MBCS and "
"return a Python bytes object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

#: ../../c-api/unicode.rst:1532
msgid ""
"Deprecated since version 3.3, will be removed in version 4.0: Part of the "
"old-style Py_UNICODE API; please migrate to using PyUnicode_AsMBCSString(), "
"PyUnicode_EncodeCodePage() or PyUnicode_AsEncodedString()."
msgstr ""

#: ../../c-api/unicode.rst:1532
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyUnicode_AsMBCSString`, :c:func:`PyUnicode_EncodeCodePage` or "
":c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1536
msgid "Methods & Slots"
msgstr "メソッドとスロット"

#: ../../c-api/unicode.rst:1542
msgid "Methods and Slot Functions"
msgstr "メソッドおよびスロット関数 (slot function)"

#: ../../c-api/unicode.rst:1544
msgid ""
"The following APIs are capable of handling Unicode objects and strings on "
"input (we refer to them as strings in the descriptions) and return Unicode "
"objects or integers as appropriate."
msgstr "以下の API は Unicode オブジェクトおよび文字列を入力に取り (説明では、どちらも文字列と表記しています)、場合に応じて Unicode オブジェクトか整数を返す機能を持っています。"

#: ../../c-api/unicode.rst:1548
msgid "They all return *NULL* or ``-1`` if an exception occurs."
msgstr "これらの関数は全て、例外が発生した場合には *NULL* または ``-1`` を返します。"

#: ../../c-api/unicode.rst:1553
msgid "Concat two strings giving a new Unicode string."
msgstr "二つの文字列を結合して、新たな Unicode 文字列を生成します。"

#: ../../c-api/unicode.rst:1558
msgid ""
"Split a string giving a list of Unicode strings.  If *sep* is *NULL*, "
"splitting will be done at all whitespace substrings.  Otherwise, splits "
"occur at the given separator.  At most *maxsplit* splits will be done.  If "
"negative, no limit is set.  Separators are not included in the resulting "
"list."
msgstr "Unicode 文字列のリストを分割して、 Unicode 文字列からなるリストを返します。 *sep* が *NULL* の場合、全ての空白文字を使って分割を行います。それ以外の場合、指定された文字を使って分割を行います。最大で *maxsplit* 個までの分割を行います。 *maxsplit* が負ならば分割数に制限を設けません。分割結果のリスト内には分割文字は含みません。"

#: ../../c-api/unicode.rst:1566
msgid ""
"Split a Unicode string at line breaks, returning a list of Unicode strings. "
"CRLF is considered to be one line break.  If *keepend* is ``0``, the Line "
"break characters are not included in the resulting strings."
msgstr ""

#: ../../c-api/unicode.rst:1574
msgid ""
"Translate a string by applying a character mapping table to it and return "
"the resulting Unicode object."
msgstr "文字列に文字変換マップ *table* を適用して変換し、変換結果を Unicode オブジェクトで返します。"

#: ../../c-api/unicode.rst:1577
msgid ""
"The mapping table must map Unicode ordinal integers to Unicode ordinal "
"integers or ``None`` (causing deletion of the character)."
msgstr ""

#: ../../c-api/unicode.rst:1584
msgid ""
"*errors* has the usual meaning for codecs. It may be *NULL* which indicates "
"to use the default error handling."
msgstr "*errors* は codecs で通常使われるのと同じ意味を持ちます。 *errors* は *NULL* にしてもよく、デフォルトエラー処理の使用を意味します。"

#: ../../c-api/unicode.rst:1590
msgid ""
"Join a sequence of strings using the given *separator* and return the "
"resulting Unicode string."
msgstr "指定した *separator* で文字列からなるシーケンスを連結 (join) し、連結結果を Unicode 文字列で返します。"

#: ../../c-api/unicode.rst:1597
msgid ""
"Return ``1`` if *substr* matches ``str[start:end]`` at the given tail end "
"(*direction* == ``-1`` means to do a prefix match, *direction* == ``1`` a "
"suffix match), ``0`` otherwise. Return ``-1`` if an error occurred."
msgstr ""

#: ../../c-api/unicode.rst:1605
msgid ""
"Return the first position of *substr* in ``str[start:end]`` using the given "
"*direction* (*direction* == ``1`` means to do a forward search, *direction* "
"== ``-1`` a backward search).  The return value is the index of the first "
"match; a value of ``-1`` indicates that no match was found, and ``-2`` "
"indicates that an error occurred and an exception has been set."
msgstr ""

#: ../../c-api/unicode.rst:1615
msgid ""
"Return the first position of the character *ch* in ``str[start:end]`` using "
"the given *direction* (*direction* == ``1`` means to do a forward search, "
"*direction* == ``-1`` a backward search).  The return value is the index of "
"the first match; a value of ``-1`` indicates that no match was found, and "
"``-2`` indicates that an error occurred and an exception has been set."
msgstr ""

#: ../../c-api/unicode.rst:1627
msgid ""
"Return the number of non-overlapping occurrences of *substr* in "
"``str[start:end]``.  Return ``-1`` if an error occurred."
msgstr "``str[start:end]`` に *substr* が重複することなく出現する回数を返します。エラーが発生した場合には ``-1`` を返します。"

#: ../../c-api/unicode.rst:1634
msgid ""
"Replace at most *maxcount* occurrences of *substr* in *str* with *replstr* "
"and return the resulting Unicode object. *maxcount* == ``-1`` means replace "
"all occurrences."
msgstr ""

#: ../../c-api/unicode.rst:1641
msgid ""
"Compare two strings and return ``-1``, ``0``, ``1`` for less than, equal, "
"and greater than, respectively."
msgstr ""

#: ../../c-api/unicode.rst:1644 ../../c-api/unicode.rst:1655
msgid ""
"This function returns ``-1`` upon failure, so one should call "
":c:func:`PyErr_Occurred` to check for errors."
msgstr ""

#: ../../c-api/unicode.rst:1650
msgid ""
"Compare a unicode object, *uni*, with *string* and return ``-1``, ``0``, "
"``1`` for less than, equal, and greater than, respectively. It is best to "
"pass only ASCII-encoded strings, but the function interprets the input "
"string as ISO-8859-1 if it contains non-ASCII characters."
msgstr ""

#: ../../c-api/unicode.rst:1661
msgid "Rich compare two unicode strings and return one of the following:"
msgstr "二つのunicode文字列を比較して、下のうちの一つを返します:"

#: ../../c-api/unicode.rst:1663
msgid "``NULL`` in case an exception was raised"
msgstr "``NULL`` を、例外が発生したときに返します。"

#: ../../c-api/unicode.rst:1664
msgid ":const:`Py_True` or :const:`Py_False` for successful comparisons"
msgstr ":const:`Py_True` もしくは :const:`Py_False` を、正しく比較できた時に返します。"

#: ../../c-api/unicode.rst:1665
msgid ":const:`Py_NotImplemented` in case the type combination is unknown"
msgstr ":const:`Py_NotImplemented` を、 *left* と *right* のどちらかに対する :c:func:`PyUnicode_FromObject` が失敗したときに返します。(原文: in case the type combination is unknown)"

#: ../../c-api/unicode.rst:1667
msgid ""
"Note that :const:`Py_EQ` and :const:`Py_NE` comparisons can cause a "
":exc:`UnicodeWarning` in case the conversion of the arguments to Unicode "
"fails with a :exc:`UnicodeDecodeError`."
msgstr ":const:`Py_EQ` と :const:`Py_NE` の比較は、引数からUnicodeへの変換が :exc:`UnicodeDecodeError` で失敗した時に、 :exc:`UnicodeWarning` を発生する可能性があることに注意してください。"

#: ../../c-api/unicode.rst:1671
msgid ""
"Possible values for *op* are :const:`Py_GT`, :const:`Py_GE`, :const:`Py_EQ`,"
" :const:`Py_NE`, :const:`Py_LT`, and :const:`Py_LE`."
msgstr "*op* に入れられる値は、 :const:`Py_GT`, :const:`Py_GE`, :const:`Py_EQ`, :const:`Py_NE`, :const:`Py_LT`, and :const:`Py_LE` のどれかです。"

#: ../../c-api/unicode.rst:1677
msgid ""
"Return a new string object from *format* and *args*; this is analogous to "
"``format % args``."
msgstr "新たな文字列オブジェクトを *format* および *args* から生成して返します; このメソッドは ``format % args`` のようなものです。"

#: ../../c-api/unicode.rst:1683
msgid ""
"Check whether *element* is contained in *container* and return true or false"
" accordingly."
msgstr "*element* が *container* 内にあるか調べ、その結果に応じて真または偽を返します。"

#: ../../c-api/unicode.rst:1686
msgid ""
"*element* has to coerce to a one element Unicode string. ``-1`` is returned "
"if there was an error."
msgstr "*element* は単要素の Unicode 文字に型強制できなければなりません。エラーが生じた場合には ``-1`` を返します。"

#: ../../c-api/unicode.rst:1692
msgid ""
"Intern the argument *\\*string* in place.  The argument must be the address "
"of a pointer variable pointing to a Python unicode string object.  If there "
"is an existing interned string that is the same as *\\*string*, it sets "
"*\\*string* to it (decrementing the reference count of the old string object"
" and incrementing the reference count of the interned string object), "
"otherwise it leaves *\\*string* alone and interns it (incrementing its "
"reference count). (Clarification: even though there is a lot of talk about "
"reference counts, think of this function as reference-count-neutral; you own"
" the object after the call if and only if you owned it before the call.)"
msgstr ""

#: ../../c-api/unicode.rst:1705
msgid ""
"A combination of :c:func:`PyUnicode_FromString` and "
":c:func:`PyUnicode_InternInPlace`, returning either a new unicode string "
"object that has been interned, or a new (\"owned\") reference to an earlier "
"interned string object with the same value."
msgstr ""
