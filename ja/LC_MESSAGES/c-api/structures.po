# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# tomo, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2016-12-19 13:36+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-35/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/structures.rst:6
msgid "Common Object Structures"
msgstr "共通のオブジェクト構造体 (common object structure)"

#: ../../c-api/structures.rst:8
msgid ""
"There are a large number of structures which are used in the definition of "
"object types for Python.  This section describes these structures and how "
"they are used."
msgstr "Python では、オブジェクト型を定義する上で数多くの構造体が使われます。この節では三つの構造体とその利用方法について説明します。"

#: ../../c-api/structures.rst:12
msgid ""
"All Python objects ultimately share a small number of fields at the "
"beginning of the object's representation in memory.  These are represented "
"by the :c:type:`PyObject` and :c:type:`PyVarObject` types, which are "
"defined, in turn, by the expansions of some macros also used, whether "
"directly or indirectly, in the definition of all other Python objects."
msgstr "全ての Python オブジェクトは、オブジェクトのメモリ内表現の先頭部分にある少数のフィールドを完全に共有しています。このフィールドは :c:type:`PyObject` および :c:type:`PyVarObject` 型で表現されます。 :c:type:`PyObject` 型や :c:type:`PyVarObject` 型もまた、他の全ての Python  オブジェクトを定義する上で直接的・間接的に使われているマクロを使って定義されています。"

#: ../../c-api/structures.rst:21
msgid ""
"All object types are extensions of this type.  This is a type which contains"
" the information Python needs to treat a pointer to an object as an object."
"  In a normal \"release\" build, it contains only the object's reference "
"count and a pointer to the corresponding type object. Nothing is actually "
"declared to be a :c:type:`PyObject`, but every pointer to a Python object "
"can be cast to a :c:type:`PyObject*`.  Access to the members must be done by"
" using the macros :c:macro:`Py_REFCNT` and :c:macro:`Py_TYPE`."
msgstr "全てのオブジェクト型はこの型を拡張したものです。\nこの型には、あるオブジェクトを指すポインタをオブジェクトとして Python から扱うのに必要な情報が入っています。\n通常の \"リリース\" ビルドでは、この構造体にはオブジェクトの参照カウントとオブジェクトに対応する型オブジェクトだけが入っています。\n実際には :c:type:`PyObject` であることは宣言されていませんが、全ての Python オブジェクトへのポインタは :c:type:`PyObject*` へキャストできます。\nメンバにアクセスするには :c:macro:`Py_REFCNT` マクロと :c:macro:`Py_TYPE` マクロを使わなければなりません。"

#: ../../c-api/structures.rst:33
msgid ""
"This is an extension of :c:type:`PyObject` that adds the :attr:`ob_size` "
"field.  This is only used for objects that have some notion of *length*. "
"This type does not often appear in the Python/C API. Access to the members "
"must be done by using the macros :c:macro:`Py_REFCNT`, :c:macro:`Py_TYPE`, "
"and :c:macro:`Py_SIZE`."
msgstr ":c:type:`PyObject` を拡張して、 :attr:`ob_size` フィールドを追加したものです。\nこの構造体は、 *長さ (length)* の概念を持つオブジェクトだけに対して使います。\nこの型が Python/C API で使われることはほとんどありません。\nメンバにアクセスするには :c:macro:`Py_REFCNT` マクロ、 :c:macro:`Py_TYPE` マクロ、 :c:macro:`Py_SIZE` マクロを使わなければなりません。"

#: ../../c-api/structures.rst:42
msgid ""
"This is a macro used when declaring new types which represent objects "
"without a varying length.  The PyObject_HEAD macro expands to::"
msgstr ""

#: ../../c-api/structures.rst:47
msgid "See documentation of :c:type:`PyObject` above."
msgstr ""

#: ../../c-api/structures.rst:52
msgid ""
"This is a macro used when declaring new types which represent objects with a"
" length that varies from instance to instance. The PyObject_VAR_HEAD macro "
"expands to::"
msgstr ""

#: ../../c-api/structures.rst:58
msgid "See documentation of :c:type:`PyVarObject` above."
msgstr ""

#: ../../c-api/structures.rst:63
msgid ""
"This macro is used to access the :attr:`ob_type` member of a Python object. "
"It expands to::"
msgstr ""

#: ../../c-api/structures.rst:71
msgid ""
"This macro is used to access the :attr:`ob_refcnt` member of a Python "
"object. It expands to::"
msgstr ""

#: ../../c-api/structures.rst:80
msgid ""
"This macro is used to access the :attr:`ob_size` member of a Python object. "
"It expands to::"
msgstr ""

#: ../../c-api/structures.rst:88
msgid ""
"This is a macro which expands to initialization values for a new "
":c:type:`PyObject` type.  This macro expands to::"
msgstr "新しい :c:type:`PyObject` 型のための初期値に展開するマクロです。このマクロは次のように展開されます。 ::"

#: ../../c-api/structures.rst:97
msgid ""
"This is a macro which expands to initialization values for a new "
":c:type:`PyVarObject` type, including the :attr:`ob_size` field. This macro "
"expands to::"
msgstr "新しい、 :attr:`ob_size` フィールドを含む :c:type:`PyVarObject` 型のための初期値に展開するマクロです。このマクロは次のように展開されます。 ::"

#: ../../c-api/structures.rst:107
msgid ""
"Type of the functions used to implement most Python callables in C. "
"Functions of this type take two :c:type:`PyObject\\*` parameters and return "
"one such value.  If the return value is *NULL*, an exception shall have been"
" set.  If not *NULL*, the return value is interpreted as the return value of"
" the function as exposed in Python.  The function must return a new "
"reference."
msgstr "ほとんどの Python の呼び出し可能オブジェクトを C で実装する際に用いられている関数の型です。この型の関数は二つの :c:type:`PyObject\\*` 型パラメタをとり、 :c:type:`PyObject\\*` 型の値を返します。戻り値を *NULL* にする場合、例外をセットしておかなければなりません。 *NULL* でない値を返す場合、戻り値は Python に関数の戻り値として公開される値として解釈されます。この型の関数は新たな参照を返さなければなりません。"

#: ../../c-api/structures.rst:117
msgid ""
"Type of the functions used to implement Python callables in C that take "
"keyword arguments: they take three :c:type:`PyObject\\*` parameters and "
"return one such value.  See :c:type:`PyCFunction` above for the meaning of "
"the return value."
msgstr "キーワード引数をとるPythonの呼び出し可能オブジェクトを C で実装する際に用いられている関数の型です: この関数の型は三つの :c:type:`PyObject\\*` 型パラメタをとり、:c:type:`PyObject\\*` 型の値を返します。戻り値の意味については、上記の :c:type:`PyCFunction` を参照して下さい。"

#: ../../c-api/structures.rst:125
msgid ""
"Structure used to describe a method of an extension type.  This structure "
"has four fields:"
msgstr "拡張型のメソッドを記述する際に用いる構造体です。この構造体には 4 つのフィールドがあります:"

#: ../../c-api/structures.rst:129 ../../c-api/structures.rst:240
msgid "Field"
msgstr "フィールド"

#: ../../c-api/structures.rst:129 ../../c-api/structures.rst:240
msgid "C Type"
msgstr "C の型"

#: ../../c-api/structures.rst:129 ../../c-api/structures.rst:240
msgid "Meaning"
msgstr "意味"

#: ../../c-api/structures.rst:131
msgid ":attr:`ml_name`"
msgstr ":attr:`ml_name`"

#: ../../c-api/structures.rst:131 ../../c-api/structures.rst:139
#: ../../c-api/structures.rst:242 ../../c-api/structures.rst:255
#: ../../c-api/structures.rst:271
msgid "char \\*"
msgstr "char \\*"

#: ../../c-api/structures.rst:131
msgid "name of the method"
msgstr "メソッド名"

#: ../../c-api/structures.rst:133
msgid ":attr:`ml_meth`"
msgstr ":attr:`ml_meth`"

#: ../../c-api/structures.rst:133
msgid "PyCFunction"
msgstr "PyCFunction"

#: ../../c-api/structures.rst:133
msgid "pointer to the C implementation"
msgstr "C 実装へのポインタ"

#: ../../c-api/structures.rst:136
msgid ":attr:`ml_flags`"
msgstr ":attr:`ml_flags`"

#: ../../c-api/structures.rst:136 ../../c-api/structures.rst:244
#: ../../c-api/structures.rst:251 ../../c-api/structures.rst:267
msgid "int"
msgstr "int"

#: ../../c-api/structures.rst:136
msgid "flag bits indicating how the call should be constructed"
msgstr "呼び出しをどのように行うかを示すフラグビット"

#: ../../c-api/structures.rst:139
msgid ":attr:`ml_doc`"
msgstr ":attr:`ml_doc`"

#: ../../c-api/structures.rst:139 ../../c-api/structures.rst:255
msgid "points to the contents of the docstring"
msgstr "docstring の内容を指すポインタ"

#: ../../c-api/structures.rst:143
msgid ""
"The :attr:`ml_meth` is a C function pointer.  The functions may be of "
"different types, but they always return :c:type:`PyObject\\*`.  If the "
"function is not of the :c:type:`PyCFunction`, the compiler will require a "
"cast in the method table. Even though :c:type:`PyCFunction` defines the "
"first parameter as :c:type:`PyObject\\*`, it is common that the method "
"implementation uses the specific C type of the *self* object."
msgstr ":attr:`ml_meth` は C の関数ポインタです。関数は別の型で定義されていてもかまいませんが、常に  :c:type:`PyObject\\*` を返します。関数が :c:type:`PyFunction` でない場合、メソッドテーブル内でキャストを行うようコンパイラが要求することになるでしょう。 :c:type:`PyCFunction` では最初のパラメタが :c:type:`PyObject\\*` 型であると定義していますが、固有の C 型を *self* オブジェクトに使う実装はよく行われています。"

#: ../../c-api/structures.rst:150
msgid ""
"The :attr:`ml_flags` field is a bitfield which can include the following "
"flags. The individual flags indicate either a calling convention or a "
"binding convention.  Of the calling convention flags, only "
":const:`METH_VARARGS` and :const:`METH_KEYWORDS` can be combined. Any of the"
" calling convention flags can be combined with a binding flag."
msgstr ""

#: ../../c-api/structures.rst:159
msgid ""
"This is the typical calling convention, where the methods have the type "
":c:type:`PyCFunction`. The function expects two :c:type:`PyObject\\*` "
"values. The first one is the *self* object for methods; for module "
"functions, it is the module object.  The second parameter (often called "
"*args*) is a tuple object representing all arguments. This parameter is "
"typically processed using :c:func:`PyArg_ParseTuple` or "
":c:func:`PyArg_UnpackTuple`."
msgstr ":c:type:`PyCFunction` 型のメソッドで典型的に使われる呼び出し規約です。関数は :c:type:`PyObject\\*` 型の引数値を二つ要求します。最初の引数はメソッドの *self* オブジェクトです; モジュール関数の場合、これはモジュールオブジェクトです。第二のパラメタ (よく *args* と呼ばれます) は、全ての引数を表現するタプルオブジェクトです。パラメタは通常、 :c:func:`PyArg_ParseTuple` や :c:func:`PyArg_UnpackTuple` で処理されます。"

#: ../../c-api/structures.rst:169
msgid ""
"Methods with these flags must be of type :c:type:`PyCFunctionWithKeywords`. "
"The function expects three parameters: *self*, *args*, and a dictionary of "
"all the keyword arguments.  The flag is typically combined with "
":const:`METH_VARARGS`, and the parameters are typically processed using "
":c:func:`PyArg_ParseTupleAndKeywords`."
msgstr "このフラグを持つメソッドは :c:type:`PyCFunctionWithKeywords` 型でなければなりません。 :c:type:`PyCFunctionWithKeywords` は三つのパラメタ: *self* 、 *args* 、およびキーワード引数全てからなる辞書、を要求します。このフラグは通常 :const:`METH_VARARGS` と組み合わされ、パラメタは :c:func:`PyArg_ParseTupleAndKeywords` で処理されます。"

#: ../../c-api/structures.rst:178
msgid ""
"Methods without parameters don't need to check whether arguments are given "
"if they are listed with the :const:`METH_NOARGS` flag.  They need to be of "
"type :c:type:`PyCFunction`.  The first parameter is typically named *self* "
"and will hold a reference to the module or object instance.  In all cases "
"the second parameter will be *NULL*."
msgstr "引数のないメソッドは、 :const:`METH_NOARGS` フラグをつけた場合、必要な引数が指定されているかをチェックしなくなります。こうしたメソッドは :c:type:`PyCFunction` 型でなくてはなりません。第一のパラメタは *self* になり、モジュールかオブジェクトインスタンスへの参照を保持することになります。いずれにせよ、第二のパラメタは *NULL* になります。"

#: ../../c-api/structures.rst:187
msgid ""
"Methods with a single object argument can be listed with the :const:`METH_O`"
" flag, instead of invoking :c:func:`PyArg_ParseTuple` with a ``\"O\"`` "
"argument. They have the type :c:type:`PyCFunction`, with the *self* "
"parameter, and a :c:type:`PyObject\\*` parameter representing the single "
"argument."
msgstr "単一のオブジェクト引数だけをとるメソッドは、 :c:func:`PyArg_ParseTuple` を引数 ``\"O\"`` にして呼び出す代わりに、 :const:`METH_O` フラグつきで指定できます。メソッドは :c:type:`PyCFunction` 型で、 *self* パラメタと単一の引数を表現する :c:type:`PyObject\\*` パラメタを伴います。"

#: ../../c-api/structures.rst:193
msgid ""
"These two constants are not used to indicate the calling convention but the "
"binding when use with methods of classes.  These may not be used for "
"functions defined for modules.  At most one of these flags may be set for "
"any given method."
msgstr "以下の二つの定数は、呼び出し規約を示すものではなく、クラスのメソッドとして使う際の束縛方式を示すものです。モジュールに対して定義された関数で用いてはなりません。メソッドに対しては、最大で一つしかこのフラグをセットできません。"

#: ../../c-api/structures.rst:203
msgid ""
"The method will be passed the type object as the first parameter rather than"
" an instance of the type.  This is used to create *class methods*, similar "
"to what is created when using the :func:`classmethod` built-in function."
msgstr "メソッドの最初の引数には、型のインスタンスではなく型オブジェクトが渡されます。このフラグは組み込み関数 :func:`classmethod` を使って生成するのと同じ *クラスメソッド (class method)* を生成するために使われます。"

#: ../../c-api/structures.rst:213
msgid ""
"The method will be passed *NULL* as the first parameter rather than an "
"instance of the type.  This is used to create *static methods*, similar to "
"what is created when using the :func:`staticmethod` built-in function."
msgstr "メソッドの最初の引数には、型のインスタンスではなく *NULL* が渡されます。このフラグは、 :func:`staticmethod` を使って生成するのと同じ *静的メソッド (static method)* を生成するために使われます。"

#: ../../c-api/structures.rst:217
msgid ""
"One other constant controls whether a method is loaded in place of another "
"definition with the same method name."
msgstr "もう一つの定数は、あるメソッドを同名の別のメソッド定義と置き換えるかどうかを制御します。"

#: ../../c-api/structures.rst:223
msgid ""
"The method will be loaded in place of existing definitions.  Without "
"*METH_COEXIST*, the default is to skip repeated definitions.  Since slot "
"wrappers are loaded before the method table, the existence of a "
"*sq_contains* slot, for example, would generate a wrapped method named "
":meth:`__contains__` and preclude the loading of a corresponding PyCFunction"
" with the same name.  With the flag defined, the PyCFunction will be loaded "
"in place of the wrapper object and will co-exist with the slot.  This is "
"helpful because calls to PyCFunctions are optimized more than wrapper object"
" calls."
msgstr "メソッドを既存の定義を置き換える形でロードします。 *METH_COEXIST* を指定しなければ、デフォルトの設定にしたがって、定義が重複しないようスキップします。スロットラッパはメソッドテーブルよりも前にロードされるので、例えば *sq_contains* スロットはラップしているメソッド :meth:`__contains__` を生成し、同名の PyCFunction のロードを阻止します。このフラグを定義すると、 PyCFunction はラッパオブジェクトを置き換える形でロードされ、スロットと連立します。 PyCFunctions の呼び出しはラッパオブジェクトの呼び出しよりも最適化されているので、こうした仕様が便利になります。"

#: ../../c-api/structures.rst:236
msgid ""
"Structure which describes an attribute of a type which corresponds to a C "
"struct member.  Its fields are:"
msgstr "type の C 構造体のメンバとして格納されている、ある型の属性を表す構造体です。この構造体のフィールドは以下のとおりです:"

#: ../../c-api/structures.rst:242
msgid ":attr:`name`"
msgstr ":attr:`name`"

#: ../../c-api/structures.rst:242
msgid "name of the member"
msgstr "メンバ名"

#: ../../c-api/structures.rst:244
msgid ":attr:`type`"
msgstr ":attr:`type`"

#: ../../c-api/structures.rst:244
msgid "the type of the member in the C struct"
msgstr "C 構造体の中のメンバの型"

#: ../../c-api/structures.rst:247
msgid ":attr:`offset`"
msgstr ":attr:`offset`"

#: ../../c-api/structures.rst:247 ../../c-api/structures.rst:283
msgid "Py_ssize_t"
msgstr "Py_ssize_t"

#: ../../c-api/structures.rst:247
msgid ""
"the offset in bytes that the member is located on the type's object struct"
msgstr "そのメンバの type object 構造体中の場所の offset バイト数"

#: ../../c-api/structures.rst:251
msgid ":attr:`flags`"
msgstr ":attr:`flags`"

#: ../../c-api/structures.rst:251
msgid "flag bits indicating if the field should be read-only or writable"
msgstr "フィールドが読み込み専用か書込み可能なのかを示すビットフラグ"

#: ../../c-api/structures.rst:255
msgid ":attr:`doc`"
msgstr ":attr:`doc`"

#: ../../c-api/structures.rst:259
msgid ""
":attr:`type` can be one of many ``T_`` macros corresponding to various C "
"types.  When the member is accessed in Python, it will be converted to the "
"equivalent Python type."
msgstr ":attr:`type` はたくさんのCの型を意味する ``T_`` マクロのうちの1つです。メンバが Python からアクセスされるとき、そのメンバは対応する Python の型に変換されます。"

#: ../../c-api/structures.rst:264
msgid "Macro name"
msgstr "マクロ名"

#: ../../c-api/structures.rst:264
msgid "C type"
msgstr "C type"

#: ../../c-api/structures.rst:266
msgid "T_SHORT"
msgstr "T_SHORT"

#: ../../c-api/structures.rst:266
msgid "short"
msgstr "short"

#: ../../c-api/structures.rst:267
msgid "T_INT"
msgstr "T_INT"

#: ../../c-api/structures.rst:268
msgid "T_LONG"
msgstr "T_LONG"

#: ../../c-api/structures.rst:268
msgid "long"
msgstr "long型"

#: ../../c-api/structures.rst:269
msgid "T_FLOAT"
msgstr "T_FLOAT"

#: ../../c-api/structures.rst:269
msgid "float"
msgstr "float"

#: ../../c-api/structures.rst:270
msgid "T_DOUBLE"
msgstr "T_DOUBLE"

#: ../../c-api/structures.rst:270
msgid "double"
msgstr "double"

#: ../../c-api/structures.rst:271
msgid "T_STRING"
msgstr "T_STRING"

#: ../../c-api/structures.rst:272
msgid "T_OBJECT"
msgstr "T_OBJECT"

#: ../../c-api/structures.rst:272 ../../c-api/structures.rst:273
msgid "PyObject \\*"
msgstr "PyObject \\*"

#: ../../c-api/structures.rst:273
msgid "T_OBJECT_EX"
msgstr "T_OBJECT_EX"

#: ../../c-api/structures.rst:274
msgid "T_CHAR"
msgstr "T_CHAR"

#: ../../c-api/structures.rst:274 ../../c-api/structures.rst:275
#: ../../c-api/structures.rst:280
msgid "char"
msgstr "char"

#: ../../c-api/structures.rst:275
msgid "T_BYTE"
msgstr "T_BYTE"

#: ../../c-api/structures.rst:276
msgid "T_UBYTE"
msgstr "T_UBYTE"

#: ../../c-api/structures.rst:276
msgid "unsigned char"
msgstr "unsigned char"

#: ../../c-api/structures.rst:277
msgid "T_UINT"
msgstr "T_UINT"

#: ../../c-api/structures.rst:277
msgid "unsigned int"
msgstr "unsigned int"

#: ../../c-api/structures.rst:278
msgid "T_USHORT"
msgstr "T_USHORT"

#: ../../c-api/structures.rst:278
msgid "unsigned short"
msgstr "unsigned short"

#: ../../c-api/structures.rst:279
msgid "T_ULONG"
msgstr "T_ULONG"

#: ../../c-api/structures.rst:279
msgid "unsigned long"
msgstr "unsigned long"

#: ../../c-api/structures.rst:280
msgid "T_BOOL"
msgstr "T_BOOL"

#: ../../c-api/structures.rst:281
msgid "T_LONGLONG"
msgstr "T_LONGLONG"

#: ../../c-api/structures.rst:281
msgid "long long"
msgstr "long long"

#: ../../c-api/structures.rst:282
msgid "T_ULONGLONG"
msgstr "T_ULONGLONG"

#: ../../c-api/structures.rst:282
msgid "unsigned long long"
msgstr "unsigned long long"

#: ../../c-api/structures.rst:283
msgid "T_PYSSIZET"
msgstr "T_PYSSIZET"

#: ../../c-api/structures.rst:286
msgid ""
":c:macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX` differ in that "
":c:macro:`T_OBJECT` returns ``None`` if the member is *NULL* and "
":c:macro:`T_OBJECT_EX` raises an :exc:`AttributeError`.  Try to use "
":c:macro:`T_OBJECT_EX` over :c:macro:`T_OBJECT` because "
":c:macro:`T_OBJECT_EX` handles use of the :keyword:`del` statement on that "
"attribute more correctly than :c:macro:`T_OBJECT`."
msgstr ":c:macro:`T_OBJECT` と :c:macro:`T_OBJECT_EX` については、 :c:macro:`T_OBJECT` がメンバが *NULL* だったときに ``None`` を返すのに対し、 :c:macro:`T_OBJECT_EX` は :exc:`AttributeError` を発生させる点が異なります。 :c:macro:`T_OBJECT_EX` は属性に対する :keyword:`del` 文をより正しくあつかうので、できれば :c:macro:`T_OBJECT` よりも :c:macro:`T_OBJECT_EX` を使ってください。"

#: ../../c-api/structures.rst:293
msgid ""
":attr:`flags` can be ``0`` for write and read access or :c:macro:`READONLY` "
"for read-only access.  Using :c:macro:`T_STRING` for :attr:`type` implies "
":c:macro:`READONLY`.  Only :c:macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX` "
"members can be deleted.  (They are set to *NULL*)."
msgstr ""
