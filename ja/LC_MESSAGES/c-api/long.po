# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
# tomo <cocoatomo77@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2016-06-12 22:44+0000\n"
"Last-Translator: tomo <cocoatomo77@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc-ja/python-35/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr "整数型オブジェクト (integer object)"

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr "すべての整数は任意の長さをもつ \"long\" 整数として実装されます。"

#: ../../c-api/long.rst:15
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr "この :c:type:`PyObject` のサブタイプは整数型を表現します。"

#: ../../c-api/long.rst:20
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr "この :c:type:`PyTypeObject` のインスタンスは Python 整数型を表現します。これは Python レイヤにおける :class:`int` と同じオブジェクトです。"

#: ../../c-api/long.rst:26
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of "
":c:type:`PyLongObject`."
msgstr "引数が :c:type:`PyLongObject` か :c:type:`PyLongObject` のサブタイプのときに真を返します。"

#: ../../c-api/long.rst:32
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`."
msgstr "引数が :c:type:`PyLongObject` 型で、かつ :c:type:`PyLongObject` 型のサブタイプでないときに真を返します。"

#: ../../c-api/long.rst:38
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or *NULL* on failure."
msgstr "*v* から新たな :c:type:`PyLongObject` オブジェクトを生成して返します。失敗のときには *NULL* を返します。"

#: ../../c-api/long.rst:40
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``, when you create an int in that range "
"you actually just get back a reference to the existing object. So it should "
"be possible to change the value of ``1``.  I suspect the behaviour of Python"
" in this case is undefined. :-)"
msgstr "現在の実装では、``-5`` から ``256`` までの全ての整数に対する整数オブジェクトの配列を保持するようにしており、この範囲の数を生成すると、実際には既存のオブジェクトに対する参照が返るようになっています。従って、``1`` の値を変えることすら可能です。変えてしまった場合の Python の挙動は未定義です :-)"

#: ../../c-api/long.rst:49
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned long`,"
" or *NULL* on failure."
msgstr "Cの :c:type:`unsigned long` から新たな :c:type:`PyLongObject` オブジェクトを生成して返します。失敗した際には *NULL* を返します。"

#: ../../c-api/long.rst:55
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or"
" *NULL* on failure."
msgstr "C の :c:type:`Py_ssize_t` 型から新たな :c:type:`PyLongObject` オブジェクトを生成して返します。 失敗のときには *NULL* を返します。"

#: ../../c-api/long.rst:61
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"*NULL* on failure."
msgstr "C の :c:type:`size_t` 型から新たな :c:type:`PyLongObject` オブジェクトを生成して返します。 失敗のときには *NULL* を返します。"

#: ../../c-api/long.rst:67
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`long long`, or "
"*NULL* on failure."
msgstr "C の :c:type:`long long` 型から新たな :c:type:`PyLongObject` オブジェクトを生成して返します。失敗のときには *NULL* を返します。"

#: ../../c-api/long.rst:73
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned long "
"long`, or *NULL* on failure."
msgstr "C の :c:type:`unsigned long long` 型から新たな :c:type:`PyLongObject` オブジェクトを生成して返します。失敗のときには *NULL* を返します。"

#: ../../c-api/long.rst:79
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"*NULL* on failure."
msgstr "*v* の整数部から新たな :c:type:`PyLongObject` オブジェクトを生成して返します。失敗のときには *NULL* を返します。"

#: ../../c-api/long.rst:85
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*.  If *pend* is "
"non-*NULL*, *\\*pend* will point to the first character in *str* which "
"follows the representation of the number.  If *base* is ``0``, the radix "
"will be determined based on the leading characters of *str*: if *str* starts"
" with ``'0x'`` or ``'0X'``, radix 16 will be used; if *str* starts with "
"``'0o'`` or ``'0O'``, radix 8 will be used; if *str* starts with ``'0b'`` or"
" ``'0B'``, radix 2 will be used; otherwise radix 10 will be used.  If *base*"
" is not ``0``, it must be between ``2`` and ``36``, inclusive.  Leading "
"spaces are ignored.  If there are no digits, :exc:`ValueError` will be "
"raised."
msgstr "*str* の文字列値に基づいて、新たな :c:type:`PyLongObject` を返します。このとき *base* を基数として文字列を解釈します。 *pend* が *NULL* でなければ、 *\\*pend* は *str* 中で数が表現されている部分以後の先頭の文字のアドレスを指しています。 *base* が ``0`` ならば、 *str* の先頭の文字列に基づいて基数を決定します: もし *str* が ``'0x'`` または ``'0X'`` で始まっていれば、基数に 16 を使います; *str* が ``'0o'`` または ``'0O'`` で始まっていれば、基数に 8 を使います; *str* が ``'0b'`` または ``'0B'`` で始まっていれば、基数に 2 を使います; その他の場合には基数に 10 を使います。 *base* が ``0`` でなければ、 *base* は ``2`` 以上 ``36`` 以下の数でなければなりません。先頭に空白がある場合は無視されます。数字が全くない場合、 :exc:`ValueError` が送出されます。"

#: ../../c-api/long.rst:99
msgid ""
"Convert a sequence of Unicode digits to a Python integer value.  The Unicode"
" string is first encoded to a byte string using "
":c:func:`PyUnicode_EncodeDecimal` and then converted using "
":c:func:`PyLong_FromString`."
msgstr "Unicode 数値列を Python 整数値に変換します。Unicode 文字列はまず :c:func:`PyUnicode_EncodeDecimal` を用いてバイト文字列にエンコードされ、次に :c:func:`PyLong_FromString` を用いて変換されます。"

#: ../../c-api/long.rst:105
msgid ""
"Deprecated since version 3.3, will be removed in version 4.0: Part of the "
"old-style Py_UNICODE API; please migrate to using "
"PyLong_FromUnicodeObject()."
msgstr "バージョン 3.3 で非推奨、バージョン 4.0 で削除予定: 古いスタイルの Py_UNICODE API の一部です; PyLong_FromUnicodeObject() を使用するように移行してください。"

#: ../../c-api/long.rst:105
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyLong_FromUnicodeObject`."
msgstr "古いスタイルの :c:type:`Py_UNICODE` APIの一部です; :c:func:`PyLong_FromUnicodeObject` を使用するように移行してください。"

#: ../../c-api/long.rst:110
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python integer "
"value.  The Unicode string is first encoded to a byte string using "
":c:func:`PyUnicode_EncodeDecimal` and then converted using "
":c:func:`PyLong_FromString`."
msgstr "*u* 文字列中の Unicode 数値列を Python 整数値に変換します。Unicode 文字列はまず :c:func:`PyUnicode_EncodeDecimal` を用いてバイト文字列にエンコードされ、次に :c:func:`PyLong_FromString` を用いて変換されます。"

#: ../../c-api/long.rst:120
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr "ポインタ *p* から Python 整数値を生成します。ポインタの値は :c:func:`PyLong_AsVoidPtr` を適用した結果から取得されます。"

#: ../../c-api/long.rst:131 ../../c-api/long.rst:141
msgid ""
"Return a C :c:type:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__int__` method "
"(if present) to convert it to a :c:type:`PyLongObject`."
msgstr "*obj* が表す、Cの :c:type:`long` 表現を返します。もし *obj* が :c:type:`PyLongObject` のインスタンスでなければ、まず、その :meth:`__int__` メソッドを (もしあれば) 呼び出して、オブジェクトを :c:type:`PyLongObject` に変換します。"

#: ../../c-api/long.rst:135 ../../c-api/long.rst:160
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a "
":c:type:`long`."
msgstr "もし *obj* の値が :c:type:`long` の範囲外であれば、 :exc:`OverflowError` を送出します。"

#: ../../c-api/long.rst:145
msgid ""
"If the value of *obj* is greater than :const:`LONG_MAX` or less than "
":const:`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr "もし、 *obj* の値が :const:`LONG_MAX` より大きいか、 :const:`LONG_MIN` より小さければ、 *\\*overflow* は、それぞれ ``1`` か ``-1`` に設定され、 ``-1`` を返します; さもなければ  *\\*overflow* は ``0`` に設定されます。もし、ほかの例外が発生した場合は *\\*overflow* が ``0`` に設定され ``-1`` を返します。"

#: ../../c-api/long.rst:156 ../../c-api/long.rst:166
msgid ""
"Return a C :c:type:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__int__` method "
"(if present) to convert it to a :c:type:`PyLongObject`."
msgstr "*obj* が表す、Cの :c:type:`long long` 表現を返します。もし *obj* が :c:type:`PyLongObject` のインスタンスでなければ、まず、その :meth:`__int__` メソッドを (もしあれば) 呼び出して、オブジェクトを :c:type:`PyLongObject` に変換します。"

#: ../../c-api/long.rst:170
msgid ""
"If the value of *obj* is greater than :const:`PY_LLONG_MAX` or less than "
":const:`PY_LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, "
"and return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr "もし、 *obj* の値が :const:`PY_LLONG_MAX` より大きいか、 :const:`PY_LLONG_MIN` より小さければ、 *\\*overflow* は、それぞれ ``1`` か ``-1`` に設定され、 ``-1`` を返します; さもなければ  *\\*overflow* は ``0`` に設定されます。もし、ほかの例外が発生した場合は *\\*overflow* が ``0`` に設定され ``-1`` を返します。"

#: ../../c-api/long.rst:184
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr "*pylong* を表す C の :c:type:`Py_ssize_t` を返します。 *pylong* は :c:type:`PyLongObject` のインスタンスでなければなりません。"

#: ../../c-api/long.rst:187
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:type:`Py_ssize_t`."
msgstr "もし *pylong* の値が :c:type:`Py_ssize_t` の範囲外であれば、 :exc:`OverflowError` を送出します。"

#: ../../c-api/long.rst:197
msgid ""
"Return a C :c:type:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr "*pylong* を表す C の :c:type:`unsigned long` を返します。 *pylong* は :c:type:`PyLongObject` のインスタンスでなければなりません。"

#: ../../c-api/long.rst:200
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:type:`unsigned long`."
msgstr "もし *pylong* の値が :c:type:`unsigned long` の範囲外であれば、 :exc:`OverflowError` を送出します。"

#: ../../c-api/long.rst:206
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an"
" instance of :c:type:`PyLongObject`."
msgstr "*pylong* を表す C の :c:type:`size_t` を返します。 *pylong* は :c:type:`PyLongObject` のインスタンスでなければなりません。"

#: ../../c-api/long.rst:209
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:type:`size_t`."
msgstr "もし *pylong* の値が :c:type:`size_t` の範囲外であれば、 :exc:`OverflowError` を送出します。"

#: ../../c-api/long.rst:218
msgid ""
"Return a C :c:type:`unsigned PY_LONG_LONG` representation of *pylong*. "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr "*pylong* を表す C の :c:type:`unsigned PY_LONG_LONG` を返します。 *pylong* は :c:type:`PyLongObject` のインスタンスでなければなりません。"

#: ../../c-api/long.rst:221
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an "
":c:type:`unsigned PY_LONG_LONG`."
msgstr "もし *pylong* の値が :c:type:`unsigned PY_LONG_LONG` の範囲外であれば、 :exc:`OverflowError` を送出します。"

#: ../../c-api/long.rst:224
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr "負 *pylong* を指定した際に :exc:`TypeError` ではなく、 :exc:`OverflowError` を送出するようになりました。"

#: ../../c-api/long.rst:230
msgid ""
"Return a C :c:type:`unsigned long` representation of *obj*.  If *obj* is not"
" an instance of :c:type:`PyLongObject`, first call its :meth:`__int__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr "*obj* が表す、C の :c:type:`unsigned long` 表現を返します。もし *obj* が :c:type:`PyLongObject` のインスタンスでなければ、まず、その :meth:`__int__` メソッドを (もしあれば) 呼び出して、オブジェクトを :c:type:`PyLongObject` に変換します。"

#: ../../c-api/long.rst:234
msgid ""
"If the value of *obj* is out of range for an :c:type:`unsigned long`, return"
" the reduction of that value modulo :const:`ULONG_MAX + 1`."
msgstr "*obj* の値が :c:type:`unsigned long` の範囲から外れていた場合は、 :const:`ULONG_MAX + 1` を法とした剰余を返します。"

#: ../../c-api/long.rst:240
msgid ""
"Return a C :c:type:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its :meth:`__int__`"
" method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr "*obj* が表す、C の :c:type:`unsigned long long` 表現を返します。もし *obj* が :c:type:`PyLongObject` のインスタンスでなければ、まず、その :meth:`__int__` メソッドを (もしあれば) 呼び出して、オブジェクトを :c:type:`PyLongObject` に変換します。"

#: ../../c-api/long.rst:244
msgid ""
"If the value of *obj* is out of range for an :c:type:`unsigned long long`, "
"return the reduction of that value modulo :const:`PY_ULLONG_MAX + 1`."
msgstr "*obj* の値が :c:type:`unsigned long long` の範囲から外れていた場合は、 :const:`PY_ULLONG_MAX + 1` を法とした剰余を返します。"

#: ../../c-api/long.rst:250
msgid ""
"Return a C :c:type:`double` representation of *pylong*.  *pylong* must be an"
" instance of :c:type:`PyLongObject`."
msgstr "*pylong* を表す C の :c:type:`double` を返します。 *pylong* は :c:type:`PyLongObject` のインスタンスでなければなりません。"

#: ../../c-api/long.rst:253
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:type:`double`."
msgstr "もし *pylong* の値が :c:type:`double` の範囲外であれば、 :exc:`OverflowError` を送出します。"

#: ../../c-api/long.rst:259
msgid ""
"Convert a Python integer *pylong* to a C :c:type:`void` pointer. If *pylong*"
" cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:type:`void` pointer for values created with "
":c:func:`PyLong_FromVoidPtr`."
msgstr "Python の整数型を指す *pylong* を、 C の :c:type:`void` ポインタに変換します。 *pylong* を変換できなければ、 :exc:`OverflowError` を送出します。この関数は :c:func:`PyLong_FromVoidPtr` で値を生成するときに使うような :c:type:`void` ポインタ型を生成できるだけです。"
