# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2016-12-10 07:41+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-35/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/webservers.rst:3
msgid "HOWTO Use Python in the web"
msgstr "Python を Web 上で使うには HOWTO"

#: ../../howto/webservers.rst:5
msgid "Marek Kubica"
msgstr "Marek Kubica"

#: ../../howto/webservers.rst:0
msgid "Abstract"
msgstr "概要"

#: ../../howto/webservers.rst:9
msgid ""
"This document shows how Python fits into the web.  It presents some ways to "
"integrate Python with a web server, and general practices useful for "
"developing web sites."
msgstr "このドキュメントは Python を web 向けに組み込む方法を示します。Python を web サーバとともに利用するためのいくつかの方法や web サイトを開発する際の一般的なプラクティスを示します。"

#: ../../howto/webservers.rst:14
msgid ""
"Programming for the Web has become a hot topic since the rise of \"Web "
"2.0\", which focuses on user-generated content on web sites.  It has always "
"been possible to use Python for creating web sites, but it was a rather "
"tedious task. Therefore, many frameworks and helper tools have been created "
"to assist developers in creating faster and more robust sites.  This HOWTO "
"describes some of the methods used to combine Python with a web server to "
"create dynamic content.  It is not meant as a complete introduction, as this"
" topic is far too broad to be covered in one single document.  However, a "
"short overview of the most popular libraries is provided."
msgstr "web サイトのコンテンツをユーザが作るということに焦点を当てた \"Web 2.0\" の提起以来 Web プログラミングは人気の話題となっています。web サイトを作るのに Python を利用することは可能でしたが、それは退屈な作業でした。そのため、開発者がサイトを速く、頑強に作るのを助けるために多くの「フレームワーク」と補助ツールが作成されました。この HOWTO では動的なコンテンツを作成するために Python と web サーバを結合させるいくつかの方法について述べます。この話題に対する一般的な入門はこのドキュメントだけで扱いきれないほど広いわけではありませんが、ここでは最も人気のあるライブラリの簡単な概要のみを扱います。"

#: ../../howto/webservers.rst:26
msgid ""
"While this HOWTO tries to give an overview of Python in the web, it cannot "
"always be as up to date as desired.  Web development in Python is rapidly "
"moving forward, so the wiki page on `Web Programming "
"<https://wiki.python.org/moin/WebProgramming>`_ may be more in sync with "
"recent development."
msgstr "この HOWTO は Python を web 上で使う方法の概要を扱おうとしていますが、HOWTO が常に望みどおりに最新の状況を伝えているとは限りません。Python での web 開発は急速に発展しています、そのため Wiki ページ `Web Programming <https://wiki.python.org/moin/WebProgramming>`_ に多くの最新の開発に関する内容があるでしょう。"

#: ../../howto/webservers.rst:34
msgid "The Low-Level View"
msgstr "低レベルから見て"

#: ../../howto/webservers.rst:36
msgid ""
"When a user enters a web site, their browser makes a connection to the "
"site's web server (this is called the *request*).  The server looks up the "
"file in the file system and sends it back to the user's browser, which "
"displays it (this is the *response*).  This is roughly how the underlying "
"protocol, HTTP, works."
msgstr "ユーザが web サイトを訪れた時、ブラウザはサイトの web サーバとコネクションを形成します (これは *リクエスト* と呼ばれます)。サーバはファイルシステム上からファイルを探し出し、ユーザのブラウザにそれを送り返し、ブラウザが表示します (これが *レスポンス* です)。これが基礎となるプロトロル、HTTP のおおまかな動作です。"

#: ../../howto/webservers.rst:41
msgid ""
"Dynamic web sites are not based on files in the file system, but rather on "
"programs which are run by the web server when a request comes in, and which "
"*generate* the content that is returned to the user.  They can do all sorts "
"of useful things, like display the postings of a bulletin board, show your "
"email, configure software, or just display the current time.  These programs"
" can be written in any programming language the server supports.  Since most"
" servers support Python, it is easy to use Python to create dynamic web "
"sites."
msgstr "さて、動的な web サイトはファイルシステム上のファイルではなく、リクエストが来たときに web サーバが実行するプログラムです。それらは掲示板の投稿を表示したり、メールを表示したり、ソフトウェアの設定や現在時刻の表示などの様々な便利なことができます。これらのプログラムはサーバがサポートするあらゆる言語で書くことができます、そのため動的な web サイトを作成するのに Python を利用することは簡単です。"

#: ../../howto/webservers.rst:49
msgid ""
"Most HTTP servers are written in C or C++, so they cannot execute Python "
"code directly -- a bridge is needed between the server and the program.  "
"These bridges, or rather interfaces, define how programs interact with the "
"server. There have been numerous attempts to create the best possible "
"interface, but there are only a few worth mentioning."
msgstr "ほとんどの HTTP サーバは C や C++ で書かれていて、これらは Python コードを単純な方法で実行できません -- サーバとプログラムの間にブリッジが必要です。これらのブリッジやインターフェースはプログラムがサーバとどうやりとりするかを定めます。これまでに最良のインターフェースを決めるために膨大な数の試みがなされてきましたが、言及すべきものはわずかです。"

#: ../../howto/webservers.rst:55
msgid ""
"Not every web server supports every interface.  Many web servers only "
"support old, now-obsolete interfaces; however, they can often be extended "
"using third-party modules to support newer ones."
msgstr "全ての web サーバが全てのインターフェースをサポートしているわけではありません。多くの web サーバは古い、現在では撤廃されたインターフェースのみをサポートしています。しかし、多くの場合にはサードパーティーモジュールを利用して新しいインターフェースをサポートするように拡張できます。"

#: ../../howto/webservers.rst:61
msgid "Common Gateway Interface"
msgstr "Common Gateway Interface"

#: ../../howto/webservers.rst:63
msgid ""
"This interface, most commonly referred to as \"CGI\", is the oldest, and is "
"supported by nearly every web server out of the box.  Programs using CGI to "
"communicate with their web server need to be started by the server for every"
" request.  So, every request starts a new Python interpreter -- which takes "
"some time to start up -- thus making the whole interface only usable for low"
" load situations."
msgstr "このインターフェースは最も古く、ほとんどの web サーバでサポートされ、すぐに使うことができます。CGI を利用して web サーバと通信するプログラムはリクエスト毎に起動される必要があります。そのため毎回のリクエストは新しい Python インタプリタを起動します -- このため起動にいくらか時間がかかります -- そのためこのインターフェースは負荷が少ない状況にのみ向いています。"

#: ../../howto/webservers.rst:70
msgid ""
"The upside of CGI is that it is simple -- writing a Python program which "
"uses CGI is a matter of about three lines of code.  This simplicity comes at"
" a price: it does very few things to help the developer."
msgstr "CGI の利点は単純だということです -- CGI を利用するプログラムを書くのは3行のコードを書くだけです。しかし、この単純さは後で高くつきます; 開発者を少ししか助けてくれません。"

#: ../../howto/webservers.rst:74
msgid ""
"Writing CGI programs, while still possible, is no longer recommended.  With "
":ref:`WSGI <WSGI>`, a topic covered later in this document, it is possible "
"to write programs that emulate CGI, so they can be run as CGI if no better "
"option is available."
msgstr "CGI プログラムを書くことは可能ではありますが、もはや推奨されません。 :ref:`WSGI <WSGI>` (詳しくは後で述べます) では CGI をエミュレートするプログラムを書くことができます、そのため、よりよい選択肢が選べない場合には CGI としてプログラムを実行できます。"

#: ../../howto/webservers.rst:81
msgid ""
"The Python standard library includes some modules that are helpful for "
"creating plain CGI programs:"
msgstr "Python の標準ライブラリには簡素な CGI プログラムを作成するのを助けるいくつかのモジュールが含まれています:"

#: ../../howto/webservers.rst:84
msgid ":mod:`cgi` -- Handling of user input in CGI scripts"
msgstr ":mod:`cgi` -- CGI スクリプトでのユーザ入力を扱います"

#: ../../howto/webservers.rst:85
msgid ""
":mod:`cgitb` -- Displays nice tracebacks when errors happen in CGI "
"applications, instead of presenting a \"500 Internal Server Error\" message"
msgstr ":mod:`cgitb` -- CGI アプリケーションの中でエラーが発生した場合に、 \"500 Internal Server Error\" メッセージの代わりに親切なトレースバックを表示します"

#: ../../howto/webservers.rst:88
msgid ""
"The Python wiki features a page on `CGI scripts "
"<https://wiki.python.org/moin/CgiScripts>`_ with some additional information"
" about CGI in Python."
msgstr "Python wiki では `CGI scripts <https://wiki.python.org/moin/CgiScripts>`_ ページに Python での CGI に関した追加情報を取り上げています。"

#: ../../howto/webservers.rst:94
msgid "Simple script for testing CGI"
msgstr "CGI をテストするための単純なスクリプト"

#: ../../howto/webservers.rst:96
msgid ""
"To test whether your web server works with CGI, you can use this short and "
"simple CGI program::"
msgstr "CGI が web サーバで動くかどうかを調べるのに、この短かく単純な CGI プログラムが利用できます::"

#: ../../howto/webservers.rst:111
msgid ""
"Depending on your web server configuration, you may need to save this code "
"with a ``.py`` or ``.cgi`` extension.  Additionally, this file may also need"
" to be in a ``cgi-bin`` folder, for security reasons."
msgstr "このコードは ``.py`` または ``.cgi`` 拡張子をつけたファイルに書く必要があります、どちらを使うかは web サーバの設定に依存します。web サーバの設定によっては、ファイルは ``cgi-bin`` フォルダ内にある必要があるかもしれません、これはセキュリティ上の理由のためです。"

#: ../../howto/webservers.rst:115
msgid ""
"You might wonder what the ``cgitb`` line is about.  This line makes it "
"possible to display a nice traceback instead of just crashing and displaying"
" an \"Internal Server Error\" in the user's browser.  This is useful for "
"debugging, but it might risk exposing some confidential data to the user.  "
"You should not use ``cgitb`` in production code for this reason.  You should"
" *always* catch exceptions, and display proper error pages -- end-users "
"don't like to see nondescript \"Internal Server Errors\" in their browsers."
msgstr "``cgitb`` 行が何なのか疑問に思うかもしれません。この行は、クラッシュしてブラウザで \"Internal Server Error\" と表示する代わりに、親切なトレースバックを表示できるようにします。これはデバッグの際に便利ですが、いくつかの重要なデータをユーザにさらけ出すリスクにもなりえます。スクリプトを完成品として利用する準備ができたら ``cgitb`` は使ってはいけません。さらに、*常に* 例外を捕捉し、適切なエラーページを表示するようにしなければいけません -- エンドユーザは漠然とした \"Internal Server Errors\" をブラウザで見ることを好みません。"

#: ../../howto/webservers.rst:125
msgid "Setting up CGI on your own server"
msgstr "自身のサーバで CGI を立ち上げる"

#: ../../howto/webservers.rst:127
msgid ""
"If you don't have your own web server, this does not apply to you.  You can "
"check whether it works as-is, and if not you will need to talk to the "
"administrator of your web server. If it is a big host, you can try filing a "
"ticket asking for Python support."
msgstr "自身の web サーバを持っていない場合には、この内容は当てはまらないでしょ。そのままで動作するか調べることは可能です、もし動作しない場合、とにかく web サーバの管理者と話し合う必要があります。大きなホストである場合、チケットを埋めて Python サポートを得るということができるでしょう。"

#: ../../howto/webservers.rst:132
msgid ""
"If you are your own administrator or want to set up CGI for testing purposes"
" on your own computers, you have to configure it by yourself.  There is no "
"single way to configure CGI, as there are many web servers with different "
"configuration options.  Currently the most widely used free web server is "
"`Apache HTTPd <http://httpd.apache.org/>`_, or Apache for short. Apache can "
"be easily installed on nearly every system using the system's package "
"management tool.  `lighttpd <http://www.lighttpd.net>`_ is another "
"alternative and is said to have better performance.  On many systems this "
"server can also be installed using the package management tool, so manually "
"compiling the web server may not be needed."
msgstr "あなた自身が管理者であるか、自身のコンピュータで試すためにインストールしたい場合には自分自身で設定する必要があります。異なる設定オプションを持つ web サーバがたくさんあるため、CGI の設定法はひとつではありません、現在最も広く使われている web サーバは  `Apache HTTPd <http://httpd.apache.org/>`_ です、Apache を簡単に説明すると -- 最も多くの人が利用しているもので、ほとんど全てのシステムでシステムのパッケージ管理ソフトを利用して簡単にインストールできます。ただし `lighttpd <http://www.lighttpd.net>`_ も注目を集め始めていて、さらにパフォーマンスの面でより優れているといわれています。多くのシステムでこのサーバはパッケージ管理ソフトを利用してインストールできるので、web サーバを手動でコンパイルする必要は全くありません。"

#: ../../howto/webservers.rst:143
msgid ""
"On Apache you can take a look at the `Dynamic Content with CGI "
"<http://httpd.apache.org/docs/2.2/howto/cgi.html>`_ tutorial, where "
"everything is described.  Most of the time it is enough just to set "
"``+ExecCGI``.  The tutorial also describes the most common gotchas that "
"might arise."
msgstr "Apache ではチュートリアル `Dynamic Content with CGI <http://httpd.apache.org/docs/2.2/howto/cgi.html>`_ を参照できます、これには全てが書かれています。多くの場合には ``+ExecCGI`` を設定すれば十分です。このチュートリアルはよくでくわす可能性のある落し穴についても書かれています。"

#: ../../howto/webservers.rst:148
msgid ""
"On lighttpd you need to use the `CGI module "
"<http://redmine.lighttpd.net/projects/lighttpd/wiki/Docs_ModCGI>`_\\ , which"
" can be configured in a straightforward way.  It boils down to setting "
"``cgi.assign`` properly."
msgstr "lighttpd では `CGI module <http://redmine.lighttpd.net/projects/lighttpd/wiki/Docs_ModCGI>`_ を使う必要があります、これは直接的な方法で設定できます。結局のところ、``cgi.assign`` を適切に設定することになります。"

#: ../../howto/webservers.rst:154
msgid "Common problems with CGI scripts"
msgstr "CGI スクリプトでの一般的な問題"

#: ../../howto/webservers.rst:156
msgid ""
"Using CGI sometimes leads to small annoyances while trying to get these "
"scripts to run.  Sometimes a seemingly correct script does not work as "
"expected, the cause being some small hidden problem that's difficult to "
"spot."
msgstr "CGI を利用しようとすると、しばしば小さないらいらを生むことになります、その中でおそらく経験するものの一つは実行時するためにこれらのスクリプトの取得を試みるときに起きます。これによって一見正しいスクリプトが期待どおりに動かないことはよくあります、これにはいくつかの小さな隠れた理由があるので、突き止めるのが困難です。"

#: ../../howto/webservers.rst:160
msgid "Some of these potential problems are:"
msgstr "いくつかの理由:"

#: ../../howto/webservers.rst:162
msgid ""
"The Python script is not marked as executable.  When CGI scripts are not "
"executable most web servers will let the user download it, instead of "
"running it and sending the output to the user.  For CGI scripts to run "
"properly on Unix-like operating systems, the ``+x`` bit needs to be set. "
"Using ``chmod a+x your_script.py`` may solve this problem."
msgstr "Python スクリプトが実行可能であると示されていない。CGI スクリプトが実行不可能な場合、多くの web サーバは実行しユーザに出力を送る代わりに、ユーザがダウンロードできるようにします。CGI スクリプトに対しては適切に実行するために ``+x`` ビットが設定される必要があります。``chmod a+x your_script.py`` を使うことで問題は解決します。"

#: ../../howto/webservers.rst:168
msgid ""
"On a Unix-like system, The line endings in the program file must be Unix "
"style line endings.  This is important because the web server checks the "
"first line of the script (called shebang) and tries to run the program "
"specified there.  It gets easily confused by Windows line endings (Carriage "
"Return & Line Feed, also called CRLF), so you have to convert the file to "
"Unix line endings (only Line Feed, LF).  This can be done automatically by "
"uploading the file via FTP in text mode instead of binary mode, but the "
"preferred way is just telling your editor to save the files with Unix line "
"endings.  Most editors support this."
msgstr "行末は Unix 形式である必要があります。これは、web サーバがスクリプト最初の行 (shebang と呼ばれます) を調べ、そこで指定されたプログラムの実行を試みるため重要となります。これは Windows の行末 (Carriage Return & Line Feed、または CRLF) とよく混同されます、そのためファイルを Unix 行末 (Line Feed のみ LF) に変換する必要があります。これは FTP 経由でテキストモードではなくバイナリモードでファイルをアップロードすると自動的に行なわれますが、より望ましい方法は単にテキストエディタで Unix 行末で保存することです。多くの適切なエディタはこれをサポートしています。"

#: ../../howto/webservers.rst:178
msgid ""
"Your web server must be able to read the file, and you need to make sure the"
" permissions are correct.  On unix-like systems, the server often runs as "
"user and group ``www-data``, so it might be worth a try to change the file "
"ownership, or making the file world readable by using ``chmod a+r "
"your_script.py``."
msgstr "web サーバはファイルを読めるようにしなければいけないので、パーミッションが適切になっているか確認してください。しばしば、サーバは ``www-data`` ユーザ、グループとして実行します、そのためファイルのオーナーシップを変更するか、``chmod a+r your_script.py`` を使いファイルを全世界から読み込み可能にするといったことは試す価値があります。"

#: ../../howto/webservers.rst:184
msgid ""
"The web server must know that the file you're trying to access is a CGI "
"script. Check the configuration of your web server, as it may be configured "
"to expect a specific file extension for CGI scripts."
msgstr "web サーバはアクセスを試みているファイルが CGI スクリプトであるということを知っていなければいけません。web サーバの設定を確認して下さい、おそらくそこに間違いがあります。"

#: ../../howto/webservers.rst:188
msgid ""
"On Unix-like systems, the path to the interpreter in the shebang "
"(``#!/usr/bin/env python``) must be correct.  This line calls "
"``/usr/bin/env`` to find Python, but it will fail if there is no "
"``/usr/bin/env``, or if Python is not in the web server's path.  If you know"
" where your Python is installed, you can also use that full path.  The "
"commands ``whereis python`` and ``type -p python`` could help you find where"
" it is installed.  Once you know the path, you can change the shebang "
"accordingly: ``#!/usr/bin/python``."
msgstr "shebang 内のインタプリタへのパス (``#!/usr/bin/env python``) は正確でないといけません。この行は Python を見つけるために ``/usr/bin/env`` を呼び出しますが、``/usr/bin/env`` が無い場合失敗します。Python がどこにインストールされているか知っている場合、そのパスを使うこともできます。``whereis python`` と ``type -p python`` なども python がどこにインストールされたかを探すのに役立つでしょう。一旦わかってしまえば、shebang 行をそれに応じて変更できます: ``#!/usr/bin/python``。"

#: ../../howto/webservers.rst:197
msgid ""
"The file must not contain a BOM (Byte Order Mark). The BOM is meant for "
"determining the byte order of UTF-16 and UTF-32 encodings, but some editors "
"write this also into UTF-8 files.  The BOM interferes with the shebang line,"
" so be sure to tell your editor not to write the BOM."
msgstr "ファイルは BOM (Byte Order Mark) を含んでいてはいけません。BOM は UTF-16 エンコーディングのバイト順を決定するのに利用されます、しかしいくつかのエディタは UTF-8 ファイルに対してもそれを書き込むことがあります。BOM は shebang 行に影響するので、エディタが BOM を書かないようにしてください。"

#: ../../howto/webservers.rst:202
msgid ""
"If the web server is using :ref:`mod-python`, ``mod_python`` may be having "
"problems.  ``mod_python`` is able to handle CGI scripts by itself, but it "
"can also be a source of issues."
msgstr ":ref:`mod-python` が問題となることがあります。``mod_python`` はそれ自身で CGI スクリプトを扱うことができますが、そのことが問題の原因となることがあります。利用できないようにして下さい。"

#: ../../howto/webservers.rst:210
msgid "mod_python"
msgstr "mod_python"

#: ../../howto/webservers.rst:212
msgid ""
"People coming from PHP often find it hard to grasp how to use Python in the "
"web. Their first thought is mostly `mod_python <http://modpython.org/>`_\\ ,"
" because they think that this is the equivalent to ``mod_php``.  Actually, "
"there are many differences.  What ``mod_python`` does is embed the "
"interpreter into the Apache process, thus speeding up requests by not having"
" to start a Python interpreter for each request.  On the other hand, it is "
"not \"Python intermixed with HTML\" in the way that PHP is often intermixed "
"with HTML. The Python equivalent of that is a template engine.  "
"``mod_python`` itself is much more powerful and provides more access to "
"Apache internals.  It can emulate CGI, work in a \"Python Server Pages\" "
"mode (similar to JSP) which is \"HTML intermingled with Python\", and it has"
" a \"Publisher\" which designates one file to accept all requests and decide"
" what to do with them."
msgstr "PHP から来た人達はしばしば、Python を web 上で利用する方法を把握するのに苦労します。彼らはたいてい最初に `mod_python <http://modpython.org/>`_ が ``mod_php`` と等価だと考えて、利用しようとします。しかし実際にはそうではありません。``mod_python`` が行なうことは Apache プロセスへのインタプリタの埋め込みです、そのため、毎回のリクエストで Python インタプリタが起動しないのでリクエストに対する速度が向上します。一方で PHP でよくやるような「HTML への Python の埋め込み」とはかけ離れています。Python でそれと等価なことをするのはテンプレートエンジンです。``mod_python`` 自身はより強力で Apache 内部に対してより多くのアクセスを提供します。CGI をエミュレートし、JSP に似た「HTML への Python 埋め込み」である \"Python Server Pages\" モードで動作でき、全てのリクエストを一つのファイルで受け付けて何を実行するを決める \"Publisher\" を持っています。"

#: ../../howto/webservers.rst:225
msgid ""
"``mod_python`` does have some problems.  Unlike the PHP interpreter, the "
"Python interpreter uses caching when executing files, so changes to a file "
"will require the web server to be restarted.  Another problem is the basic "
"concept -- Apache starts child processes to handle the requests, and "
"unfortunately every child process needs to load the whole Python interpreter"
" even if it does not use it.  This makes the whole web server slower.  "
"Another problem is that, because ``mod_python`` is linked against a specific"
" version of ``libpython``, it is not possible to switch from an older "
"version to a newer (e.g. 2.4 to 2.5) without recompiling ``mod_python``.  "
"``mod_python`` is also bound to the Apache web server, so programs written "
"for ``mod_python`` cannot easily run on other web servers."
msgstr "しかし、``mod_python`` はいくつかの問題も抱えています。PHP インタプリタと違い Python インタプリタはファイル実行時にキャッシュを利用するため、ファイルの変更時にはアップデートするには web サーバ全体を再起動する必要があります。もう一つの問題は基本的なコンセプトにあります -- Apache はリクエストを扱うためにいくつかの子プロセスを開始し、不幸にも全ての子プロセスが Python インタプリタ全体を、利用しない場合であっても、読み込む必要があるのです。このため web サーバ全体が遅くなります。別の問題は ``mod_python`` は ``libpython`` が特定のバージョンに対してリンクされることです、``mod_python`` を再コンパイルせずに古いバージョンから新しいバージョンに切り替える (例えば 2.4 から 2.5) ことはできません。さらに ``mod_python`` は Apache web サーバに制限されるため ``mod_python`` 用に書かれたプログラムは他の web サーバで簡単に動かすことはできません。"

#: ../../howto/webservers.rst:237
msgid ""
"These are the reasons why ``mod_python`` should be avoided when writing new "
"programs.  In some circumstances it still might be a good idea to use "
"``mod_python`` for deployment, but WSGI makes it possible to run WSGI "
"programs under ``mod_python`` as well."
msgstr "これらが新しくプログラムを書く際に ``mod_python`` を避けるべき理由です。いくつかの状況では ``mod_python`` を利用するのはよいアイデアでしょうが、WSGI は ``mod_python`` 下でも WSGI プログラムを同様に動かせます。"

#: ../../howto/webservers.rst:244
msgid "FastCGI and SCGI"
msgstr "FastCGI と SCGI"

#: ../../howto/webservers.rst:246
msgid ""
"FastCGI and SCGI try to solve the performance problem of CGI in another way."
" Instead of embedding the interpreter into the web server, they create long-"
"running background processes. There is still a module in the web server "
"which makes it possible for the web server to \"speak\" with the background "
"process.  As the background process is independent of the server, it can be "
"written in any language, including Python.  The language just needs to have "
"a library which handles the communication with the webserver."
msgstr "FastCGI と SCGI は CGI のパフォーマンス上の問題を別の方法で解決しようという試みです。web サーバにインタプリタを組み込む代わりに、それらはバックグラウンドで長時間実行されるプロセスを生成します。さらに web サーバ上にはいくつかのモジュールがあり、それらは web サーバとバックグラウンドプロセスが「話す」ことを可能にします。バックグラウンドプロセスはサーバと独立しているため、もちろん Python を含んだ、任意の言語で書くことができます。言語は web サーバとの通信を扱うライブラリを持っている必要があるだけです。"

#: ../../howto/webservers.rst:254
msgid ""
"The difference between FastCGI and SCGI is very small, as SCGI is "
"essentially just a \"simpler FastCGI\".  As the web server support for SCGI "
"is limited, most people use FastCGI instead, which works the same way.  "
"Almost everything that applies to SCGI also applies to FastCGI as well, so "
"we'll only cover the latter."
msgstr "FastCGI と SCGI の違いはささいなもので、SCGI は基本的に \"simpler FastCGI\" です。しかし、SCGI をサポートする web サーバは限定されているため、多くの人々は代わりに同様に動作する FastCGI を利用します。SCGI に適用されるほとんど全てのものは FastCGI にも適用できます、そのため後者のみを書くことになるでしょう。"

#: ../../howto/webservers.rst:260
msgid ""
"These days, FastCGI is never used directly.  Just like ``mod_python``, it is"
" only used for the deployment of WSGI applications."
msgstr "最近では FastCGI を直接呼ぶことはありません。``mod_python`` のように WSGI アプリケーションのみが利用されてます。"

#: ../../howto/webservers.rst:265
msgid "Setting up FastCGI"
msgstr "FastCGI のセットアップ"

#: ../../howto/webservers.rst:267
msgid "Each web server requires a specific module."
msgstr "web サーバに応じて特別なモジュールが必要となります。"

#: ../../howto/webservers.rst:269
msgid ""
"Apache has both `mod_fastcgi <http://www.fastcgi.com/drupal/>`_ and "
"`mod_fcgid <http://httpd.apache.org/mod_fcgid/>`_.  ``mod_fastcgi`` is the "
"original one, but it has some licensing issues, which is why it is sometimes"
" considered non-free. ``mod_fcgid`` is a smaller, compatible alternative.  "
"One of these modules needs to be loaded by Apache."
msgstr "Apache には `mod_fastcgi <http://www.fastcgi.com/drupal/>`_ と `mod_fcgid <http://httpd.apache.org/mod_fcgid/>`_ の両方があります。``mod_fastcgi`` が最初に作られましたが、非フリーとして扱われるという、いくつかのライセンスの問題があります。``mod_fcgid`` はより小さく、前者と互換性があります。このうちのどちらかを Apache から読み込む必要があります。"

#: ../../howto/webservers.rst:275
msgid ""
"lighttpd ships its own `FastCGI module "
"<http://redmine.lighttpd.net/projects/lighttpd/wiki/Docs_ModFastCGI>`_ as "
"well as an `SCGI module "
"<http://redmine.lighttpd.net/projects/lighttpd/wiki/Docs_ModSCGI>`_."
msgstr "lighttpd は自身に `FastCGI module <http://redmine.lighttpd.net/projects/lighttpd/wiki/Docs_ModFastCGI>`_ を含んでいて、`SCGI module <http://redmine.lighttpd.net/projects/lighttpd/wiki/Docs_ModSCGI>`_ も同様に含んでいます。"

#: ../../howto/webservers.rst:279
msgid ""
"`nginx <http://nginx.org/>`_ also supports `FastCGI "
"<http://wiki.nginx.org/NginxSimplePythonFCGI>`_."
msgstr "nginx も `FastCGI <http://wiki.nginx.org/NginxSimplePythonFCGI>`_ をサポートしています。"

#: ../../howto/webservers.rst:282
msgid ""
"Once you have installed and configured the module, you can test it with the "
"following WSGI-application::"
msgstr "一旦モジュールをインストールして設定したら、以下の WSGI アプリケーションを使ってテストできます::"

#: ../../howto/webservers.rst:304
msgid ""
"This is a simple WSGI application, but you need to install `flup "
"<https://pypi.python.org/pypi/flup/1.0>`_ first, as flup handles the low "
"level FastCGI access."
msgstr "これは単純な WSGI アプリケーションですが、まず `flup <https://pypi.python.org/pypi/flup/1.0>`_ をインストールする必要があります、flup は低レベルの FastCGI アクセスを取り扱います。"

#: ../../howto/webservers.rst:310
msgid ""
"There is some documentation on `setting up Django with FastCGI "
"<https://docs.djangoproject.com/en/dev/howto/deployment/fastcgi/>`_, most of"
" which can be reused for other WSGI-compliant frameworks and libraries. Only"
" the ``manage.py`` part has to be changed, the example used here can be used"
" instead.  Django does more or less the exact same thing."
msgstr "`setting up Django with FastCGI <https://docs.djangoproject.com/en/dev/howto/deployment/fastcgi/>`_ にドキュメントがあります、この内の多くは WSGI 互換フレームワークやライブラリで再利用できます。代わりに ``manage.py`` の部分を変更するだけで、ここで使った例を利用できます。Django もほとんど同様のことを行います。"

#: ../../howto/webservers.rst:318
msgid "mod_wsgi"
msgstr "mod_wsgi"

#: ../../howto/webservers.rst:320
msgid ""
"`mod_wsgi <http://code.google.com/p/modwsgi/>`_ is an attempt to get rid of "
"the low level gateways.  Given that FastCGI, SCGI, and mod_python are mostly"
" used to deploy WSGI applications, mod_wsgi was started to directly embed "
"WSGI applications into the Apache web server. mod_wsgi is specifically "
"designed to host WSGI applications.  It makes the deployment of WSGI "
"applications much easier than deployment using other low level methods, "
"which need glue code.  The downside is that mod_wsgi is limited to the "
"Apache web server; other servers would need their own implementations of "
"mod_wsgi."
msgstr "`mod_wsgi <http://www.modwsgi.org/p/modwsgi/>`_ 低レベルなゲートウェイから脱するための試みです。WSGI アプリケーションをどうにかして利用可能にするには多くの場合 FastCGI、SCGI、mod_python が利用されるますが、mod_wsgi は WSGI アプリケーションを直接 Apache web サーバに埋め込みます。この方法をとることによる恩恵はホストの WSGI アプリケーションのために特別にデザインされたものと比べてより簡単な WSGI アプリケーションを利用できることです -- ホストの WSGI アプリケーションに対するグルーコードを持つ他の低レベルな方法 (先ほど述べた flup のような) と違って。mod_wsgi の欠点は Apache web サーバに制限されているということです、他の web サーバは mod_wsgi の独自実装が必要となります。"

#: ../../howto/webservers.rst:329
msgid ""
"mod_wsgi supports two modes: embedded mode, in which it integrates with the "
"Apache process, and daemon mode, which is more FastCGI-like.  Unlike "
"FastCGI, mod_wsgi handles the worker-processes by itself, which makes "
"administration easier."
msgstr "mod_wsgi は2つのモードをサポートします: 埋め込みモード(embeded mode)は Apache プロセスとデーモンプロセスを統合し、動作としては FastCGI に似ています。FastCGI と比較すると、mod_wsgi はそれ自身がワーカープロセスを取り扱うので管理が楽になります。"

#: ../../howto/webservers.rst:338
msgid "Step back: WSGI"
msgstr "後ろに下って: WSGI"

#: ../../howto/webservers.rst:340
msgid ""
"WSGI has already been mentioned several times, so it has to be something "
"important.  In fact it really is, and now it is time to explain it."
msgstr "WSGI について何度も言及してきたため、なにか重要そうに感じたでしょう。実際に重要なので、ここで説明します。"

#: ../../howto/webservers.rst:343
msgid ""
"The *Web Server Gateway Interface*,  or WSGI for short, is defined in "
":pep:`333` and is currently the best way to do Python web programming.  "
"While it is great for programmers writing frameworks, a normal web developer"
" does not need to get in direct contact with it.  When choosing a framework "
"for web development it is a good idea to choose one which supports WSGI."
msgstr "*Web Server Gateway Interface*, :pep:`333` または略して WSGI は現在のところ Python で web プログラミングをする最良の方法です。 programmers writing framework として卓越している一方で、一般の人は直接接点を持つ必要はありません。しかし、web 開発フレームワークとして選択する場合に、 WSGI を選ぶことは素晴しい考えです。"

#: ../../howto/webservers.rst:349
msgid ""
"The big benefit of WSGI is the unification of the application programming "
"interface.  When your program is compatible with WSGI -- which at the outer "
"level means that the framework you are using has support for WSGI -- your "
"program can be deployed via any web server interface for which there are "
"WSGI wrappers.  You do not need to care about whether the application user "
"uses mod_python or FastCGI or mod_wsgi -- with WSGI your application will "
"work on any gateway interface.  The Python standard library contains its own"
" WSGI server, :mod:`wsgiref`, which is a small web server that can be used "
"for testing."
msgstr "WSGI を使う上での大きな利益は、統一性です。 WSGI と互換性のあるプログラムであれば -- これはフレームワークが WSGI をサポートしているということを意味し、プログラムは WSGI ラッパーを持つ全ての web サーバインターフェースで利用可能になります。つまりユーザが mod_python か FastCGI どちらを利用しているかを気にせずにすみます。-- WSGI を使うことで任意ゲートウェイインターフェース上で動作するようになります。 Python 標準ライブラリには、テストのために利用できる小さな web サーバである、独自の WSGI サーバ :mod:`wsgiref` が含まれています。"

#: ../../howto/webservers.rst:359
msgid ""
"A really great WSGI feature is middleware.  Middleware is a layer around "
"your program which can add various functionality to it.  There is quite a "
"bit of `middleware <http://www.wsgi.org/en/latest/libraries.html>`_ already "
"available.  For example, instead of writing your own session management "
"(HTTP is a stateless protocol, so to associate multiple HTTP requests with a"
" single user your application must create and manage such state via a "
"session), you can just download middleware which does that, plug it in, and "
"get on with coding the unique parts of your application.  The same thing "
"with compression -- there is existing middleware which handles compressing "
"your HTML using gzip to save on your server's bandwidth.  Authentication is "
"another a problem easily solved using existing middleware."
msgstr "WSGI の本当に卓越している機能はミドルウェアです。ミドルウェアとはプログラムに様々な機能性を加えるためのレイヤーのことを指します。`無数のミドルウェア <http://www.wsgi.org/en/latest/libraries.html>`_ が利用可能になっています。例えばセッション管理(連続したリクエストの中でユーザを同定を行います、HTTP は状態を維持しないので、リクエストが同じユーザのものであるということがわかります)を書く代わりに、ミドルウェアを取ってきて繋ぐだけで、既存の機能を当てにできます。圧縮についても同じです -- HTML を gzip で圧縮してサーバの帯域を節約したい場合。ミドルウェアを組み込むだけで行うことができます。認証もミドルウェアで簡単に解決できる問題です。"

#: ../../howto/webservers.rst:371
msgid ""
"Although WSGI may seem complex, the initial phase of learning can be very "
"rewarding because WSGI and the associated middleware already have solutions "
"to many problems that might arise while developing web sites."
msgstr "一般的には -- WSGI は複雑に思えるかもしれませんが、WSGI は web サイトを書く際に起きうる多くの問題の解決法を持っているため、学習の初期段階を実りあるものにしてくれます。"

#: ../../howto/webservers.rst:377
msgid "WSGI Servers"
msgstr "WSGI サーバ"

#: ../../howto/webservers.rst:379
msgid ""
"The code that is used to connect to various low level gateways like CGI or "
"mod_python is called a *WSGI server*.  One of these servers is ``flup``, "
"which supports FastCGI and SCGI, as well as `AJP "
"<http://en.wikipedia.org/wiki/Apache_JServ_Protocol>`_.  Some of these "
"servers are written in Python, as ``flup`` is, but there also exist others "
"which are written in C and can be used as drop-in replacements."
msgstr "CGI や mod_python などに様々な低レベルゲートウェイに接続するためのコードを *WSGI サーバ* と呼びます。これらのサーバの一つに ``flup`` があります、これは前に述べましたが FastCGI、SCGI と `AJP <http://en.wikipedia.org/wiki/Apache_JServ_Protocol>`_ をサポートしています。これらのサーバのいくつかは ``flup`` のように Python で書かれていますが、C で書かれたものもあります、それらは気軽に置き換えることができます。"

#: ../../howto/webservers.rst:386
msgid ""
"There are many servers already available, so a Python web application can be"
" deployed nearly anywhere.  This is one big advantage that Python has "
"compared with other web technologies."
msgstr "いくつものサーバが利用可能ですから、Python の web アプリケーションはほとんどどこでも利用できます。これは他の web テクニックと比べたときの Python の大きな利点です。"

#: ../../howto/webservers.rst:392
msgid ""
"A good overview of WSGI-related code can be found in the `WSGI homepage "
"<http://www.wsgi.org/en/latest/index.html>`_, which contains an extensive "
"list of `WSGI servers <http://www.wsgi.org/en/latest/servers.html>`_ which "
"can be used by *any* application supporting WSGI."
msgstr "`WSGI homepage <http://www.wsgi.org/en/latest/index.html>`_ は全ての WSGI に関連したコードに対して素晴しい概観を与えてくれます、ここには WSGI をサポートするアプリケーション *全て* が利用できるサーバの広大なリスト `WSGI servers <http://www.wsgi.org/en/latest/servers.html>`_ が含まれています。"

#: ../../howto/webservers.rst:397
msgid ""
"You might be interested in some WSGI-supporting modules already contained in"
" the standard library, namely:"
msgstr "標準ライブラリに含まれる WSGI をサポートするモジュールに興味が湧いたかもしれません:"

#: ../../howto/webservers.rst:400
msgid ":mod:`wsgiref` -- some tiny utilities and servers for WSGI"
msgstr ":mod:`wsgiref` -- WSGI のためのいくつかの小さなユーティリティとサーバ"

#: ../../howto/webservers.rst:404
msgid "Case study: MoinMoin"
msgstr "事例研究: MoinMoin"

#: ../../howto/webservers.rst:406
msgid ""
"What does WSGI give the web application developer?  Let's take a look at an "
"application that's been around for a while, which was written in Python "
"without using WSGI."
msgstr "WSGI は web アプリケーションプログラマに何をもたらしてくれるのでしょうか? 長く存在しているWSGI を使わない、Python で書かれた web アプリケーションをみてみましょう。"

#: ../../howto/webservers.rst:410
msgid ""
"One of the most widely used wiki software packages is `MoinMoin "
"<http://moinmo.in/>`_.  It was created in 2000, so it predates WSGI by about"
" three years.  Older versions needed separate code to run on CGI, "
"mod_python, FastCGI and standalone."
msgstr "最も広く使われている wiki ソフトウェアの一つに `MoinMoin <http://moinmo.in/>`_ があります。これは2000年に作られたため、WSGI より3年ほど先行していました。古いバージョンでは CGI、mod_python、FastCGI、スタンドアロンで動作するためには別々のコードが必要でした。"

#: ../../howto/webservers.rst:415
msgid ""
"It now includes support for WSGI.  Using WSGI, it is possible to deploy "
"MoinMoin on any WSGI compliant server, with no additional glue code. Unlike "
"the pre-WSGI versions, this could include WSGI servers that the authors of "
"MoinMoin know nothing about."
msgstr "現在では WSGI をサポートしていますが、いまやこれら全ては WSGI と既存のゲートウェイを使って可能になりました。FastCGI 上では ``flup`` を使って実行できますし、スタンドアロンサーバとして実行するには :mod:`wsgiref` を使うことになります。"

#: ../../howto/webservers.rst:422
msgid "Model-View-Controller"
msgstr "モデル・ビュー・コントローラ(Model-View-Controller)"

#: ../../howto/webservers.rst:424
msgid ""
"The term *MVC* is often encountered in statements such as \"framework *foo* "
"supports MVC\".  MVC is more about the overall organization of code, rather "
"than any particular API.  Many web frameworks use this model to help the "
"developer bring structure to their program.  Bigger web applications can "
"have lots of code, so it is a good idea to have an effective structure right"
" from the beginning. That way, even users of other frameworks (or even other"
" languages, since MVC is not Python-specific) can easily understand the "
"code, given that they are already familiar with the MVC structure."
msgstr "*MVC* という用語は「フレームワーク *foo* は MVC をサポートしています」というような文句でよく聞きます。MVC は技術的なものというよりかは、構造的なものです、多くの web フレームワークはこのモデルを使って開発者がプログラムに構造を持ちこむことを助けています。大きな web アプリケーションはたくさんのコードを持っているので、最初からプログラムに構造を持たせることはよい考えです。そうすることで、他のフレームワーク(他の言語でもかまいません、MVC は Python 特有のものではないので)のユーザであっても、構造に既に馴染んでいるため、存在しているコードを簡単に理解できるようになります。"

#: ../../howto/webservers.rst:433
msgid "MVC stands for three components:"
msgstr "MVC は三要素からできています:"

#: ../../howto/webservers.rst:435
msgid ""
"The *model*.  This is the data that will be displayed and modified.  In "
"Python frameworks, this component is often represented by the classes used "
"by an object-relational mapper."
msgstr "*model* これは変更されるデータのことです。たいていの Python のフレームワークでこの要素は object-relational マッパーを利用したクラスで表現されます。つまり宣言部分はここに集約されます。"

#: ../../howto/webservers.rst:439
msgid ""
"The *view*.  This component's job is to display the data of the model to the"
" user.  Typically this component is implemented via templates."
msgstr "*view* この要素はモデルのデータをユーザに表示する仕事を行います。典型的にはこの要素はテンプレートで表現されます。"

#: ../../howto/webservers.rst:442
msgid ""
"The *controller*.  This is the layer between the user and the model.  The "
"controller reacts to user actions (like opening some specific URL), tells "
"the model to modify the data if necessary, and tells the view code what to "
"display,"
msgstr "*controller* これはユーザとモデルの間のレイヤーです。controller はユーザの動作(特定の URL を開く等)に反応して、必要に応じてモデルにデータを変更するよう伝えます。"

#: ../../howto/webservers.rst:447
msgid ""
"While one might think that MVC is a complex design pattern, in fact it is "
"not. It is used in Python because it has turned out to be useful for "
"creating clean, maintainable web sites."
msgstr "MVC を複雑なデザインパターンだと考える人もいるかもしれませんが、実際はそうではありません。Python で使われているのは、それがきれいで保守可能な web サイトを作成するのに便利だということがわかっているからです。"

#: ../../howto/webservers.rst:453
msgid ""
"While not all Python frameworks explicitly support MVC, it is often trivial "
"to create a web site which uses the MVC pattern by separating the data logic"
" (the model) from the user interaction logic (the controller) and the "
"templates (the view).  That's why it is important not to write unnecessary "
"Python code in the templates -- it works against the MVC model and creates "
"chaos in the code base, making it harder to understand and modify."
msgstr "全ての Python フレームワークが明示的に MVC をサポートしているわけではありませんが、MVC パターンを使った、データロジック (model) とインタラクションロジック (controller) とテンプレート (view) を分離した web サイトを作成することはありふれています。その理由はテンプレートに不必要な Python コードを書かないことが重要なことだからです --  MVC に反すると大混乱を生むことになります。"

#: ../../howto/webservers.rst:462
msgid ""
"The English Wikipedia has an article about the `Model-View-Controller "
"pattern <http://en.wikipedia.org/wiki/Model-view-controller>`_.  It includes"
" a long list of web frameworks for various programming languages."
msgstr "Wikipedia の英語版には `Model-View-Controller pattern <http://en.wikipedia.org/wiki/Model-view-controller>`_ の記事があります、この記事には様々な言語での web フレームワークの長大なリストが含まれています。"

#: ../../howto/webservers.rst:468
msgid "Ingredients for Websites"
msgstr "web サイトの構成要素"

#: ../../howto/webservers.rst:470
msgid ""
"Websites are complex constructs, so tools have been created to help web "
"developers make their code easier to write and more maintainable.  Tools "
"like these exist for all web frameworks in all languages.  Developers are "
"not forced to use these tools, and often there is no \"best\" tool.  It is "
"worth learning about the available tools because they can greatly simplify "
"the process of developing a web site."
msgstr "web サイトは複雑な構造物です、そのため web サイト開発者の保守作業を助けるためにツールが作られました。それらのツールは Python 固有のものではないので、他のプログラミング言語に対しても存在します。もちろん、開発者はそれらのツールを使うことを強制されることはありませんし、たいていの場合において「最良」のツールも存在しません、しかし、開発者が利用できる道具は膨大にあるので、どれかを選ぶ前に情報を得ておくことは価値のあることです。"

#: ../../howto/webservers.rst:480
msgid ""
"There are far more components than can be presented here.  The Python wiki "
"has a page about these components, called `Web Components "
"<https://wiki.python.org/moin/WebComponents>`_."
msgstr "ここで述べたものよりも多くの組み合わせ可能な要素が書かれています。Python wiki にはこれらの要素についてのページ `Web Components <https://wiki.python.org/moin/WebComponents>`_ があります。"

#: ../../howto/webservers.rst:486
msgid "Templates"
msgstr "テンプレート"

#: ../../howto/webservers.rst:488
msgid ""
"Mixing of HTML and Python code is made possible by a few libraries.  While "
"convenient at first, it leads to horribly unmaintainable code.  That's why "
"templates exist.  Templates are, in the simplest case, just HTML files with "
"placeholders.  The HTML is sent to the user's browser after filling in the "
"placeholders."
msgstr "HTML と Python コードを混在させることは、いくつかのライブラリを利用することで可能になります。最初は便利ですが、そうすることでコードが保守不可能となる恐れがあります。これがテンプレートが存在する理由です。テンプレートは、最も単純な場合には、単にプレースホルダーを持つ HTML ファイルとなります。プレースホルダーを埋めた後に HTML はユーザのブラウザに送信されます。"

#: ../../howto/webservers.rst:494
msgid "Python already includes a way to build simple templates::"
msgstr "Python には既に単純なテンプレートを作る手段があります::"

#: ../../howto/webservers.rst:500
msgid ""
"To generate complex HTML based on non-trivial model data, conditional and "
"looping constructs like Python's *for* and *if* are generally needed. "
"*Template engines* support templates of this complexity."
msgstr "Python の標準ライブラリには、:class:`string.Template` を通して利用できるより高度なテンプレートも含まれています、しかし、HTML テンプレートには Python の *for* や *if* のような条件やループなどが使えることが必要です。そのため、*テンプレートエンジン* が必要になります。"

#: ../../howto/webservers.rst:504
msgid ""
"There are a lot of template engines available for Python which can be used "
"with or without a `framework`_.  Some of these define a plain-text "
"programming language which is easy to learn, partly because it is limited in"
" scope. Others use XML, and the template output is guaranteed to be always "
"be valid XML.  There are many other variations."
msgstr "いまや、Python には多くのテンプレートエンジンがあり、`framework`_ とともに、または独立に利用できます。いくつかのテンプレートエンジンは平文のプログラミング言語を利用します、この言語はとても限定的なので簡単に学ぶことができます、一方で他のものには XML を利用し、テンプレートの出力が正当な XML であることが保証されているものがあります。いくつかの `framework`_ は独自のテンプレートエンジンを含んでいたり、特定のエンジンを使うことを推奨しています。もしどれがいいかわからない場合には、使ってみるといいでしょう。"

#: ../../howto/webservers.rst:510
msgid ""
"Some `frameworks`_ ship their own template engine or recommend one in "
"particular.  In the absence of a reason to use a different template engine, "
"using the one provided by or recommended by the framework is a good idea."
msgstr "Python はほんとうに様々なテンプレートエンジンを持っていますが、たいていの場合に手製のテンプレートシステムを使うことは理にかないません。全てのテンプレートシステムを評価するのは不毛ですから、最も人気のあるものを探すのに時間を割いた方がよいでしょう。いくつかのフレームワークは独自のテンプレートエンジンを持っていたり、推奨しているものがあります。これらを選ぶのが賢いでしょう。"

#: ../../howto/webservers.rst:514
msgid "Popular template engines include:"
msgstr "人気のあるテンプレートエンジンに含まれるものは:"

#: ../../howto/webservers.rst:516
msgid "`Mako <http://www.makotemplates.org/>`_"
msgstr "`Mako <http://www.makotemplates.org/>`_"

#: ../../howto/webservers.rst:517
msgid "`Genshi <http://genshi.edgewall.org/>`_"
msgstr "`Genshi <http://genshi.edgewall.org/>`_"

#: ../../howto/webservers.rst:518
msgid "`Jinja <http://jinja.pocoo.org/>`_"
msgstr "`Jinja <http://jinja.pocoo.org/>`_"

#: ../../howto/webservers.rst:522
msgid ""
"There are many template engines competing for attention, because it is "
"pretty easy to create them in Python.  The page `Templating "
"<https://wiki.python.org/moin/Templating>`_ in the wiki lists a big, ever-"
"growing number of these.  The three listed above are considered \"second "
"generation\" template engines and are a good place to start."
msgstr "たくさんの様々なテンプレートエンジンが、それぞれに注目を分けあっています、これは Python でのエンジン作成が簡単なためです。wiki の `Templating <https://wiki.python.org/moin/Templating>`_ には巨大な今も増え続けるエンジンが列挙されています。"

#: ../../howto/webservers.rst:530
msgid "Data persistence"
msgstr "データの永続性"

#: ../../howto/webservers.rst:532
msgid ""
"*Data persistence*, while sounding very complicated, is just about storing "
"data. This data might be the text of blog entries, the postings on a "
"bulletin board or the text of a wiki page.  There are, of course, a number "
"of different ways to store information on a web server."
msgstr "*データの永続性 (data persistence)* は複雑に聞こえますが、単にデータを蓄積するだけです。このデータはブログのエントリであったり、掲示板の投稿であったり、wiki ページのテキストであったりします。例のごとく web サーバに情報をたくわえるには様々な方法があります。"

#: ../../howto/webservers.rst:537
msgid ""
"Often, relational database engines like `MySQL <http://www.mysql.com/>`_ or "
"`PostgreSQL <http://www.postgresql.org/>`_ are used because of their good "
"performance when handling very large databases consisting of millions of "
"entries.  There is also a small database engine called `SQLite "
"<http://www.sqlite.org/>`_, which is bundled with Python in the "
":mod:`sqlite3` module, and which uses only one file.  It has no other "
"dependencies.  For smaller sites SQLite is just enough."
msgstr "しばしば `MySQL <http://www.mysql.com/>`_ や `PostgreSQL <http://www.postgresql.org/>`_ のようなリレーショナルデータベースエンジンが利用されます、それは数百万エントリに及ぶ非常に大きなデータベースを優れたパフォーマンスで扱うことができるためです。`SQLite <http://www.sqlite.org/>`_ と呼ばれる小さなデータベースエンジンもあります、これは Python に :mod:`sqlite3` モジュールとしてバンドルされていて、ファイル一つだけを利用します。他の依存関係がありません。小さなサイトに対しては SQLite で十分です。"

#: ../../howto/webservers.rst:545
msgid ""
"Relational databases are *queried* using a language called `SQL "
"<http://en.wikipedia.org/wiki/SQL>`_.  Python programmers in general do not "
"like SQL too much, as they prefer to work with objects.  It is possible to "
"save Python objects into a database using a technology called `ORM "
"<http://en.wikipedia.org/wiki/Object-relational_mapping>`_ (Object "
"Relational Mapping).  ORM translates all object-oriented access into SQL "
"code under the hood, so the developer does not need to think about it.  Most"
" `frameworks`_ use ORMs, and it works quite well."
msgstr "それらは `SQL <http://en.wikipedia.org/wiki/SQL>`_ と呼ばれる言語を利用した *照会 (queried)* です。一般的な Python プログラマは SQL をあまり好みません、彼らはオブジェクトで動作する方を好みます。`ORM <http://en.wikipedia.org/wiki/Object-relational_mapping>`_ と呼ばれる技術を使うことでデータベース内の Python オブジェクトを節約できます。ORM は内部でオブジェクト指向的アクセスを SQL コードに変換し、ユーザはそのことを意識せずに済みます。多くの `framework`_ は ORMs を利用し、とてもうまく動作します."

#: ../../howto/webservers.rst:554
msgid ""
"A second possibility is storing data in normal, plain text files (some times"
" called \"flat files\").  This is very easy for simple sites, but can be "
"difficult to get right if the web site is performing many updates to the "
"stored data."
msgstr "第2の可能性はハードディスクに保存されたファイルを利用することです (しばしば、フラットファイルと呼ばれます)。これはとても簡単ですが、高速ではありません。このデータベースは ORM 経由でオブジェクトを保存するのに利用できて、ただ、データをファイルシステムに保存する方法はこれだけではありません。普通の平文のテキストファイルで十分な場合もあります。"

#: ../../howto/webservers.rst:559
msgid ""
"A third possibility are object oriented databases (also called \"object "
"databases\").  These databases store the object data in a form that closely "
"parallels the way the objects are structured in memory during program "
"execution.  (By contrast, ORMs store the object data as rows of data in "
"tables and relations between those rows.)  Storing the objects directly has "
"the advantage that nearly all objects can be saved in a straightforward way,"
" unlike in relational databases where some objects are very hard to "
"represent."
msgstr "第3の最も利用されない方法はオブジェクト指向データベースと呼ばれています。このデータベースは、OR マッピングによって行との間に作成されるリレーションの代わりに、*実際のオブジェクト* を保存します。この方法にはほとんど全てのオブジェクトを直接的な方法で保存できるという利点があります、これはリレーショナルデータベースでいくつかのオブジェクトが ORMs で表現するのが困難であるのと対照的です。"

#: ../../howto/webservers.rst:567
msgid ""
"`Frameworks`_ often give hints on which data storage method to choose.  It "
"is usually a good idea to stick to the data store recommended by the "
"framework unless the application has special requirements better satisfied "
"by an alternate storage mechanism."
msgstr "`framework`_ はしばしばユーザにどの方法を選べばいいか、ヒントを与えてくれます。たいていの場合、一つだけの方法を必要とする特別な条件がある場合がない限りは、それに従うことはいい考えです。"

#: ../../howto/webservers.rst:574
msgid ""
"`Persistence Tools <https://wiki.python.org/moin/PersistenceTools>`_ lists "
"possibilities on how to save data in the file system.  Some of these modules"
" are part of the standard library"
msgstr "`Persistence Tools <https://wiki.python.org/moin/PersistenceTools>`_ はファイルシステムにデータを保存する方法が列挙されています、これらのモジュールの内のいくつかは標準ライブラリの一部です"

#: ../../howto/webservers.rst:578
msgid ""
"`Database Programming <https://wiki.python.org/moin/DatabaseProgramming>`_ "
"helps with choosing a method for saving data"
msgstr "`Database Programming <https://wiki.python.org/moin/DatabaseProgramming>`_ はデータ保存の方法を選ぶのを助けてくれます"

#: ../../howto/webservers.rst:581
msgid ""
"`SQLAlchemy <http://www.sqlalchemy.org/>`_, the most powerful OR-Mapper for "
"Python, and `Elixir <http://elixir.ematia.de/>`_, which makes SQLAlchemy "
"easier to use"
msgstr "`SQLAlchemy <http://www.sqlalchemy.org/>`_ は Python での最も強力な OR マッパーで、`Elixir <http://elixir.ematia.de/>`_ は利用しやすいものにしてくれます"

#: ../../howto/webservers.rst:585
msgid "`SQLObject <http://www.sqlobject.org/>`_, another popular OR-Mapper"
msgstr "`SQLObject <http://www.sqlobject.org/>`_ は別の人気のある OR マッパーです"

#: ../../howto/webservers.rst:587
msgid ""
"`ZODB <https://launchpad.net/zodb>`_ and `Durus <http://www.mems-"
"exchange.org/software/durus/>`_, two object oriented databases"
msgstr "`ZODB <https://launchpad.net/zodb>`_ と `Durus <http://www.mems-exchange.org/software/durus/>`_ の二つはオブジェクト指向データベースです"

#: ../../howto/webservers.rst:595
msgid "Frameworks"
msgstr "フレームワーク"

#: ../../howto/webservers.rst:597
msgid ""
"The process of creating code to run web sites involves writing code to "
"provide various services.  The code to provide a particular service often "
"works the same way regardless of the complexity or purpose of the web site "
"in question. Abstracting these common solutions into reusable code produces "
"what are called \"frameworks\" for web development.  Perhaps the most well-"
"known framework for web development is Ruby on Rails, but Python has its own"
" frameworks.  Some of these were partly inspired by Rails, or borrowed ideas"
" from Rails, but many existed a long time before Rails."
msgstr "web サイトは簡単に大きくなりうるので、開発者がそれらのサイトを簡単に扱えるよう助けるものはフレームワークと呼ばれます。最も知られたフレームワークは Ruby on Rails ですが、Python も独自のフレームワークを持っていて、それらは Rails からヒントを得たものであったり、Rails より以前から存在していたものであったりします。"

#: ../../howto/webservers.rst:606
msgid ""
"Originally Python web frameworks tended to incorporate all of the services "
"needed to develop web sites as a giant, integrated set of tools.  No two web"
" frameworks were interoperable:  a program developed for one could not be "
"deployed on a different one without considerable re-engineering work.  This "
"led to the development of \"minimalist\" web frameworks that provided just "
"the tools to communicate between the Python code and the http protocol, with"
" all other services to be added on top via separate components.  Some ad hoc"
" standards were developed that allowed for limited interoperability between "
"frameworks, such as a standard that allowed different template engines to be"
" used interchangeably."
msgstr "web フレームワークのアプローチには二つの方法があります: 最小主義アプローチと全てを含む包括的アプーチ (しばしば *full-stack* と呼ばれます) です。包括的なフレームワークは作業を始めるのに必要なもの全てが揃っています、テンプレートエンジン、いくつかのデータベースへの保存、アクセス方法やその他の機能。それらは他の多くユーザによって広く利用されていて、本やチュートリアルといった形式で詳細なドキュメントが準備されているので、多くのユーザはそれらを利用して順調に進めることができます、他の web フレームワークは最小主義アプローチをとり、できるだけ自由に変えられるようにして、ユーザがどれが最良かを選ぶ自由を残せるようにしています。"

#: ../../howto/webservers.rst:617
msgid ""
"Since the advent of WSGI, the Python web framework world has been evolving "
"toward interoperability based on the WSGI standard.  Now many web "
"frameworks, whether \"full stack\" (providing all the tools one needs to "
"deploy the most complex web sites) or minimalist, or anything in between, "
"are built from collections of reusable components that can be used with more"
" than one framework."
msgstr "ユーザの多数は包括的フレームワークを利用することで順調に進めることができます。それらのフレームワークは全てを備えているので、ユーザは単に飛び乗ってコートを書くことができます。それらには制限がある一方で、申し分なくやりたいと思った内容の 80% は埋めてくれます。それらは多様な要素から成っていて、それぞれの要素ができるだけうまく協調できるようにデザインされています。"

#: ../../howto/webservers.rst:624
msgid ""
"The majority of users will probably want to select a \"full stack\" "
"framework that has an active community.  These frameworks tend to be well "
"documented, and provide the easiest path to producing a fully functional web"
" site in minimal time."
msgstr "Python で書かれた web フレームワークが大多数存在することは、実際にそれらを書くことが容易だということを実証しています。Python で書かれた web アプリケーションで最も知られているものは `Zope <http://www.zope.org/>`_ で、これは大きなフレームワークの一種とみなすことができます。しかし、いまではほとんど忘れられていますが、Zope は単なるフレームワークではありません、利用者の多くが新しいものに移行したため、それらについてこれ以上記述する必要はないでしょう。"

#: ../../howto/webservers.rst:631
msgid "Some notable frameworks"
msgstr "いくつかの著名なフレームワーク"

#: ../../howto/webservers.rst:633
msgid ""
"There are an incredible number of frameworks, so they cannot all be covered "
"here.  Instead we will briefly touch on some of the most popular."
msgstr "膨大な数のフレームワークがあるので、全てについて記述することは不可能ですし、その必要さえありません、なぜならほとんどのフレームワークは特別なものではありませんし、それらにできることは人気のあるものでできます。"

#: ../../howto/webservers.rst:638
msgid "Django"
msgstr "Django"

#: ../../howto/webservers.rst:640
msgid ""
"`Django <https://www.djangoproject.com/>`_ is a framework consisting of "
"several tightly coupled elements which were written from scratch and work "
"together very well.  It includes an ORM which is quite powerful while being "
"simple to use, and has a great online administration interface which makes "
"it possible to edit the data in the database with a browser.  The template "
"engine is text-based and is designed to be usable for page designers who "
"cannot write Python.  It supports template inheritance and filters (which "
"work like Unix pipes).  Django has many handy features bundled, such as "
"creation of RSS feeds or generic views, which make it possible to create web"
" sites almost without writing any Python code."
msgstr "`Django <https://www.djangoproject.com/>`_ はスクラッチから書かれた、とてもうまく協調する、いくつかの要素が強く結びついてできたフレームワークです。ORM を含んでいてとても強力である上に、単純に利用でき、ブラウザからデータベース上のデータを編集できる優秀な管理インターフェースを持っています。テンプレートエンジンはテキストベースで動作し、Python を書けないページデザイナーにとっても利用しやすいようにデザインされています。テンプレート継承やフィルタ (Unix のパイプのように動作します) と呼ばれるものもサポートしています。Django は RSS フィードの作成や、ほぼ Python コード無しで web サイトを作ることができるようなジェネリックビューといった、多くの役に立つ機能をバンドルしています。"

#: ../../howto/webservers.rst:650
msgid ""
"It has a big, international community, the members of which have created "
"many web sites.  There are also a lot of add-on projects which extend "
"Django's normal functionality.  This is partly due to Django's well written "
"`online documentation <https://docs.djangoproject.com/>`_ and the `Django "
"book <http://www.djangobook.com/>`_."
msgstr "Django には、Django を利用して多くのサイトを作成してきた大きく、国際的なコミュニティがあります。Django の通常の機能を拡張するアドオンプロジェクトもたくさんあります。この内容の一部は Django の素晴らしい `online documentation <https://docs.djangoproject.com/>`_ と `Django book <http://www.djangobook.com/>`_ によります。"

#: ../../howto/webservers.rst:659
msgid ""
"Although Django is an MVC-style framework, it names the elements "
"differently, which is described in the `Django FAQ "
"<https://docs.djangoproject.com/en/dev/faq/general/#django-appears-to-be-a"
"-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-"
"template-how-come-you-don-t-use-the-standard-names>`_."
msgstr "Django は MVC スタイルフレームワークですが、Django は構成要素に対して異なる名前で読んでいます、このことは `Django FAQ <https://docs.djangoproject.com/en/dev/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names>`_ に詳しい記述があります。"

#: ../../howto/webservers.rst:665
msgid "TurboGears"
msgstr "TurboGears"

#: ../../howto/webservers.rst:667
msgid ""
"Another popular web framework for Python is `TurboGears "
"<http://www.turbogears.org/>`_.  TurboGears takes the approach of using "
"already existing components and combining them with glue code to create a "
"seamless experience.  TurboGears gives the user flexibility in choosing "
"components. For example the ORM and template engine can be changed to use "
"packages different from those used by default."
msgstr "Python の他に人気あるフレームワークは `TurboGears <http://www.turbogears.org/>`_ です。これは既存の要素と継ぎ目ををなくすためグルーコードを使ってそれらを組み合わせるアプローチをとっています。TurboGears はユーザが自由に要素を選べるようにしていて、ORM は制限が多い代わり使いやすいもの、複雑だが強力なもの、に切り替えて使うことができます。テンプレートエンジンにも同様のことがいえます。TurboGears の強力な点は、構成要素が他のプロジェクトでも TurboGears への依存無しに簡単に利用できるということです、例えば TurboGears を支えている web サーバ CherryPy もそうです。"

#: ../../howto/webservers.rst:674
msgid ""
"The documentation can be found in the `TurboGears wiki "
"<http://docs.turbogears.org/>`_, where links to screencasts can be found. "
"TurboGears has also an active user community which can respond to most "
"related questions.  There is also a `TurboGears book "
"<http://turbogearsbook.com/>`_ published, which is a good starting point."
msgstr "ドキュメントが `TurboGears wiki <http://docs.turbogears.org/>`_ にあり、スクリーンキャストへのリンクもあります。TurboGears には関連した質問のほとんどに答えられる、活動的なユーザコミュニティがあります。入門に向いた `TurboGears book <http://turbogearsbook.com/>`_ も出版されています。"

#: ../../howto/webservers.rst:680
msgid ""
"The newest version of TurboGears, version 2.0, moves even further in "
"direction of WSGI support and a component-based architecture.  TurboGears 2 "
"is based on the WSGI stack of another popular component-based web framework,"
" `Pylons <http://www.pylonsproject.org/>`_."
msgstr "次の TurboGears のメジャーバージョン version 2.0 での計画では、`Pylons <http://www.pylonsproject.org/>`_ と呼ばれる別の柔軟なフレームワークによって提供される、より柔軟な基本要素に切り替えることになっています。"

#: ../../howto/webservers.rst:687
msgid "Zope"
msgstr "Zope"

#: ../../howto/webservers.rst:689
msgid ""
"The Zope framework is one of the \"old original\" frameworks.  Its current "
"incarnation in Zope2 is a tightly integrated full-stack framework.  One of "
"its most interesting feature is its tight integration with a powerful object"
" database called the `ZODB <https://launchpad.net/zodb>`_ (Zope Object "
"Database). Because of its highly integrated nature, Zope wound up in a "
"somewhat isolated ecosystem:  code written for Zope wasn't very usable "
"outside of Zope, and vice-versa.  To solve this problem the Zope 3 effort "
"was started.  Zope 3 re-engineers Zope as a set of more cleanly isolated "
"components.  This effort was started before the advent of the WSGI standard,"
" but there is WSGI support for Zope 3 from the `Repoze "
"<http://repoze.org/>`_ project.  Zope components have many years of "
"production use behind them, and the Zope 3 project gives access to these "
"components to the wider Python community.  There is even a separate "
"framework based on the Zope components: `Grok <http://grok.zope.org/>`_."
msgstr "そのうちの一つは既に言及しましたが Zope です、このフレームワークはずいぶんと長い期間にわたって存在しています。Zope 2.x はどちらかというと Pythonic でないとされてきましたが、新しい Zope 3.x ではその変更を試みて、Python プログラマから受け入れられ始めています。これらの努力は既に結果をみせ始めていて、`Repoze <http://repoze.org/>`_ と呼ばれる Zope と WSGI を結びつけるプロジェクトや `Grok <http://grok.zope.org/>`_ と呼ばれる Zope の熟慮された要素を「普通の」Python プログラマが使えるようにするためのプロジェクトがあります。"

#: ../../howto/webservers.rst:704
msgid ""
"Zope is also the infrastructure used by the `Plone <https://plone.org/>`_ "
"content management system, one of the most powerful and popular content "
"management systems available."
msgstr "Zope は `Plone <https://plone.org/>`_ によって利用されているインフラストラクチャでもあります。Plone は利用可能な中でもっとも強力で人気のあるコンテンツ管理システムの一つです。"

#: ../../howto/webservers.rst:710
msgid "Other notable frameworks"
msgstr "他の著名なフレームワーク"

#: ../../howto/webservers.rst:712
msgid ""
"Of course these are not the only frameworks that are available.  There are "
"many other frameworks worth mentioning."
msgstr "もちろんこれらの二つだけが利用できるフレームワーク全てではありません、人気では少し劣りますが、言及するに値するフレームワークがいくつかあります。"

#: ../../howto/webservers.rst:715
msgid ""
"Another framework that's already been mentioned is `Pylons`_.  Pylons is "
"much like TurboGears, but with an even stronger emphasis on flexibility, "
"which comes at the cost of being more difficult to use.  Nearly every "
"component can be exchanged, which makes it necessary to use the "
"documentation of every single component, of which there are many.  Pylons "
"builds upon `Paste <http://pythonpaste.org/>`_, an extensive set of tools "
"which are handy for WSGI."
msgstr "既に述べた別のフレームワークに `Pylons`_ がありました。Pylons は TurboGears とよく似ていますが、柔軟性に磨きがかかっていて、利用するコストが少々高くつきます。ほとんど全ての要素は交換することができるため、それぞれの要素について、ドキュメントを利用するこが避けられません、なぜなら各必要条件を満す Pylons の組み合わせの可能性は本当にたくさんあるのです。Pylons は WSGI を扱いやすくするための広範囲なツールである、`Paste <http://pythonpaste.org/>`_ を基にして組まれています。"

#: ../../howto/webservers.rst:722
msgid ""
"And that's still not everything.  The most up-to-date information can always"
" be found in the Python wiki."
msgstr "これで全てが述べられたわけではありません。最新の情報の多くは Python wiki で見つけることができます。"

#: ../../howto/webservers.rst:727
msgid ""
"The Python wiki contains an extensive list of `web frameworks "
"<https://wiki.python.org/moin/WebFrameworks>`_."
msgstr "Python wiki には広大な `web frameworks <https://wiki.python.org/moin/WebFrameworks>`_ のリストがあります。"

#: ../../howto/webservers.rst:730
msgid ""
"Most frameworks also have their own mailing lists and IRC channels, look out"
" for these on the projects' web sites."
msgstr "多くのフレームワークは独自のメーリングリストや IRC チャンネルを持っています、プロジェクトの web サイトからそれらを探して下さい。"
